[
    {
        "id": "bc1bab9a1f9a2cfc",
        "type": "tab",
        "label": "e2e Simulations",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "31f995839deda452",
        "type": "tab",
        "label": "MyWater",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5d81012049ef5c11",
        "type": "tab",
        "label": "❌Teltonika (Energy, Fridge)",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7d74cd6f6f7ecb5a",
        "type": "tab",
        "label": "POC Bikes 2 (n fleet n cargo)",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "f05df52a173b55f6",
        "type": "tab",
        "label": "OLD Bikes parser",
        "disabled": true,
        "info": "whicih was last updated to handle just poc 5 bikes retaining the rest of heritage parsing but disabled.\n\nthen cleansed and consolidated just for 5 bikes and turned into a separate flow",
        "env": []
    },
    {
        "id": "0b341faebdc36f06",
        "type": "tab",
        "label": "RensairPOC03_S3",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "a83f932318520f19",
        "type": "tab",
        "label": "DigitalMatter (remora, bolt, yabby, oyster)",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "5b6bbc35843236c3",
        "type": "tab",
        "label": "ESB Control Delegation",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "d552056ef1ced847",
        "type": "tab",
        "label": "QA Live Device",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "897f09753607b3a2",
        "type": "tab",
        "label": "EMEA ORANO_REST",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "bc405aef93a3a2c0",
        "type": "tab",
        "label": "Streetlights_LEGACY",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "34b7d0bcf37c9198",
        "type": "tab",
        "label": "❌AssistedLiving",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "250c4c97297d1235",
        "type": "tab",
        "label": "Repetition Test",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "76fcc8aa9fbb9d8b",
        "type": "tab",
        "label": "IDTronic_TrackMini_REST",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "8744f388b5607c09",
        "type": "tab",
        "label": "UDP Bike Monitoring",
        "disabled": true,
        "info": "",
        "env": []
    },
    {
        "id": "1bf059c2cddda71e",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6c7aa8eaacfceccb",
        "type": "mqtt-broker",
        "name": "mqtt.Xelerate.solutions_IDTronic",
        "broker": "mqtt.xelerate.solutions",
        "port": "1883",
        "clientid": "INXETL12312",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "b6fb5d071c21a067",
        "type": "mqtt-broker",
        "name": "ProdUmersFMC230_1",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "UmersFirstFMC230",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "d3f816f5a99ddb5b",
        "type": "mqtt-broker",
        "d": true,
        "name": "Remora383076_Dev",
        "broker": "t925813249.cumulocity.com",
        "port": "1883",
        "clientid": "Remora383076",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "79c1d4f68e234a3e",
        "type": "mqtt-broker",
        "name": "Remora3565 Dev",
        "broker": "t925813249.cumulocity.com",
        "port": "1883",
        "clientid": "Remora383565",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "dbe3e7c446319407",
        "type": "mqtt-broker",
        "name": "Remora383568_Dev",
        "broker": "t925813249.cumulocity.com",
        "port": "1883",
        "clientid": "Remora383568",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "18e9cacb889f9b2f",
        "type": "mqtt-broker",
        "name": "383076Prod",
        "broker": "demo-solutions.emea.cumulocity.com",
        "port": "1883",
        "clientid": "Remora383076",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "fd79225331c414cb",
        "type": "mqtt-broker",
        "name": "383565Prod",
        "broker": "demo-solutions.emea.cumulocity.com",
        "port": "1883",
        "clientid": "Remora383565",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "810406116fdc2e43",
        "type": "mqtt-broker",
        "name": "Remora383568_Prod",
        "broker": "demo-solutions.emea.cumulocity.com",
        "port": "1883",
        "clientid": "Remora383568",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "70b0fab178f075af",
        "type": "mqtt-broker",
        "name": "",
        "broker": "ckh.cumulocity.com",
        "port": "1883",
        "clientid": "Remora383076",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1de382c3b8cdadc6",
        "type": "mqtt-broker",
        "name": "",
        "broker": "ckh.cumulocity.com",
        "port": "1883",
        "clientid": "Remora383565",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "7f6f959f330875d9",
        "type": "mqtt-broker",
        "name": "ckh remora 568",
        "broker": "ckh.cumulocity.com",
        "port": "1883",
        "clientid": "Remora383568",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "4a46acfce798c2ed",
        "type": "mqtt-broker",
        "name": "dynamic broker1",
        "broker": "0.0.0.0",
        "port": "0",
        "clientid": "",
        "autoConnect": false,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc52fa406b",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_011_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM011",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc52fa407b",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_012_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM012",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc52fa408c",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_013_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM013",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc52fa409d",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_014_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM014",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc52fa401e",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_015_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM015",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc52fa416a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_016_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM016",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc52fa417a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_017_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM017",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc52fa426a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_018_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM018",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc52fa418a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_019_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM019",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc52fa516a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_020_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM020",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc52fb516a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_021_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM021",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72eec52fa516a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_022_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM022",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72fec52fa516a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_023_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM023",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc12fa516a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_024_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM024",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc56fa516a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_025_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM025",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc52fa556a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_027_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM027",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc11fa516a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_028_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM028",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc52fa111a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_029_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM029",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "2cb72edc52fa516a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_030_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM030",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc89fa516a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_031_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM031",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc88fa516a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_032_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM032",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc87fa516a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_033_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM033",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc86fa516a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_034_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM034",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc84fa516a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_035_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM035",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc83fa516a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_036_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM036",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc80fa516a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_037_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM037",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc79fa516a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_038_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM038",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc78fa516a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_039_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM039",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc76fa516a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_040_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM040",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc52fa444b",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_001_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM001",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc52fa777b",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_002_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM002",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc52fa008c",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_003_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM003",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc15fa409d",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_004_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM004",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc11fa401e",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_005_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM005",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc52fa116a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_006_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM006",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc52fa411a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_007_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM007",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72eda52fa426a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_008_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM008",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72ede52fa418a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_009_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM009",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1cb72edc22fa516a",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_010_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM010",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "09f8c937c2568afe",
        "type": "mqtt-broker",
        "name": "CrowdMgmt_Prod_026",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "CM026",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "385f37425ca98538",
        "type": "mqtt-broker",
        "name": "",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "Albusayra_FMC230_001",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "a7a8759ec56fa3b8",
        "type": "mqtt-broker",
        "name": "SmartFarm_West",
        "broker": "t1210372600.cumulocity.com",
        "port": "1883",
        "clientid": "SmartAgriFarm_West",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "b82e5665e61c9c64",
        "type": "mqtt-broker",
        "name": "SmartAgriFarm_North",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "SmartAgriFarm_North",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "c1d171e67d34562d",
        "type": "mqtt-broker",
        "name": "SmartAgriFarm_AlPakriya",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "SmartAgriFarm_AlPakriya",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "868b68bd26c0ee7d",
        "type": "mqtt-broker",
        "name": "ProdStreertlightAll",
        "broker": "t1210372600.cumulocity.com",
        "port": "1883",
        "clientid": "12345123400",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "bbb9715de6b3ef3a",
        "type": "mqtt-broker",
        "name": "ProdStreetLight1",
        "broker": "t1210372600.cumulocity.com",
        "port": "1883",
        "clientid": "12345123401",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "0d18fb4f1f6e0f8d",
        "type": "mqtt-broker",
        "name": "ProdStreetlight2",
        "broker": "t1210372600.cumulocity.com",
        "port": "1883",
        "clientid": "12345123402",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "ffa280b09e5e0df5",
        "type": "mqtt-broker",
        "name": "ProdSL3_12345123403",
        "broker": "t1210372600.cumulocity.com",
        "port": "1883",
        "clientid": "12345123403",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "3b4805373ac8adca",
        "type": "mqtt-broker",
        "name": "ProdSL4_12345123404",
        "broker": "t1210372600.cumulocity.com",
        "port": "1883",
        "clientid": "12345123404",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "acdcf317f8b0ce9f",
        "type": "mqtt-broker",
        "name": "ProdSL5_12345123405",
        "broker": "t1210372600.cumulocity.com",
        "port": "1883",
        "clientid": "12345123405",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "c278002ca639c4da",
        "type": "mqtt-broker",
        "name": "ProdSL6_12345123406",
        "broker": "t1210372600.cumulocity.com",
        "port": "1883",
        "clientid": "12345123406",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "201dd01fe60fa2ec",
        "type": "mqtt-broker",
        "name": "ProdSL7_12345123407",
        "broker": "t1210372600.cumulocity.com",
        "port": "1883",
        "clientid": "12345123407",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "507fc2b5c5201c5a",
        "type": "mqtt-broker",
        "name": "CKHStreetlightAll",
        "broker": "ckh.cumulocity.com",
        "port": "1883",
        "clientid": "12345123400",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "ead118a6116a694a",
        "type": "mqtt-broker",
        "name": "",
        "broker": "ckh.cumulocity.com",
        "port": "1883",
        "clientid": "SmartWorker",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "407f1b4b3e947e45",
        "type": "mqtt-broker",
        "name": "FahadsCareRecepientC8Y_Dev",
        "broker": "t925813249.cumulocity.com",
        "port": "1883",
        "clientid": "FahadsCareRecipient",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "135d6c0815123365",
        "type": "mqtt-broker",
        "name": "",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "FahadsCareRecipient",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "b4e5462d36bf3187",
        "type": "mqtt-broker",
        "name": "Fahadscarereccp_ckh",
        "broker": "ckh.cumulocity.com",
        "port": "1883",
        "clientid": "FahadsCareRecipient",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "4ca1626c609b40b5",
        "type": "mqtt-broker",
        "name": "FahadsCareRecipient",
        "broker": "umershome.duckdns.org",
        "port": "5883",
        "clientid": "FahadsCareRecipient",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "96189bdf4a8f68e8",
        "type": "mqtt-broker",
        "name": "",
        "broker": "t925813249.cumulocity.com",
        "port": "1883",
        "clientid": "1115875080",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "93c3627e6f1b932a",
        "type": "mqtt-broker",
        "name": "Production111_5080",
        "broker": "demo-solutions.emea.cumulocity.com",
        "port": "1883",
        "clientid": "1115875080",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "5816b9d5281c386d",
        "type": "mqtt-broker",
        "name": "",
        "broker": "ckh.cumulocity.com",
        "port": "1883",
        "clientid": "1115875080",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "ca21c682a317c2eb",
        "type": "mqtt-broker",
        "name": "tibbo teltonika Dev",
        "broker": "t925813249.cumulocity.com",
        "port": "1883",
        "clientid": "1114910619",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "085407411cc6e5df",
        "type": "mqtt-broker",
        "name": "ProdTibboTeltonika",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "1114910619",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "e6df6c1257ba545e",
        "type": "mqtt-broker",
        "name": "",
        "broker": "t1340500863.cumulocity.com",
        "port": "1883",
        "clientid": "FridgeDupCKH",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "9c68adb1aaa37d91",
        "type": "mqtt-broker",
        "name": "Albusayra_FMC230_001_Dev",
        "broker": "t925813249.cumulocity.com",
        "port": "1883",
        "clientid": "Albusayra_FMC230_001",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "d95b802295f3487f",
        "type": "mqtt-broker",
        "name": "",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "Albusayra_FMC230_002",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "39bb307e1a759a01",
        "type": "mqtt-broker",
        "name": "Albusayra bike 2 Dev",
        "broker": "t925813249.cumulocity.com",
        "port": "1883",
        "clientid": "Albusayra_Bike_2",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "373637bc766a5e6c",
        "type": "mqtt-broker",
        "name": "UmersFMC230_Dev",
        "broker": "t925813249.cumulocity.com",
        "port": "1883",
        "clientid": "UmersFMC230",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "54819f09d767b0cb",
        "type": "mqtt-broker",
        "name": "Albusayra_FMC230_003_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "Albusayra_FMC230_003",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "a2b088d82e04efd3",
        "type": "mqtt-broker",
        "name": "Albusayra_FMC230_004_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "Albusayra_FMC230_004",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "fef5973b48a0cbe7",
        "type": "mqtt-broker",
        "name": "Albusayra_FMC230_004_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "Albusayra_FMC230_004",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "e7bb84491da9847c",
        "type": "mqtt-broker",
        "name": "Albusayra_FMC230_005_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "Albusayra_FMC230_005",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "32eaee021723ded5",
        "type": "mqtt-broker",
        "name": "Albusayra_FMC230_003_Dev",
        "broker": "t925813249.cumulocity.com",
        "port": "1883",
        "clientid": "Albusayra_FMC230_003",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1a06af53d0dc8076",
        "type": "mqtt-broker",
        "name": "Albusayra_FMC230_004_Dev",
        "broker": "t925813249.cumulocity.com",
        "port": "1883",
        "clientid": "Albusayra_FMC230_004",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1aa0a0496a31e377",
        "type": "mqtt-broker",
        "name": "Albusayra_FMC230_005_Dev",
        "broker": "t925813249.cumulocity.com",
        "port": "1883",
        "clientid": "Albusayra_FMC230_005",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "f34db8ff74a8a506",
        "type": "mqtt-broker",
        "name": "",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "HeatPump1",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "9d172c7125eb910b",
        "type": "mqtt-broker",
        "name": "HeatPump2_Prod",
        "broker": "t1210372600.cumulocity.com",
        "port": "1883",
        "clientid": "HeatPump2",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "26c6a3e340849d37",
        "type": "mqtt-broker",
        "name": "HeatPump3_Prod",
        "broker": "t1210372600.cumulocity.com",
        "port": "1883",
        "clientid": "HeatPump3",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "a675669d3c80195e",
        "type": "mqtt-broker",
        "name": "",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "McDonalds_Prod",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "d0528c65f6491575",
        "type": "mqtt-broker",
        "name": "WhitakerFarmCow1_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "WhitakerFarmCow1",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "0e7fd0ce92961fa7",
        "type": "mqtt-broker",
        "name": "SmartWaterMeter_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "SmartWaterMeter",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1e118b45da8692fb",
        "type": "mqtt-broker",
        "name": "PhnxxHeatpump_W20_1",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "PhnxxHeatpump_W20_1",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "27c3c54795d5c6c5",
        "type": "mqtt-broker",
        "name": "PhnxxHeatpump_W20_2",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "PhnxxHeatpump_W20_2",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "f459285b09d10872",
        "type": "mqtt-broker",
        "name": "PhnxxHeatpump_W20_3",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "PhnxxHeatpump_W20_3",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "4464c373aa7b10a7",
        "type": "mqtt-broker",
        "name": "PhnxxHeatpump_W40_1",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "PhnxxHeatpump_W40_1",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "8760b1768522ee4a",
        "type": "mqtt-broker",
        "name": "PhnxxHeatpump_W40_2",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "PhnxxHeatpump_W40_2",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "5c3cc570341c38af",
        "type": "mqtt-broker",
        "name": "PhnxxHeatpump_W40_3",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "PhnxxHeatpump_W40_3",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "bc644d722e17ca48",
        "type": "mqtt-broker",
        "name": "PhnxxHeatpump_W60_1",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "PhnxxHeatpump_W60_1",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "41396847d97efdc6",
        "type": "mqtt-broker",
        "name": "PhnxxHeatpump_W60_2",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "PhnxxHeatpump_W60_2",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "dab79cc93734b966",
        "type": "mqtt-broker",
        "name": "PhnxxHeatpump_W60_3",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "PhnxxHeatpump_W60_3",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "a02afaf3de7a064f",
        "type": "mqtt-broker",
        "name": "Mfr_facility_1_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "Mfr_facility_1",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "43b970991b84f175",
        "type": "mqtt-broker",
        "name": "Mfr_facility_2_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "Mfr_facility_2",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "b5e112026d82a0c3",
        "type": "mqtt-broker",
        "name": "Mfr_facility_3_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "Mfr_facility_33",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "cd7999b1c7d701a5",
        "type": "mqtt-broker",
        "name": "StraddleCarrier2_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "StraddleCarrier2",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "08f7bd7f6e177a96",
        "type": "mqtt-broker",
        "name": "Rensair1_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "Rensair1",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "ae9bc6422e7cc2fd",
        "type": "mqtt-broker",
        "name": "Rensair2_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "Rensair2_Prod",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "3a350c794c78d3d9",
        "type": "mqtt-broker",
        "name": "Rensair3_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "Rensair3_Prod",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "2e8c36c79a410d27",
        "type": "mqtt-broker",
        "name": "GasPlantCompressor1_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "GasPlantCompressor1_Prod",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "261653b9e169e209",
        "type": "mqtt-broker",
        "name": "GasPlantCompressor2_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "GasPlantCompressor2_Prod",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "074e22175fc29076",
        "type": "mqtt-broker",
        "name": "GasPlantCompressor3_Prod",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "GasPlantCompressor3_Prod",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "364642572b35c93d",
        "type": "mqtt-broker",
        "name": "MyWater_TAQ",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "MyWater_TAQ",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "93b695214e79a143",
        "type": "mqtt-broker",
        "name": "ORANO",
        "broker": "mqtt.xelerate.solutions",
        "port": "1883",
        "clientid": "445644422",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "4795c7c497183516",
        "type": "mqtt-broker",
        "name": "RepetitionTest",
        "broker": "t925813249.cumulocity.com",
        "port": "1883",
        "clientid": "RepetitionTest",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "2cfcf945ad52ad26",
        "type": "mqtt-broker",
        "name": "ESBN_SI_7200",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "ESBN_SI_7200",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "dac9f60ad793e26b",
        "type": "mqtt-broker",
        "name": "ESBN_SI_7100",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "ESBN_SI_7100",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "5ff4c6a1a2200d38",
        "type": "mqtt-broker",
        "name": "ESBN_SI_7300",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "ESBN_SI_7300",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "140c5d72a82dc109",
        "type": "mqtt-broker",
        "name": "ESBN_SI_8100",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "ESBN_SI_8100",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "74dab0b89c203d32",
        "type": "mqtt-broker",
        "name": "ESBN_SI_8200",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "ESBN_SI_8200",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "18e443ccaa8ec677",
        "type": "mqtt-broker",
        "name": "ESBN_SI_8300",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "ESBN_SI_8300",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "54aa328b27c07794",
        "type": "mqtt-broker",
        "name": "ESBN_SI_9100",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "ESBN_SI_9100",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "eba4933f583a28ba",
        "type": "mqtt-broker",
        "name": "ESBN_SI_9200",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "ESBN_SI_9200",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "9049632f571277c7",
        "type": "mqtt-broker",
        "name": "ESBN_SI_9300",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "ESBN_SI_9300",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "cf257dbc6a840b6f",
        "type": "mqtt-broker",
        "name": "MQTT.Xelerate.SOlutions",
        "broker": "mqtt.xelerate.solutions",
        "port": "1883",
        "clientid": "NodeRed12345233",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": false,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "44515c37adfc10c7",
        "type": "mqtt-broker",
        "name": "CKH Devices",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "12:34:56:78:90",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "e1f19448ef0f2205",
        "type": "mqtt-broker",
        "name": "ORANO_359159972124789",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "ORANO_359159972124789",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "f44889954ed091ee",
        "type": "mqtt-broker",
        "name": "ORANO_359159972124912",
        "broker": "t1210372600.cumulocity.com",
        "port": "1883",
        "clientid": "ORANO_359159972124912",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "5183ac938c1c37b6",
        "type": "mqtt-broker",
        "name": "DT_20220901",
        "broker": "deltatrak.cumulocity.com",
        "port": "1883",
        "clientid": "DT_20220901",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "ae1a6899651f6ab6",
        "type": "mqtt-broker",
        "name": "DT_20220902",
        "broker": "deltatrak.cumulocity.com",
        "port": "1883",
        "clientid": "DT_20220902",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "3d51923158df62e9",
        "type": "mqtt-dynamic-broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "verifyservercert": true,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": ""
    },
    {
        "id": "a1759412171ed784",
        "type": "mqtt-broker",
        "name": "ProdSL3",
        "broker": "production.cumulocity.com",
        "port": "1883",
        "clientid": "ProdSL3",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "901e77e53dd0d560",
        "type": "mqtt-broker",
        "name": "Fronious Dev",
        "broker": "developer.cumulocity.com",
        "port": "1883",
        "clientid": "869492056693889_3",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "34c1eb061266e241",
        "type": "mqtt-broker",
        "name": "broker.x.sol",
        "broker": "broker.xelerate.solutions",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "a93d4ff72192dfc3",
        "type": "mqtt-broker",
        "name": "Fronius TCP E2E",
        "broker": "t1210372600.emea.cumulocity.com",
        "port": "1883",
        "clientid": "869492056695454",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "10",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "275791cea5740d6b",
        "type": "mqtt-broker",
        "name": "broker.xelerate.solutions",
        "broker": "broker.xelerate.solutions",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "5eb4d7055cb2e340",
        "type": "coap-server",
        "name": "XirgoCOAP",
        "port": "5683",
        "ipv6": false
    },
    {
        "id": "dd35d63eeece9e46",
        "type": "mqtt-broker",
        "name": "Fronius RTU E2E",
        "broker": "t1210372600.emea.cumulocity.com",
        "port": "1883",
        "clientid": "e8f0f4fe-88f7-4fc1-a2df-357b75db2999",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": false,
        "birthTopic": "",
        "birthQos": "2",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "ef0816793a59ca1b",
        "type": "mqtt-broker",
        "name": "",
        "broker": "lla.us.cumulocity.com",
        "port": "1883",
        "clientid": "4017408",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "ca8621f016ddbe02",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 100,
        "wires": [
            [
                "b52cc093fa6f0514"
            ]
        ]
    },
    {
        "id": "7ea1f767572e6f23",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "21600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 100,
        "wires": [
            [
                "ca8621f016ddbe02"
            ]
        ]
    },
    {
        "id": "b52cc093fa6f0514",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "SC",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            \n\n            {\n                type:\"payload\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":\"119297367\" },\n                \"payload\":{\n                    \"Temperature\": { \"value\": genRand(16,28,2), \"unit\": \"°C\" },\n                    \"Humidity\": { \"value\": genRand(40,70,2), \"unit\": \"%\" },\n                    \"StockQuantity\": { \"value\": genRand(0,50,0), \"unit\": \"Units\" },\n                    \"Weight\": { \"value\": genRand(400,500,0), \"unit\": \"kg\" }\n                }\n            }\n// ,            {\n//                 type:\"payload\",\n//                 time:DTS.toISOString(),\n//                 \"source\": {\"id\":\"119292846\" },\n//                 \"payload\":{\n//                     \"Temperature\": { \"value\": genRand(16,28,2), \"unit\": \"°C\" },\n//                     \"Humidity\": { \"value\": genRand(40,70,2), \"unit\": \"%\" },\n//                     \"StockQuantity\": { \"value\": genRand(0,50,0), \"unit\": \"Units\" },\n//                     \"Weight\": { \"value\": genRand(400,500,0), \"unit\": \"kg\" }\n//                 }\n//             }\n// ,            {\n//                 type:\"payload\",\n//                 time:DTS.toISOString(),\n//                 \"source\": {\"id\":\"119294541\" },\n//                 \"payload\":{\n//                     \"Temperature\": { \"value\": genRand(16,28,2), \"unit\": \"°C\" },\n//                     \"Humidity\": { \"value\": genRand(40,70,2), \"unit\": \"%\" },\n//                     \"StockQuantity\": { \"value\": genRand(0,50,0), \"unit\": \"Units\" },\n//                     \"Weight\": { \"value\": genRand(400,500,0), \"unit\": \"kg\" }\n//                 }\n//             }\n        ]\n    }\n\nreturn msg;\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 100,
        "wires": [
            [
                "12920757908270dc",
                "b98cad2b3574600a"
            ]
        ]
    },
    {
        "id": "12920757908270dc",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "d": true,
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 990,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "91b50182eab1918e",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 100,
        "wires": []
    },
    {
        "id": "1a3cb46ac72dfcfe",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 200,
        "wires": [
            [
                "5441edd04ee3a904"
            ]
        ]
    },
    {
        "id": "e5288abb33e14507",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "21600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 200,
        "wires": [
            [
                "1a3cb46ac72dfcfe"
            ]
        ]
    },
    {
        "id": "5441edd04ee3a904",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "WH",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            \n\n            {\n                type:\"payload\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":\"188467728\" },\n                \"payload\":{\n                    \"Temperature\": { \"value\": genRand(16,28,2), \"unit\": \"°C\" },\n                    \"Humidity\": { \"value\": genRand(40,70,2), \"unit\": \"%\" },\n                    \"GoodsReceived\": { \"value\": genRand(0,100,0), \"unit\": \"Units\" },\n                    \"GoodsInTransit\": { \"value\": genRand(0,50,0), \"unit\": \"Units\" },\n                    \"QuarantineStock\": { \"value\": genRand(0,10,0), \"unit\": \"Units\" },\n                    \"BlockedStock\": { \"value\": genRand(0,10,0), \"unit\": \"Units\" },\n                    \"DamagedStock\": { \"value\": genRand(0,5,0), \"unit\": \"Units\" },\n                    \"ReadyToShip\": { \"value\": genRand(0,30,0), \"unit\": \"Units\" }\n                }\n            }\n// ,            {\n//                 type:\"payload\",\n//                 time:DTS.toISOString(),\n//                 \"source\": {\"id\":\"188464079\" },\n//                 \"payload\":{\n//                     \"Temperature\": { \"value\": genRand(16,28,2), \"unit\": \"°C\" },\n//                     \"Humidity\": { \"value\": genRand(40,70,2), \"unit\": \"%\" },\n//                     \"GoodsReceived\": { \"value\": genRand(0,100,0), \"unit\": \"Units\" },\n//                     \"GoodsInTransit\": { \"value\": genRand(0,50,0), \"unit\": \"Units\" },\n//                     \"QuarantineStock\": { \"value\": genRand(0,10,0), \"unit\": \"Units\" },\n//                     \"BlockedStock\": { \"value\": genRand(0,10,0), \"unit\": \"Units\" },\n//                     \"DamagedStock\": { \"value\": genRand(0,5,0), \"unit\": \"Units\" },\n//                     \"ReadyToShip\": { \"value\": genRand(0,30,0), \"unit\": \"Units\" }\n//                 }\n//             }\n// ,            {\n//                 type:\"payload\",\n//                 time:DTS.toISOString(),\n//                 \"source\": {\"id\":\"188466733\" },\n//                 \"payload\":{\n//                     \"Temperature\": { \"value\": genRand(16,28,2), \"unit\": \"°C\" },\n//                     \"Humidity\": { \"value\": genRand(40,70,2), \"unit\": \"%\" },\n//                     \"GoodsReceived\": { \"value\": genRand(0,100,0), \"unit\": \"Units\" },\n//                     \"GoodsInTransit\": { \"value\": genRand(0,50,0), \"unit\": \"Units\" },\n//                     \"QuarantineStock\": { \"value\": genRand(0,10,0), \"unit\": \"Units\" },\n//                     \"BlockedStock\": { \"value\": genRand(0,10,0), \"unit\": \"Units\" },\n//                     \"DamagedStock\": { \"value\": genRand(0,5,0), \"unit\": \"Units\" },\n//                     \"ReadyToShip\": { \"value\": genRand(0,30,0), \"unit\": \"Units\" }\n//                 }\n            // }\n        ]\n    }\n\nreturn msg;\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 200,
        "wires": [
            [
                "bb95fd6df4c9d53c",
                "d939f1ce67828085"
            ]
        ]
    },
    {
        "id": "bb95fd6df4c9d53c",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "d": true,
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 990,
        "y": 200,
        "wires": [
            [
                "ad56455f93489c92"
            ]
        ]
    },
    {
        "id": "ad56455f93489c92",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 200,
        "wires": []
    },
    {
        "id": "b98cad2b3574600a",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EmeaE2e",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 980,
        "y": 60,
        "wires": [
            [
                "91b50182eab1918e"
            ]
        ]
    },
    {
        "id": "d939f1ce67828085",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EmeaE2e",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 980,
        "y": 160,
        "wires": [
            [
                "ad56455f93489c92"
            ]
        ]
    },
    {
        "id": "c9ee5e650c2968be",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EDCClawPump",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":\"40788374\" },\n                \"converged_measurements\":{\n                    \"NoiseLevel\": { \"value\": genRand(0,100,2), \"unit\": \"dBm\" },\n                    \"NominalDisplacement\": { \"value\": genRand(40,70,2), \"unit\": \"%\" },\n                    \"AmbientTemperature\": { \"value\": genRand(0,40,2), \"unit\": \"\t°C\" },\n                    \"PumpSpeed\": { \"value\": genRand(200,1000,0), \"unit\": \"rpm\" },\n                    \"NominalMotorRating\": { \"value\": genRand(0,10,0), \"unit\": \"kW\" } \n                }\n            }\n        ]\n    }\n\nreturn msg;\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 320,
        "wires": [
            [
                "30011a35d3a39c7a",
                "07fb8a4e76a0c2b2"
            ]
        ]
    },
    {
        "id": "e961494c3d8baf14",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 320,
        "wires": [
            [
                "c9ee5e650c2968be"
            ]
        ]
    },
    {
        "id": "30011a35d3a39c7a",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "d": true,
        "name": "Prod REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 320,
        "wires": [
            [
                "e9433a0b5a72e666"
            ]
        ]
    },
    {
        "id": "07fb8a4e76a0c2b2",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EMEA Prod REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 280,
        "wires": [
            [
                "e9433a0b5a72e666"
            ]
        ]
    },
    {
        "id": "917496f0e87bd585",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "21600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 320,
        "wires": [
            [
                "e961494c3d8baf14"
            ]
        ]
    },
    {
        "id": "e9433a0b5a72e666",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 320,
        "wires": []
    },
    {
        "id": "8d58b93433090163",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 460,
        "wires": [
            [
                "b567c176795661b3"
            ]
        ]
    },
    {
        "id": "bb2bea33b7ed4554",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "3300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 330,
        "y": 460,
        "wires": [
            [
                "8d58b93433090163",
                "c1dda677204996e6"
            ]
        ]
    },
    {
        "id": "c95eb05350163aaf",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "d": true,
        "name": "Prod REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1030,
        "y": 460,
        "wires": [
            [
                "3f70ae146c6d2ab6"
            ]
        ]
    },
    {
        "id": "3f70ae146c6d2ab6",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 460,
        "wires": []
    },
    {
        "id": "b567c176795661b3",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "AirQuality Montoring",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            genDeviceData(\"157989137\")\n            ,genDeviceData(\"157024988\")\n            ,genDeviceData(\"157984904\")\n            ,genDeviceData(\"187819797\")\n        ]\n    }\n\nreturn msg;\n\nfunction genDeviceData(DeviceID){\n    var b = {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":DeviceID },\n                \"converged_measurements\":{\n                    \"Temperature\": { \"value\": genRand(16,28,2), \"unit\": \"°C\" },\n                    \"Humidity\": { \"value\": genRand(40,70,2), \"unit\": \"%\" },\n                    \"VOC\": { \"value\": genRand(100,600,0), \"unit\": \"Index\" },\n                    \"CO2\": { \"value\": genRand(400,800,0), \"unit\": \"µg/m3\" },\n                    \"PM1\": { \"value\": genRand(5,15,0), \"unit\": \"µg/m3\" },\n                    \"PM2_5\": { \"value\": genRand(10,20,0), \"unit\": \"µg/m3\" } ,\n                    \"PM4\": { \"value\": genRand(10,20,0), \"unit\": \"µg/m3\" } ,\n                    \"PM10\": { \"value\": genRand(10,200,0), \"unit\": \"µg/m3\" } ,\n                    \"AQI__\": { \"value\": genRand(0,200,0), \"unit\": \"AQI\" } ,\n                    \"Fan_Speed\": { \"value\": genRand(0,4,0), \"unit\": \"State\" } ,\n                    \"AirQualityIndex\": { \"value\": 1, \"unit\": \"State\" }, \n                    \"aqi\": { \"value\": genRand(0,200,0), \"unit\": \"AQI\" } ,\n                }\n            }\n    return b;\n}\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 460,
        "wires": [
            [
                "c95eb05350163aaf",
                "cb2128b4b2b65c03"
            ]
        ]
    },
    {
        "id": "cb2128b4b2b65c03",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EMEA Prod",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1030,
        "y": 500,
        "wires": [
            [
                "4739494ebc4c276a"
            ]
        ]
    },
    {
        "id": "4739494ebc4c276a",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 500,
        "wires": []
    },
    {
        "id": "122f0f825389b01d",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDE2NzM4OTYzNTQvZmFyaGFuLnFhemlAaW52aXhpYmxlLmNvbTpARmFyaGFubnJzMTI=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 660,
        "wires": [
            [
                "cb7e31f6c588f2b4"
            ]
        ]
    },
    {
        "id": "f512631ae5d6852f",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "3900",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 660,
        "wires": [
            [
                "122f0f825389b01d"
            ]
        ]
    },
    {
        "id": "cb7e31f6c588f2b4",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "DEV AQ Devices",
        "func": "var DTS = new Date();\nvar theTS=DTS.toISOString()\n// theTS=\"2022-12-06T08:00:00.000Z\"\nmsg.payload={\n    \"measurements\": [\n           \n\n            {\n                type:\"converged_measurements1\",\n                time:theTS,\n                \"source\": {\"id\":\"14669\" }, //basingstoke\n                \"converged_measurements1\":{\n                    \"Temperature\": { \"value\": genRand(16,28,2), \"unit\": \"°C\" },\n                    \"Humidity\": { \"value\": genRand(40,70,2), \"unit\": \"%\" },\n                    \"VOC\": { \"value\": genRand(100,600,0), \"unit\": \"ppm\" },\n                    \"CO2\": { \"value\": genRand(400,800,0), \"unit\": \"ppm\" },\n                    \"PM1\": { \"value\": genRand(5,15,0), \"unit\": \"ppm\" },\n                    \"PM2_5\": { \"value\": genRand(10,20,0), \"unit\": \"ppm\" } ,\n                    \"PM10\": { \"value\": genRand(10,80,0), \"unit\": \"ppm\" } ,\n                    \"AirQualityIndex\": { \"value\": 1, \"unit\": \"State\" } \n                }\n            }\n            ,\n            {\n                type:\"converged_measurements\",\n                time:theTS,\n                \"source\": {\"id\":\"13710\" },//newbury\n                \"converged_measurements\":{\n                    \"Temperature\": { \"value\": genRand(16,28,2), \"unit\": \"°C\" },\n                    \"Humidity\": { \"value\": genRand(40,70,2), \"unit\": \"%\" },\n                    \"VOC\": { \"value\": genRand(100,600,0), \"unit\": \"ppm\" },\n                    \"CO2\": { \"value\": genRand(400,800,0), \"unit\": \"ppm\" },\n                    \"PM1\": { \"value\": genRand(5,15,0), \"unit\": \"ppm\" },\n                    \"PM2_5\": { \"value\": genRand(10,20,0), \"unit\": \"ppm\" } ,\n                    \"PM10\": { \"value\": genRand(10,80,0), \"unit\": \"ppm\" } ,\n                    \"AirQualityIndex\": { \"value\": 1, \"unit\": \"State\" } \n                }\n            },\n            {\n                type:\"converged_measurements1\",\n                time:theTS,\n                \"source\": {\"id\":\"11516\" },//reading\n                \"converged_measurements1\":{\n                    \"Temperature\": { \"value\": genRand(16,28,2), \"unit\": \"°C\" },\n                    \"Humidity\": { \"value\": genRand(40,70,2), \"unit\": \"%\" },\n                    \"VOC\": { \"value\": genRand(100,600,0), \"unit\": \"ppm\" },\n                    \"CO2\": { \"value\": genRand(400,800,0), \"unit\": \"ppm\" },\n                    \"PM1\": { \"value\": genRand(5,15,0), \"unit\": \"ppm\" },\n                    \"PM2_5\": { \"value\": genRand(10,20,0), \"unit\": \"ppm\" } ,\n                    \"PM10\": { \"value\": genRand(10,80,0), \"unit\": \"ppm\" } ,\n                    \"AirQualityIndex\": { \"value\": 1, \"unit\": \"State\" } \n                }\n            },\n            {\n                type:\"converged_measurements1\",\n                time:theTS,\n                \"source\": {\"id\":\"11517\" },//gitex\n                \"converged_measurements1\":{\n                    \"Temperature\": { \"value\": genRand(16,28,2), \"unit\": \"°C\" },\n                    \"Humidity\": { \"value\": genRand(40,70,2), \"unit\": \"%\" },\n                    \"VOC\": { \"value\": genRand(100,600,0), \"unit\": \"ppm\" },\n                    \"CO2\": { \"value\": genRand(400,1400,0), \"unit\": \"ppm\" },\n                    \"PM1\": { \"value\": genRand(5,15,0), \"unit\": \"ppm\" },\n                    \"PM2_5\": { \"value\": genRand(10,20,0), \"unit\": \"ppm\" } ,\n                    \"PM10\": { \"value\": genRand(10,80,0), \"unit\": \"ppm\" } ,\n                    \"AirQualityIndex\": { \"value\": 1, \"unit\": \"State\" } \n                }\n            }\n        ]\n    }\n\nreturn msg;\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 660,
        "wires": [
            [
                "7b7ffeca7ba422c7",
                "3f2f8a1963bbf55a"
            ]
        ]
    },
    {
        "id": "7b7ffeca7ba422c7",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "d": true,
        "name": "Dev REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1673896354.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 660,
        "wires": [
            [
                "cde5b3baeb9d4424"
            ]
        ]
    },
    {
        "id": "3f2f8a1963bbf55a",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "New Dev REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://developer.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1020,
        "y": 620,
        "wires": [
            [
                "4086da47e8672807"
            ]
        ]
    },
    {
        "id": "cde5b3baeb9d4424",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 660,
        "wires": []
    },
    {
        "id": "4086da47e8672807",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 620,
        "wires": []
    },
    {
        "id": "e441a804f873e131",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "21600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 820,
        "wires": [
            [
                "95595a4c5d6b7f01"
            ]
        ]
    },
    {
        "id": "95595a4c5d6b7f01",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 820,
        "wires": [
            [
                "f6652fc2a498760f"
            ]
        ]
    },
    {
        "id": "f6652fc2a498760f",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "worker saefty",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":\"77074376\" },\n                \"converged_measurements\":{\n                    \"Temperature\": { \"value\": genRand(36,38,2), \"unit\": \"°C\" },\n                    \"Battery\": { \"value\": genRand(78,85,2), \"unit\": \"%\" },\n                    \"SpO2\": { \"value\": genRand(94,98,0), \"unit\": \"ppm\" },\n                    \"HeartBeat\": { \"value\": genRand(60,100,0), \"unit\": \"bpm\" },\n                    \"Steps\": { \"value\": 8059, \"unit\": \"Steps\" } ,\n                    \"Shock\": { \"value\": 0, \"unit\": \"State\" },\n                    \"Mood\": { \"value\": 1, \"unit\": \"State\" },\n                    \"SafetyGear\": { \"value\": 1, \"unit\": \"State\" } \n                }\n            }\n        ]\n    }\n\nreturn msg;\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 820,
        "wires": [
            [
                "edef34e8934b3b4e",
                "9b9baff20828a02c"
            ]
        ]
    },
    {
        "id": "edef34e8934b3b4e",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "d": true,
        "name": "Prod REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 820,
        "wires": [
            [
                "e04077e15be4997c"
            ]
        ]
    },
    {
        "id": "9b9baff20828a02c",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "New Prod REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1000,
        "y": 780,
        "wires": [
            [
                "e04077e15be4997c"
            ]
        ]
    },
    {
        "id": "e04077e15be4997c",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 820,
        "wires": []
    },
    {
        "id": "a6c6fcdafb27d5c6",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "Motor Monitoring",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":\"188898832\" },\n                \"converged_measurements\":{\n                    \"Temperature\": { \"value\": genRand(20,50,2), \"unit\": \"°C\" },\n                    \"Speed\": { \"value\": genRand(0,5,2), \"unit\": \"m/s\" },\n                    \"Device Temperature\": { \"value\": genRand(30,60,2), \"unit\": \"°C\" },\n                    \"Vibration\": { \"value\": genRand(0,6,2), \"unit\": \"mms\" },\n                    \"Power\": { \"value\": genRand(0,40,2), \"unit\": \"kV\" }\n                }\n            }\n        ]\n    }\n\nreturn msg;\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 747.0000381469727,
        "y": 902.0000534057617,
        "wires": [
            [
                "5bf6c8e0974f4d97",
                "67a01a0e03763cdd"
            ]
        ]
    },
    {
        "id": "fbaca1b251c5a7cc",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 507.00003814697266,
        "y": 902.0000534057617,
        "wires": [
            [
                "a6c6fcdafb27d5c6"
            ]
        ]
    },
    {
        "id": "5bf6c8e0974f4d97",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "d": true,
        "name": "Prod REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1007.0000381469727,
        "y": 902.0000534057617,
        "wires": [
            [
                "e60338f269e9d31f"
            ]
        ]
    },
    {
        "id": "9c7703cd1ac87915",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "21600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 307.00003814697266,
        "y": 902.0000534057617,
        "wires": [
            [
                "fbaca1b251c5a7cc"
            ]
        ]
    },
    {
        "id": "e60338f269e9d31f",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1167.0000381469727,
        "y": 902.0000534057617,
        "wires": []
    },
    {
        "id": "67a01a0e03763cdd",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EMEA Prod REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 860,
        "wires": [
            [
                "e60338f269e9d31f"
            ]
        ]
    },
    {
        "id": "2cf2df08b8543eca",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "Gas monitoring stanlow compressor",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":\"159464757\" },\n                \"converged_measurements\":{\n                    \"Temperature\": { \"value\": genRand(36,38,2), \"unit\": \"°C\" },\n                    \"Vibration\": { \"value\": genRand(0,6,2), \"unit\": \"mms\" },\n                    \"Pressure\": { \"value\": genRand(40,70,2), \"unit\": \"psi\" },\n                    \"FlowRate\": { \"value\": genRand(0,8,2), \"unit\": \"g/min\" },\n                    \"ValveStatus\": { \"value\": 1, \"unit\": \"State\" }\n                }\n            }\n        ]\n    }\n\nreturn msg;\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1020,
        "wires": [
            [
                "637467fd2efcd1d7",
                "b594464c4678ab9a"
            ]
        ]
    },
    {
        "id": "cf32a63f903cfde3",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1020,
        "wires": [
            [
                "2cf2df08b8543eca"
            ]
        ]
    },
    {
        "id": "637467fd2efcd1d7",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "d": true,
        "name": "Prod REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1030,
        "y": 1020,
        "wires": [
            [
                "567f5e96f9845c61"
            ]
        ]
    },
    {
        "id": "f16a16cae93ac4fb",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "21600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 1020,
        "wires": [
            [
                "cf32a63f903cfde3"
            ]
        ]
    },
    {
        "id": "567f5e96f9845c61",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 1020,
        "wires": []
    },
    {
        "id": "ef7e533cc1c18b29",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "assembly line",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":\"117988412\" },\n                \"converged_measurements\":{\n                    \"Temperature\": { \"value\": genRand(20,50,2), \"unit\": \"°C\" },\n                    \"Speed\": { \"value\": genRand(0,5,2), \"unit\": \"m/s\" },\n                    \"Device Temperature\": { \"value\": genRand(30,60,2), \"unit\": \"°C\" },\n                    \"Vibration\": { \"value\": genRand(0,6,2), \"unit\": \"mms\" },\n                    \"CycleTime\": { \"value\": genRand(0,50,2), \"unit\": \"Mins\" },\n                    \"Load\": { \"value\": genRand(.5,2,2), \"unit\": \"Tons\" },\n                    \"Shock\": { \"value\": 0, \"unit\": \"State\" },\n                    \"Loaded\": { \"value\": 1, \"unit\": \"State\" }\n                }\n            }\n        ]\n    }\n\nreturn msg;\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1100,
        "wires": [
            [
                "671cf3296c5bad77",
                "3a065352afd68a3a"
            ]
        ]
    },
    {
        "id": "8304bda8c47402de",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1100,
        "wires": [
            [
                "ef7e533cc1c18b29"
            ]
        ]
    },
    {
        "id": "671cf3296c5bad77",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "Prod REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 990,
        "y": 1100,
        "wires": [
            [
                "857dfe8571ee8bd2"
            ]
        ]
    },
    {
        "id": "41b7813cbd1be904",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 1100,
        "wires": [
            [
                "8304bda8c47402de"
            ]
        ]
    },
    {
        "id": "857dfe8571ee8bd2",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 1100,
        "wires": []
    },
    {
        "id": "b594464c4678ab9a",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EmeaProd REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1050,
        "y": 980,
        "wires": [
            [
                "567f5e96f9845c61"
            ]
        ]
    },
    {
        "id": "3a065352afd68a3a",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EmeaProd REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 1060,
        "wires": [
            [
                "857dfe8571ee8bd2"
            ]
        ]
    },
    {
        "id": "a41cb25238ba23a9",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "21600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 1180,
        "wires": [
            [
                "e138be062230059d"
            ]
        ]
    },
    {
        "id": "295755ca890df2de",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "Smart Farming",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":\"121937628\" },\n                \"converged_measurements\":{\n                    \"AmbientTemperature\": { \"value\": genRand(10,40,2), \"unit\": \"°C\" },\n                    \"AmbientHumidity\": { \"value\": genRand(40,70,2), \"unit\": \"%\" },\n                    \"LightIntensity\": { \"value\": genRand(0,200,0), \"unit\": \"K Lux\" },\n                    \"DeviceTemperature\": { \"value\": genRand(20,50,2), \"unit\": \"°C\" },\n                    \"Humidity\": { \"value\": genRand(40,70,2), \"unit\": \"%\" },\n                    \"Battery\": { \"value\": 89, \"unit\": \"%\" },\n                    \"RainFall\": { \"value\": genRand(0,10,0), \"unit\": \"mm\" },\n                    \"WindSpeed\": { \"value\": genRand(0,35,0), \"unit\": \"mph\" },\n                    \"WindDirection\": { \"value\": genRand(0,360,2), \"unit\": \"degrees\" },\n                    \"SolarRadiation\": { \"value\": genRand(0,1000,0), \"unit\": \"W/m2\" },\n                    \"SoilConductivity\": { \"value\": genRand(100,600,0), \"unit\": \"mS/m\" },\n                    \"SoilTemperature\": { \"value\": genRand(0,28,0), \"unit\": \"°C\" },\n                    \"SoilMoisture\": { \"value\": genRand(0,100,2), \"unit\": \"%\" },\n                    \"SoilPH\": { \"value\": genRand(3,10,2), \"unit\": \"pH\" },\n                    \"SoilNitrogen\": { \"value\": genRand(0,300,0), \"unit\": \"mg/kg\" },\n                    \"SoilPotassium\": { \"value\": genRand(0,300,0), \"unit\": \"mg/kg\" },\n                    \"SoilPhosphorus\": { \"value\": genRand(0,300,0), \"unit\": \"mg/kg\" },\n                    \"RainDetection\": { \"value\": genRand(0,1,0), \"unit\": \"State\" },\n                    \"IrrigationWaterPressure\": { \"value\": genRand(1,6,2), \"unit\": \"Bar\" },\n                    \"PivotMovementTracking\": { \"value\": genRand(0,1,0), \"unit\": \"State\" },\n                    \"PivotAngularMisalignment\": { \"value\": genRand(0,1,0), \"unit\": \"State\" }\n                }\n            }\n        ]\n    }\n\nreturn msg;\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1180,
        "wires": [
            [
                "3bedf12fa11a4889",
                "1a74f7d3c88a6bd4"
            ]
        ]
    },
    {
        "id": "e138be062230059d",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1180,
        "wires": [
            [
                "295755ca890df2de"
            ]
        ]
    },
    {
        "id": "3bedf12fa11a4889",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EmeaProd REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 1180,
        "wires": [
            [
                "6d9ab3c9d0f14b45"
            ]
        ]
    },
    {
        "id": "6d9ab3c9d0f14b45",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 1180,
        "wires": []
    },
    {
        "id": "1a74f7d3c88a6bd4",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "Prod REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 990,
        "y": 1220,
        "wires": [
            [
                "6d9ab3c9d0f14b45"
            ]
        ]
    },
    {
        "id": "d1222372705575c6",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "21600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 1320,
        "wires": [
            [
                "8097a789aa50f0ae"
            ]
        ]
    },
    {
        "id": "8097a789aa50f0ae",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1320,
        "wires": [
            [
                "fc3e9d4869d5fc52"
            ]
        ]
    },
    {
        "id": "fc3e9d4869d5fc52",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "ev charging",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":\"155855782\" },\n                \"converged_measurements\":{\n                    \"AmbientTemperature\": { \"value\": genRand(10,40,2), \"unit\": \"°C\" },\n                    \"ChargerTemperature\": { \"value\": genRand(20,50,2), \"unit\": \"°C\" },\n                    \"ChargingVoltage\": { \"value\": genRand(230,240,0), \"unit\": \"V\" },\n                    \"ChargingCurrent\": { \"value\": genRand(30,70,2), \"unit\": \"A\" },\n                    \"ChargingPower\": { \"value\": genRand(150,450,2), \"unit\": \"kw\" },\n                    \"PowerInput\": { \"value\": genRand(200,500,0), \"unit\": \"kW\" },\n                    \"ChargerStatus\": { \"value\": genRand(0,2,0), \"unit\": \"State\" },\n                    \"ChargingStatus\": { \"value\": genRand(0,3,0), \"unit\": \"State\" },\n                    \"AssetType\": { \"value\": genRand(0,2,0), \"unit\": \"State\" },\n                    \"ChargeLevel\": { \"value\": genRand(0,100,0), \"unit\": \"%\" },\n                    \"LastChargeAt\": { \"value\": new Date().getTime(), \"unit\": \"\" },\n                }\n            }\n        ]\n    }\n\nreturn msg;\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1320,
        "wires": [
            [
                "635710add9456417",
                "0c341554dc383462"
            ]
        ]
    },
    {
        "id": "635710add9456417",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EmeaProd REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 1320,
        "wires": [
            [
                "9e014fb2664a46c5"
            ]
        ]
    },
    {
        "id": "0c341554dc383462",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "d": true,
        "name": "Prod REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 990,
        "y": 1360,
        "wires": [
            [
                "9e014fb2664a46c5"
            ]
        ]
    },
    {
        "id": "9e014fb2664a46c5",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 1320,
        "wires": []
    },
    {
        "id": "26b90b9b25823ef6",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "Heatpump",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            genDeviceData(\"137609717\")\n        ]\n    }\n\nreturn msg;\n\nfunction genDeviceData(DeviceID){\n    var b = {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":DeviceID },\n                \"converged_measurements\":{\n                    \"AmbientTemperature\": { \"value\": genRand(10,40,2), \"unit\": \"°C\" },  //\n                    \"SupplyTemperature\": { \"value\": genRand(40,60,2), \"unit\": \"°C\" },   //\n                    \"CondenserInletTemp\": { \"value\": genRand(26,36,2), \"unit\": \"°C\" },  //\n                    \"CondenserOutletTemperature\": { \"value\": genRand(26,36,2), \"unit\": \"°C\" }, //\n                    \"DeviceTemperature\": { \"value\": genRand(20,50,2), \"unit\": \"°C\" },   //\n                    \"WaterStorageTemperature\": { \"value\": genRand(20,50,2), \"unit\": \"°C\" },   //\n                    \"WaterStorageInletTemperature\": { \"value\": genRand(20,50,2), \"unit\": \"°C\" },   //\n                    \"WaterStorageOutletTemperature\": { \"value\": genRand(20,50,2), \"unit\": \"°C\" },   //\n                    \"AmbientHumidity\": { \"value\": genRand(40,70,2), \"unit\": \"%\" }, //\n                    \"SupplyHumidity\": { \"value\": genRand(40,70,2), \"unit\": \"%\" }, //\n                    \"LightIntensity\": { \"value\": genRand(0,200,2), \"unit\": \"Lux\" }, //\n                    \"MagFilterAge\": { \"value\": 341, \"unit\": \"Days\" },   //\n                    \"WaterPressure\": { \"value\": genRand(18,90,2), \"unit\": \"kpa\" }, //\n                    \"WaterFlowRate\": { \"value\": genRand(1000,1700,0), \"unit\": \"1/h\" }, //\n                    \"HotWaterCapacity\": { \"value\": genRand(100,700,0), \"unit\": \"g\" },\n                    \"BackupHeater\": { \"value\": genRand(0,1,0), \"unit\": \"State\" },   //\n                    \"NoiseLevel\": { \"value\": genRand(0,70,0), \"unit\": \"db(A)\" },//\n                    \"FanMotorPower\": { \"value\": genRand(0,50,0), \"unit\": \"kW\" },    //\n                    \"FanSpeed\": { \"value\": genRand(0,500,0), \"unit\": \"rpm\" },   //\n                    \"PowerInput\": { \"value\": genRand(200,500,0), \"unit\": \"kW\" },    //\n                    \"PowerOutput\": { \"value\": genRand(200,500,0), \"unit\": \"kW\" },   //\n                    \"HeatingOutput\": { \"value\": genRand(200,500,0), \"unit\": \"kW\" }  //\n                }\n            }\n    return b;\n}\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1420,
        "wires": [
            [
                "ab928999b314ef4a"
            ]
        ]
    },
    {
        "id": "e60be010e4a37c1c",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1420,
        "wires": [
            [
                "26b90b9b25823ef6"
            ]
        ]
    },
    {
        "id": "06816b897ab86546",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 1420,
        "wires": [
            [
                "e60be010e4a37c1c"
            ]
        ]
    },
    {
        "id": "ab928999b314ef4a",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EmeaProd REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 1420,
        "wires": [
            [
                "15d77dc6e88e2861"
            ]
        ]
    },
    {
        "id": "15d77dc6e88e2861",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 1420,
        "wires": []
    },
    {
        "id": "1a85065eecdabe63",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 492,
        "y": 1517.0000457763672,
        "wires": [
            [
                "c5cc0314e5206c7b"
            ]
        ]
    },
    {
        "id": "58c71563b1d47b93",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "21600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 292,
        "y": 1517.0000457763672,
        "wires": [
            [
                "1a85065eecdabe63"
            ]
        ]
    },
    {
        "id": "c5cc0314e5206c7b",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "Camel (ex Cattle) monitoring",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":\"136976728\" },\n                \"converged_measurements\":{\n                    \"Temperature\": { \"value\": genRand(38,45,2), \"unit\": \"°C\" },\n                    \"DeviceTemperature\": { \"value\": genRand(38,45,2), \"unit\": \"°C\" },\n                    \"Battery\": { \"value\": genRand(80,90,2), \"unit\": \"%\" },\n                    // \"Humidity\": { \"value\": genRand(40,70,2), \"unit\": \"%\" },\n                    \"Movement\": { \"value\": 1, \"unit\": \"State\" },\n                    // \"Vibration\": { \"value\": genRand(0,20,0), \"unit\": \"mm/s\" },\n                    // \"LightIntensity\": { \"value\": genRand(0,200,0), \"unit\": \"Lux\" },\n                    // \"NoiseLevel\": { \"value\": genRand(0,100,0), \"unit\": \"dB\" },\n                    \"Speed\": { \"value\": genRand(0,26,0), \"unit\": \"kmh\" }\n                    // \"Acceleration X\": { \"value\": genRand(0,1000,0), \"unit\": \"G\" },\n                    // \"Acceleration Y\": { \"value\": genRand(0,1000,0), \"unit\": \"G\" },\n                    // \"Acceleration Z\": { \"value\": genRand(0,1000,0), \"unit\": \"G\" }\n                }\n            }\n            ,{\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":\"136981775\" },\n                \"converged_measurements\":{\n                    \"Temperature\": { \"value\": genRand(38,45,2), \"unit\": \"°C\" },\n                    \"DeviceTemperature\": { \"value\": genRand(38,45,2), \"unit\": \"°C\" },\n                    \"Battery\": { \"value\": genRand(80,90,2), \"unit\": \"%\" },\n                    // \"Humidity\": { \"value\": genRand(40,70,2), \"unit\": \"%\" },\n                    \"Movement\": { \"value\": 0, \"unit\": \"State\" },\n                    // \"Vibration\": { \"value\": genRand(0,20,0), \"unit\": \"mm/s\" },\n                    // \"LightIntensity\": { \"value\": genRand(0,200,0), \"unit\": \"Lux\" },\n                    \"Speed\": { \"value\": genRand(0,26,0), \"unit\": \"kmh\" }\n                    // \"NoiseLevel\": { \"value\": genRand(0,100,0), \"unit\": \"dB\" },\n                    // \"Acceleration X\": { \"value\": genRand(0,1000,0), \"unit\": \"G\" },\n                    // \"Acceleration Y\": { \"value\": genRand(0,1000,0), \"unit\": \"G\" },\n                    // \"Acceleration Z\": { \"value\": genRand(0,1000,0), \"unit\": \"G\" }\n                }\n            }\n        ]\n    }\n\nreturn msg;\n\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 762,
        "y": 1517.0000457763672,
        "wires": [
            [
                "4e584bdc45d73b85",
                "aa9f92ff9bb5ea8a"
            ]
        ]
    },
    {
        "id": "4e584bdc45d73b85",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EmeaProd REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1012,
        "y": 1517.0000457763672,
        "wires": [
            [
                "721dca6cc7d4d689"
            ]
        ]
    },
    {
        "id": "aa9f92ff9bb5ea8a",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "d": true,
        "name": "Prod REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 992,
        "y": 1557.0000457763672,
        "wires": [
            [
                "721dca6cc7d4d689"
            ]
        ]
    },
    {
        "id": "721dca6cc7d4d689",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1232,
        "y": 1517.0000457763672,
        "wires": []
    },
    {
        "id": "167a1e41633dac85",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1640,
        "wires": [
            [
                "79e047ff783a3f13"
            ]
        ]
    },
    {
        "id": "99853d4b69ba0c8a",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "21600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 1640,
        "wires": [
            [
                "167a1e41633dac85"
            ]
        ]
    },
    {
        "id": "79e047ff783a3f13",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "MFR Facility Monitoring",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":\"136976728\" },\n                \"converged_measurements\":{\n                    \"Temperature\": { \"value\": genRand(38,45,2), \"unit\": \"°C\" },\n                    \"Pressure\": { \"value\": genRand(80,90,2), \"unit\": \"psi\" },\n                    \"Humidity\": { \"value\": genRand(40,70,2), \"unit\": \"%\" },\n                    \"Vibration\": { \"value\": genRand(0,20,0), \"unit\": \"mm/s\" },\n                    \"LightIntensity\": { \"value\": genRand(0,200,0), \"unit\": \"Lux\" },\n                    \"NoiseLevel\": { \"value\": genRand(0,100,0), \"unit\": \"dB\" },\n                    \"Acceleration X\": { \"value\": genRand(0,1000,0), \"unit\": \"G\" },\n                    \"Acceleration Y\": { \"value\": genRand(0,1000,0), \"unit\": \"G\" },\n                    \"Acceleration Z\": { \"value\": genRand(0,1000,0), \"unit\": \"G\" }\n                }\n            }\n        ]\n    }\n\n\n\n\n// Post2C8Y.push(\"200,Temperature,Temperature,\"+ genRand(10,30,2) +\",°C\");\n// Post2C8Y.push(\"200,Humidity,Humidity,\"+ genRand(40,70,2) +\",%\");\n// Post2C8Y.push(\"200,Pressure,Pressure,\"+ genRand(40,60,2) +\",psi\");\n\n// Post2C8Y.push(\"200,CO,CO,\"+ genRand(0,5,2) +\",ppm\");\n// Post2C8Y.push(\"200,CO2,CO2,\"+ genRand(80,200,2) +\",ppm\");\n// Post2C8Y.push(\"200,Fire,Fire,0,State\");\n// Post2C8Y.push(\"200,Smoke,Smoke,0,State\");\n// Post2C8Y.push(\"200,AirQualityIndex,AirQualityIndex,1,State\");\n// Post2C8Y.push(\"200,PM1,PM1,\"+ genRand(0,50,2) +\",ppm\");\n// Post2C8Y.push(\"200,PM2.5,PM2.5,\"+ genRand(0,50,2) +\",ppm\");\n// Post2C8Y.push(\"200,PM10,PM10,\"+ genRand(0,50,2) +\",ppm\");\n\n// var d =new Date();\n// var p = ((d.getHours()*60)+ d.getMinutes())/60;\n// Post2C8Y.push(\"200,ImportActiveEnergy,ImportActiveEnergy,\"+ (p *2) +\",kWh\");\n// Post2C8Y.push(\"200,PowerFactor,PowerFactor,\"+ genRand(0,2,2) +\",PF\");\n// Post2C8Y.push(\"200,ActivePower,ActivePower,\"+ genRand(0,80,2) +\",W\");\n// Post2C8Y.push(\"200,Current,Current,\"+ genRand(0,10,1200) +\",A\");\n// Post2C8Y.push(\"200,Voltage,Voltage,\"+ genRand(235,240,2) +\",V\");\n\n// Post2C8Y.push(\"200,WaterFlow,WaterFlow,\"+ genRand(1,5,2) +\",g/s\");\n// Post2C8Y.push(\"200,WaterPressure,WaterPressure,\"+ genRand(10,50,2) +\",psi\");\n// Post2C8Y.push(\"200,WaterConsumption,WaterConsumption,\"+ (p*1.5) +\",g\");\n// Post2C8Y.push(\"200,WaterTemperature,WaterTemperature,\"+ genRand(10,20,2) +\",°C\");\n\n// Post2C8Y.push(\"402,6.734683424585338,80.13425135685354,1\")\n\n\nreturn msg;\n\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1640,
        "wires": [
            [
                "0fe5f3915fa824c6",
                "83c268a35fc21851"
            ]
        ]
    },
    {
        "id": "0fe5f3915fa824c6",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EmeaProd REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 1640,
        "wires": [
            [
                "aba4cdd720556221"
            ]
        ]
    },
    {
        "id": "83c268a35fc21851",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "d": true,
        "name": "Prod REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 990,
        "y": 1680,
        "wires": [
            [
                "aba4cdd720556221"
            ]
        ]
    },
    {
        "id": "aba4cdd720556221",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 1640,
        "wires": []
    },
    {
        "id": "b6f24fcd5623ca44",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "HVAC",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            genDeviceData(\"90133641\")\n            // ,genDeviceData(\"\")\n        ]\n    }\n\nreturn msg;\n\nfunction genDeviceData(DeviceID){\n    var b = {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":DeviceID },\n                \"converged_measurements\":{\n                    \"AmbientTemperature\": { \"value\": genRand(10,40,2), \"unit\": \"°C\" },  //\n                    \"Temperature\": { \"value\": genRand(18,23,2), \"unit\": \"°C\" },   //\n                    \"Humidity\": { \"value\": genRand(40,70,2), \"unit\": \"%\" }, //\n                    \"FilterAge\": { \"value\": 365-daysIntoYear(new Date()), \"unit\": \"Days\" }, //\n                    \"FlowRate\": { \"value\": genRand(400,500,2), \"unit\": \"CFM\" }, //\n                    \"NoiseLevel\": { \"value\": genRand(0,100,2), \"unit\": \"dB\" }, //\n                    \"Pressure\": { \"value\": genRand(0,2,2), \"unit\": \"bars\" }\n                }\n            }\n    return b;\n}\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}\n\n\n\n\n\nfunction daysIntoYear(date){\n    return (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - Date.UTC(date.getFullYear(), 0, 0)) / 24 / 60 / 60 / 1000;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1760,
        "wires": [
            [
                "fa4c9bb37d7eb9e3"
            ]
        ]
    },
    {
        "id": "bcbf5fac3f3b5ecd",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1760,
        "wires": [
            [
                "b6f24fcd5623ca44"
            ]
        ]
    },
    {
        "id": "fa4c9bb37d7eb9e3",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EmeaProd REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 1760,
        "wires": [
            [
                "f21c6816d8d6e5f9"
            ]
        ]
    },
    {
        "id": "549921829059fcac",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "21600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 1760,
        "wires": [
            [
                "bcbf5fac3f3b5ecd"
            ]
        ]
    },
    {
        "id": "f21c6816d8d6e5f9",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 1760,
        "wires": []
    },
    {
        "id": "22ca9a7e6f1cfd60",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "ConnectedCabinet",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            genDeviceData(\"16308811\")\n            // ,genDeviceData(\"\")\n        ]\n    }\n\nreturn msg;\n\nfunction genDeviceData(DeviceID){\n    var b = {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":DeviceID },\n                \"converged_measurements\":{\n                    \"Ambient Temperature\": { \"value\": genRand(4,8,2), \"unit\": \"°C\" },  //\n                    \"Device Temperature\": { \"value\": genRand(8,10,2), \"unit\": \"°C\" },   //\n                    \"Temperature\": { \"value\": genRand(4,12,2), \"unit\": \"°C\" },   //\n                    \"Humidity\": { \"value\": genRand(40,70,2), \"unit\": \"%\" }, //\n                    \"Acceleration\": { \"value\": 0, \"unit\": \"m/h\" }, //\n                    \"Acceleration X\": { \"value\": genRand(-100,100,2), \"unit\": \"G\" }, //\n                    \"Acceleration Y\": { \"value\": genRand(-100,100,2), \"unit\": \"G\" }, //\n                    \"Acceleration Z\": { \"value\": genRand(-100,100,2), \"unit\": \"G\" }, //\n                    \"LightIntensity\": { \"value\": genRand(0,300,0), \"unit\": \"Lux\" }, //\n                    \"Pressure\": { \"value\": genRand(10,18,0), \"unit\": \"psi\" }, //\n                    \"light\": { \"value\": genRand(0,300,0), \"unit\": \"Lux\" }, //\n                    \"Door\": { \"value\": 0, \"unit\": \"State\" }, //\n                    \"Direction\": { \"value\": 0, \"unit\": \"State\" }, //\n                    \"Speed\": { \"value\": 0, \"unit\": \"km/h\" }, //\n                    \"BatteryVoltage\": { \"value\": 3702, \"unit\": \"millivolt\" } //\n                }\n            }\n    return b;\n}\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}\n\n\n\n\n\nfunction daysIntoYear(date){\n    return (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - Date.UTC(date.getFullYear(), 0, 0)) / 24 / 60 / 60 / 1000;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1860,
        "wires": [
            [
                "f50a690fe0b7d5b2"
            ]
        ]
    },
    {
        "id": "1a4d38376e8796cd",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1860,
        "wires": [
            [
                "22ca9a7e6f1cfd60"
            ]
        ]
    },
    {
        "id": "f50a690fe0b7d5b2",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EmeaProd REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 1860,
        "wires": [
            [
                "f41ae62b8453bdf3"
            ]
        ]
    },
    {
        "id": "193a9a25015e641c",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 1860,
        "wires": [
            [
                "1a4d38376e8796cd"
            ]
        ]
    },
    {
        "id": "f41ae62b8453bdf3",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 1860,
        "wires": []
    },
    {
        "id": "4329e74062821953",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "Assisted Living",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":\"83982\" },\n                \"converged_measurements\":{\n                    \"Temperature\": { \"value\": genRand(36,38,2), \"unit\": \"°C\" },\n                    \"Battery\": { \"value\": genRand(78,85,2), \"unit\": \"%\" },\n                    \"WearingStatus\": { \"value\": 1, \"unit\": \"State\" },\n                    \"HeartRate\": { \"value\": genRand(60,160,2), \"unit\": \"%\" },\n                    \"SpO2\": { \"value\": genRand(94,98,0), \"unit\": \"ppm\" },\n                    \"Occupancy\": { \"value\": 1, \"unit\": \"Status\" },\n                    \"ClimateTemperature\": { \"value\": genRand(18,24,2), \"unit\": \"°C\" },\n                    \"ClimateHumidity\": { \"value\": genRand(40,70,2), \"unit\": \"%\" },\n                    \"Window\": { \"value\": 0, \"unit\": \"Status\" } \n                }\n            }\n        ]\n    }\n\nreturn msg;\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 720,
        "wires": [
            [
                "c74ead49be91b8c8"
            ]
        ]
    },
    {
        "id": "56ad5d29a0f2a98f",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 720,
        "wires": [
            [
                "4329e74062821953"
            ]
        ]
    },
    {
        "id": "c74ead49be91b8c8",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "New Prod REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1000,
        "y": 720,
        "wires": [
            [
                "13239f3ffdc96883"
            ]
        ]
    },
    {
        "id": "ecdea2a9bc262482",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 720,
        "wires": [
            [
                "56ad5d29a0f2a98f"
            ]
        ]
    },
    {
        "id": "13239f3ffdc96883",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 720,
        "wires": []
    },
    {
        "id": "6f74382c170a3694",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1940,
        "wires": [
            [
                "97f530d66d2faffa"
            ]
        ]
    },
    {
        "id": "1cad16f46d04b5a9",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "21600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 1940,
        "wires": [
            [
                "6f74382c170a3694"
            ]
        ]
    },
    {
        "id": "97f530d66d2faffa",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "Fleet Sol",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            genDeviceData(\"191982663\")\n            ,genDeviceData(\"191982675\")\n        ]\n    }\n\nreturn msg;\n\nfunction genDeviceData(DeviceID){\n    var b = {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":DeviceID },\n                \"converged_measurements\":{\n                    \"Ambient Temperature\": { \"value\": genRand(30,60,2), \"unit\": \"°C\" },  //\n                    \"Temperature\": { \"value\": genRand(30,50,2), \"unit\": \"°C\" },   //\n                    \"Humidity\": { \"value\": genRand(40,70,2), \"unit\": \"%\" }, //\n                    \"Light Intensity\": { \"value\": genRand(0,300,2), \"unit\": \"Lux\" },               \n                    \"Tamper\": { \"value\": 1, \"unit\": \"State\" },                \n                    \"Shock\": { \"value\": 0, \"unit\": \"State\" }                \n                }\n            }\n    return b;\n}\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}\n\n\n\n\n\nfunction daysIntoYear(date){\n    return (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - Date.UTC(date.getFullYear(), 0, 0)) / 24 / 60 / 60 / 1000;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1940,
        "wires": [
            [
                "c4ef75ab72ba28e1"
            ]
        ]
    },
    {
        "id": "c4ef75ab72ba28e1",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EmeaProd REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 1940,
        "wires": [
            [
                "373af3439f343137"
            ]
        ]
    },
    {
        "id": "373af3439f343137",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 1940,
        "wires": []
    },
    {
        "id": "89b6d435e473087b",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "Cargo Sol",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            genDeviceData(\"191982676\")\n            ,genDeviceData(\"191982672\")\n            ,genDeviceData(\"191982674\")\n            ,genDeviceData(\"191982673\")\n        ]\n    }\n\nreturn msg;\n\nfunction genDeviceData(DeviceID){\n    var b = {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":DeviceID },\n                \"converged_measurements\":{\n                    \"Temperature\": { \"value\": genRand(30,50,2), \"unit\": \"°C\" },   //\n                    \"Shock\": { \"value\": 0, \"unit\": \"State\" }, //\n                    \"Loaded\": { \"value\": 1, \"unit\": \"State\" }, //\n                    \"Locked\": { \"value\": 1, \"unit\": \"State\" }, //\n                    \"Tamper\": { \"value\": 0, \"unit\": \"State\" },\n                    \"TowDetection\": { \"value\": 0, \"unit\": \"State\" }\n                }\n            }\n    return b;\n}\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}\n\n\n\n\n\nfunction daysIntoYear(date){\n    return (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - Date.UTC(date.getFullYear(), 0, 0)) / 24 / 60 / 60 / 1000;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 2000,
        "wires": [
            [
                "fd51b431c8c7c30b"
            ]
        ]
    },
    {
        "id": "459e1cd74af18937",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2000,
        "wires": [
            [
                "89b6d435e473087b"
            ]
        ]
    },
    {
        "id": "fd51b431c8c7c30b",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EmeaProd REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 2000,
        "wires": [
            [
                "7ffacca7531b17d2"
            ]
        ]
    },
    {
        "id": "1a72908a1692d30c",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "21600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 2000,
        "wires": [
            [
                "459e1cd74af18937"
            ]
        ]
    },
    {
        "id": "7ffacca7531b17d2",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 2000,
        "wires": []
    },
    {
        "id": "5f961ce3e8800ec2",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "Footfall",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            genDeviceData(\"119017797\")\n        ]\n    }\n\nreturn msg;\n\nfunction genDeviceData(DeviceID){\n    var DT_A = genRand(0,15,0)\n    var DT_B = genRand(0,15,0)\n    var DT_C = genRand(0,15,0)\n    var DT = Math.round(DT_A+DT_B+DT_C)\n    \n    var FF_A = Math.round(minutesFromMidnight()+genRand(0,60,0))\n    var FF_B = Math.round(minutesFromMidnight()+genRand(0,60,0))\n    var FF_C = Math.round(minutesFromMidnight()+genRand(0,60,0))\n    var FF = Math.round(FF_A+FF_B+FF_C)\n    \n    WS=Math.round(genRand(10,60,0))\n    RC=Math.round(genRand(10,60,0))\n\n    \n    var b = {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":DeviceID },\n                \"converged_measurements\":{\n                    \"AvgDwellTime\": { \"value\": DT, \"unit\": \".\" },  //\n                    \"AvgDwellTime_DepartmentA\": { \"value\": DT_A, \"unit\": \".\" },  //\n                    \"AvgDwellTime_DepartmentB\": { \"value\": DT_B, \"unit\": \".\" },  //\n                    \"AvgDwellTime_DepartmentC\": { \"value\": DT_C, \"unit\": \".\" },  //\n                    \"TotalFootfall\": { \"value\": FF, \"unit\": \".\" },  //\n                    \"Footfall_DepartmentA\": { \"value\": FF_A, \"unit\": \".\" },  //\n                    \"Footfall_DepartmentB\": { \"value\": FF_B, \"unit\": \".\" },  //\n                    \"Footfall_DepartmentC\": { \"value\": FF_C, \"unit\": \".\" },  //\n                    \"WalkbyTotal\": { \"value\": Math.round(minutesFromMidnight()+genRand(0,60,0)), \"unit\": \".\" },  //\n                    \"CurrentOccupants\": { \"value\": WS+RC, \"unit\": \".\" },  //\n                    \"WindowShoppers\": { \"value\": WS, \"unit\": \".\" },  //\n                    \"ReturningCustomers\": { \"value\": RC, \"unit\": \".\" },  //\n                    \"TodaysBuyers\": { \"value\": Math.round(minutesFromMidnight()+genRand(0,60,0)), \"unit\": \".\" }\n\n                }\n            }\n    return b;\n}\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}\n\n\nfunction minutesFromMidnight(){\n    var now = new Date()\n    var then = new Date(\n            now.getFullYear(),\n            now.getMonth(),\n            now.getDate(),\n            0,0,0),\n        diff = now.getTime() - then.getTime(); // difference in milliseconds\n    return diff/1000/60; \n}\n\nfunction daysIntoYear(date){\n    return (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - Date.UTC(date.getFullYear(), 0, 0)) / 24 / 60 / 60 / 1000;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 2080,
        "wires": [
            [
                "cf0d64e2246377a3"
            ]
        ]
    },
    {
        "id": "b1ff3950863a9688",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2080,
        "wires": [
            [
                "5f961ce3e8800ec2"
            ]
        ]
    },
    {
        "id": "cf0d64e2246377a3",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EmeaProd REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 2080,
        "wires": [
            [
                "a37123347c46d59c"
            ]
        ]
    },
    {
        "id": "c75ef328c62ba6c8",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 2080,
        "wires": [
            [
                "b1ff3950863a9688"
            ]
        ]
    },
    {
        "id": "a37123347c46d59c",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 2080,
        "wires": []
    },
    {
        "id": "200c078c98c1e241",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "VITRONIC Speed CAM",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            genDeviceData(\"190940061\")\n            ,genDeviceData(\"190942277\")\n        ]\n    }\n\nreturn msg;\n\nfunction genDeviceData(DeviceID){\n    var b = {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":DeviceID },\n                \"converged_measurements\":{\n                    \"Temperature\": { \"value\": genRand(30,50,2), \"unit\": \"°C\" },  //\n                    \"Speed\": { \"value\": genRand(0,100,0), \"unit\": \"km/h\" },   //\n                    \"Battery\": { \"value\": genRand(80,82,2), \"unit\": \"%\" }, //\n                    \"Acceleration X\": { \"value\": genRand(-100,100,2), \"unit\": \"G\" }, //\n                    \"Acceleration Y\": { \"value\": genRand(-100,100,2), \"unit\": \"G\" }, //\n                    \"Acceleration Z\": { \"value\": genRand(-100,100,2), \"unit\": \"G\" }, //\n                    \"GSMSignal\": { \"value\": genRand(0,5,0), \"unit\": \"Bars\" }\n                }\n            }\n    return b;\n}\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}\n\n\n\n\n\nfunction daysIntoYear(date){\n    return (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - Date.UTC(date.getFullYear(), 0, 0)) / 24 / 60 / 60 / 1000;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 2180,
        "wires": [
            [
                "a1e091241247f335"
            ]
        ]
    },
    {
        "id": "c745324862e1d239",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2180,
        "wires": [
            [
                "200c078c98c1e241"
            ]
        ]
    },
    {
        "id": "a1e091241247f335",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EmeaProd REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 2180,
        "wires": [
            [
                "1106b1b0cb2568e2"
            ]
        ]
    },
    {
        "id": "f044c35a44f873f8",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "21600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 2180,
        "wires": [
            [
                "c745324862e1d239"
            ]
        ]
    },
    {
        "id": "1106b1b0cb2568e2",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 2180,
        "wires": []
    },
    {
        "id": "d9ccd0a6a4ee94b2",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "Smart City",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            genDeviceData(\"117987784\")\n        ]\n    }\n\nreturn msg;\n\nfunction genDeviceData(DeviceID){\n    var b = {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":DeviceID },\n                \"converged_measurements\":{\n                    \"C\": { \"value\": genRand(30,40,2), \"unit\": \"°C\" },  //\n                    \"Temperature\": { \"value\": genRand(30,50,2), \"unit\": \"°C\" },  //\n                    \"GatewayTemperature\": { \"value\": genRand(10,60,2), \"unit\": \"°C\" },  //\n                    \"Light Intensity\": { \"value\": genRand(1000,3000,2), \"unit\": \"lux\" },  //\n                    \"Occupancy\": { \"value\": 0, \"unit\": \"State\" },  //\n                    \"CO\": { \"value\": genRand(400,800,0), \"unit\": \"µg/m3\" },\n                    \"CO2\": { \"value\": genRand(400,800,0), \"unit\": \"µg/m3\" },\n                    \"AirQualityIndex\": { \"value\": genRand(0,100,0), \"unit\": \"AQI\" } ,\n                    \"Smoke\": { \"value\": 0, \"unit\": \"State\" } ,\n                    \"Fire\": { \"value\": 0, \"unit\": \"State\" } ,\n                }\n            }\n    return b;\n}\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}\n\n\n\n\n\nfunction daysIntoYear(date){\n    return (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - Date.UTC(date.getFullYear(), 0, 0)) / 24 / 60 / 60 / 1000;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 2280,
        "wires": [
            [
                "28b101caccc3057b"
            ]
        ]
    },
    {
        "id": "bcd9206fa1a903a0",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2280,
        "wires": [
            [
                "d9ccd0a6a4ee94b2"
            ]
        ]
    },
    {
        "id": "28b101caccc3057b",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "d": true,
        "name": "EmeaProd REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 2280,
        "wires": [
            [
                "e8d05bcfa859c5b5"
            ]
        ]
    },
    {
        "id": "649845842bd104c6",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 2280,
        "wires": [
            [
                "bcd9206fa1a903a0"
            ]
        ]
    },
    {
        "id": "e8d05bcfa859c5b5",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 2280,
        "wires": []
    },
    {
        "id": "06c93e58be60dbbc",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "Gen2Energy",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            genDeviceData(\"191728814\"),\n            genDeviceData(\"191728816\"),\n            genDeviceData(\"191728821\")\n        ]\n    }\n\nreturn msg;\n\nfunction genDeviceData(DeviceID){\n    var b = {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":DeviceID },\n                \"converged_measurements\":{\n                    \"Temperature\": { \"value\": genRand(30,50,2), \"unit\": \"°C\" },  //\n                    \"Pressure\": { \"value\": genRand(0,300,2), \"unit\": \"psi\" },  //\n                    \"Speed\": { \"value\": genRand(0,120,2), \"unit\": \"km/h\" },  //\n                    \"Impact\": { \"value\": genRand(0,5,2), \"unit\": \"G\" },  //\n                    \"BatteryLeft\": { \"value\": genRand(84,85,0), \"unit\": \"%\" },  //\n                    \"BatteryVoltage\": { \"value\": genRand(0,12,2), \"unit\": \"V\" }\n                }\n            }\n    return b;\n}\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}\n\n\n\n\n\nfunction daysIntoYear(date){\n    return (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - Date.UTC(date.getFullYear(), 0, 0)) / 24 / 60 / 60 / 1000;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 2360,
        "wires": [
            [
                "658bc48507f9faf2"
            ]
        ]
    },
    {
        "id": "92f286135d423852",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2360,
        "wires": [
            [
                "06c93e58be60dbbc"
            ]
        ]
    },
    {
        "id": "658bc48507f9faf2",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EmeaProd REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 2360,
        "wires": [
            [
                "37f2fb132df4089c"
            ]
        ]
    },
    {
        "id": "a69a361cdec9cc46",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 2360,
        "wires": [
            [
                "92f286135d423852"
            ]
        ]
    },
    {
        "id": "37f2fb132df4089c",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 2360,
        "wires": []
    },
    {
        "id": "f2e6bff188987a45",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "Smart Building Operations",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            genDeviceData(\"117987784\")\n        ]\n    }\n\nreturn msg;\n\nfunction genDeviceData(DeviceID){\n    var b = {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":DeviceID },\n                \"converged_measurements\":{\n                    \"Temperature\": { \"value\": genRand(16,28,2), \"unit\": \"°C\" },\n                    \"Humidity\": { \"value\": genRand(40,70,2), \"unit\": \"%\" },\n                    \"Pressure\": { \"value\": genRand(0,2,2), \"unit\": \"bar\" },\n                    \"LightIntensity\": { \"value\": genRand(0,200,0), \"unit\": \"Lux\" },\n                    \"CO2\": { \"value\": genRand(400,1200,0), \"unit\": \"µg/m3\" },\n                    \"CO\": { \"value\": genRand(0,2,2), \"unit\": \"µg/m3/10\" },\n                    \"Smoke\": { \"value\": 0, \"unit\": \"µg/m3\" },\n                    \"Fire\": { \"value\": 0, \"unit\": \"µg/m3\" },\n                    \"CurrentOccupants\": { \"value\": genRand(10,20,0), \"unit\": \"count\" },\n                    \"TotalFootfall\": { \"value\": Math.round(minutesFromMidnight()/20), \"unit\": \"count\" },\n                    \"AQI_Range\": { \"value\": genRand(0,200,0), \"unit\": \"AQI\" }\n               }\n            }\n    return b;\n}\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}\n\n\nfunction minutesFromMidnight(){\n    var now = new Date()\n    var then = new Date(\n            now.getFullYear(),\n            now.getMonth(),\n            now.getDate(),\n            0,0,0),\n        diff = now.getTime() - then.getTime(); // difference in milliseconds\n    return diff/1000/60; \n}\n\nfunction daysIntoYear(date){\n    return (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - Date.UTC(date.getFullYear(), 0, 0)) / 24 / 60 / 60 / 1000;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 2460,
        "wires": [
            [
                "85d184e4d9a719b1"
            ]
        ]
    },
    {
        "id": "b25025a88eb65848",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2460,
        "wires": [
            [
                "f2e6bff188987a45"
            ]
        ]
    },
    {
        "id": "85d184e4d9a719b1",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EmeaProd REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 2460,
        "wires": [
            [
                "30491375b6b6950d"
            ]
        ]
    },
    {
        "id": "438590cd696c0add",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "21600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 2460,
        "wires": [
            [
                "b25025a88eb65848"
            ]
        ]
    },
    {
        "id": "30491375b6b6950d",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 2460,
        "wires": []
    },
    {
        "id": "6824f03ed5342124",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2540,
        "wires": [
            [
                "abfdc7b6b7e58665"
            ]
        ]
    },
    {
        "id": "4013056e200d9734",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "21600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 2540,
        "wires": [
            [
                "6824f03ed5342124"
            ]
        ]
    },
    {
        "id": "abfdc7b6b7e58665",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "IPSL Lexmark",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            genDeviceData(\"191931187\"),\n            genDeviceData(\"191916017\"),\n            genDeviceData(\"191955369\")\n        ]\n    }\n\nreturn msg;\n\nfunction genDeviceData(DeviceID){\n    var b = {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":DeviceID },\n                \"converged_measurements\":{\n                    \"Temperature\": { \"value\": genRand(16,28,2), \"unit\": \"°C\" },\n                    \"InUse\": { \"value\": genRand(0,1,0), \"unit\": \"State\" },\n                    \"ColorTonerLevel\": { \"value\": genRand(0,100,0), \"unit\": \"%\" },\n                    \"CyanTonerLevel\": { \"value\": genRand(0,100,0), \"unit\": \"%\" },\n                    \"MagentaTonerLevel\": { \"value\": genRand(0,100,0), \"unit\": \"%\" },\n                    \"YellowTonerLevel\": { \"value\": genRand(0,100,0), \"unit\": \"%\" },\n                    \"BlackTonerLevel\": { \"value\": genRand(0,100,0), \"unit\": \"%\" },\n                    \"LastJobPages\": { \"value\": genRand(0,20,0), \"unit\": \"Pages\" },\n                    \"LastJobPageSize\": { \"value\": genRand(0,5,0), \"unit\": \"Size\" },\n                    \"LastJobEnergy\": { \"value\": genRand(0,5,0), \"unit\": \"W\" },\n                    \"PagesToday\": { \"value\": Math.round(minutesFromMidnight()), \"unit\": \"Pages\" },\n                    \"EnergyToday\": { \"value\": Math.round(minutesFromMidnight()/2.5), \"unit\": \"kWh\" },\n                    \"EnergySavingMode\": { \"value\": genRand(0,3,0), \"unit\": \"Mode\" },\n                    \"PrinterState\": { \"value\": genRand(1,3,0), \"unit\": \"State\" },\n                    \"PaperTrayState_Main\": { \"value\": 1, \"unit\": \"State\" },\n                    \"PaperTrayState_1\": { \"value\": 0, \"unit\": \"State\" },\n                    \"PaperTrayState_2\": { \"value\": 1, \"unit\": \"State\" }\n               }\n            }\n    return b;\n}\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}\n\n\nfunction minutesFromMidnight(){\n    var now = new Date()\n    var then = new Date(\n            now.getFullYear(),\n            now.getMonth(),\n            now.getDate(),\n            0,0,0),\n        diff = now.getTime() - then.getTime(); // difference in milliseconds\n    return diff/1000/60; \n}\n\nfunction daysIntoYear(date){\n    return (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - Date.UTC(date.getFullYear(), 0, 0)) / 24 / 60 / 60 / 1000;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 2540,
        "wires": [
            [
                "b1e5ffb0b716b23a"
            ]
        ]
    },
    {
        "id": "b1e5ffb0b716b23a",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EmeaProd REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 2540,
        "wires": [
            [
                "f48e3b222dcda9ef"
            ]
        ]
    },
    {
        "id": "f48e3b222dcda9ef",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 2540,
        "wires": []
    },
    {
        "id": "501bb6ab32d9068a",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "d": true,
        "name": "Special Cargo Tracking",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            genDeviceData(\"185700317\")\n            ,genDeviceData(\"185700331\")\n            ,genDeviceData(\"192391049\")\n        ]\n    }\n\nreturn msg;\n\nfunction genDeviceData(DeviceID){\n    var b = {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":DeviceID },\n                \"converged_measurements\":{\n                    \"Temperature\": { \"value\": genRand(20,30,2), \"unit\": \"°C\" },   //\n                    \"BatteryVoltage\": { \"value\": genRand(3.5,4,2), \"unit\": \"V\" },   //\n                    \"BatteryLeft\": { \"value\": genRand(80,82,0), \"unit\": \"%\" },   //\n                    \"Speed\": { \"value\": genRand(0,50,2), \"unit\": \"km/h\" }, //\n                    \"RSRQ\": { \"value\": genRand(-200,1,0), \"unit\": \"RSRQ\" },               \n                    \"RSRP\": { \"value\": genRand(-50,1,0), \"unit\": \"RSRP\" },               \n                    \"OnMove\": { \"value\": 17, \"unit\": \"State\" }                \n                }\n            }\n    return b;\n}\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}\n\n\n\n\n\nfunction daysIntoYear(date){\n    return (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - Date.UTC(date.getFullYear(), 0, 0)) / 24 / 60 / 60 / 1000;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 2620,
        "wires": [
            [
                "32a048074313ca89"
            ]
        ]
    },
    {
        "id": "d93d4ae2eaef66e5",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "d": true,
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2620,
        "wires": [
            [
                "501bb6ab32d9068a"
            ]
        ]
    },
    {
        "id": "32a048074313ca89",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "d": true,
        "name": "EmeaProd REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 2620,
        "wires": [
            [
                "2265c3c796339828"
            ]
        ]
    },
    {
        "id": "a62fcda9a2c4516a",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "21600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 2620,
        "wires": [
            [
                "d93d4ae2eaef66e5"
            ]
        ]
    },
    {
        "id": "2265c3c796339828",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "d": true,
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 2620,
        "wires": []
    },
    {
        "id": "305e4e0f9ac5e82f",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "Smart Water Meter",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            genDeviceData(\"137036549\")\n            ,genDeviceData(\"193130843\")\n        ]\n    }\n\nreturn msg;\n\nfunction genDeviceData(DeviceID){\n    var b = {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":DeviceID },\n                \"converged_measurements\":{\n                    \"Temperature\": { \"value\": genRand(20,30,2), \"unit\": \"°C\" },   //\n                    \"BatteryVoltage\": { \"value\": genRand(3.5,4,2), \"unit\": \"V\" },   //\n                    \"BatteryLeft\": { \"value\": genRand(80,82,0), \"unit\": \"%\" },   //\n                    \"Vibration\": { \"value\": genRand(0,4,2), \"unit\": \"mm/s\" }, //\n                    \"Pressure\": { \"value\": genRand(0,3,0), \"unit\": \"psi\" },               \n                    \"FlowRate\": { \"value\": genRand(0,5,0), \"unit\": \"g/m\" }, \n                    \"ValveStatus\": { \"value\": 1, \"unit\": \"state\" }\n                }\n            }\n    return b;\n}\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}\n\n\n\n\n\nfunction daysIntoYear(date){\n    return (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - Date.UTC(date.getFullYear(), 0, 0)) / 24 / 60 / 60 / 1000;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2700,
        "wires": [
            [
                "71e52a3a1ad5dc54"
            ]
        ]
    },
    {
        "id": "f821ad0be4733d7b",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2700,
        "wires": [
            [
                "305e4e0f9ac5e82f"
            ]
        ]
    },
    {
        "id": "71e52a3a1ad5dc54",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EmeaProd REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 2700,
        "wires": [
            [
                "be9f153c486423ab"
            ]
        ]
    },
    {
        "id": "03ece8cc892bcfee",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 2700,
        "wires": [
            [
                "f821ad0be4733d7b"
            ]
        ]
    },
    {
        "id": "be9f153c486423ab",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 2700,
        "wires": []
    },
    {
        "id": "9edc25313a651346",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "Solar Farm Monitoring",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            genDeviceData(\"193207111\"),\n            genDeviceData(\"193207140\")\n        ]\n    }\n\nreturn msg;\n\nfunction genDeviceData(DeviceID){\n    var b = {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":DeviceID },\n                \"converged_measurements\":{\n                    \"PanelTemperature\": { \"value\": genRand(30,40,2), \"unit\": \"°C\" },   //\n                    \"AmbientTemperature\": { \"value\": genRand(20,30,2), \"unit\": \"°C\" },   //\n                    \"PowerOutput\": { \"value\": genRand(100,200,2), \"unit\": \"W\" },   //\n                    \"DCVoltage\": { \"value\": genRand(20,50,2), \"unit\": \"V\" },   //\n                    \"DCCurrent\": { \"value\": genRand(2,5,2), \"unit\": \"A\" },   //\n                    \"TiltAngle\": { \"value\": genRand(-90,90,2), \"unit\": \"°\" },   //\n                    \"AzimuthAngle\": { \"value\": genRand(0,360,2), \"unit\": \"°\" },\n                    \"Insolation\": { \"value\": genRand(0,1,2), \"unit\": \"kWh/m^2\" },\n                }\n            }\n    return b;\n}\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}\n\n\n\n\n\nfunction daysIntoYear(date){\n    return (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - Date.UTC(date.getFullYear(), 0, 0)) / 24 / 60 / 60 / 1000;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 2780,
        "wires": [
            [
                "9ba65d31c3a523c3"
            ]
        ]
    },
    {
        "id": "56a28b7c9152c956",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2780,
        "wires": [
            [
                "9edc25313a651346"
            ]
        ]
    },
    {
        "id": "9ba65d31c3a523c3",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EmeaProd REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 2780,
        "wires": [
            [
                "40492aeef91fe416"
            ]
        ]
    },
    {
        "id": "0fcf90194c3f82aa",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 2780,
        "wires": [
            [
                "56a28b7c9152c956"
            ]
        ]
    },
    {
        "id": "40492aeef91fe416",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 2780,
        "wires": []
    },
    {
        "id": "579be1fc73a6e5c1",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "Dev REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1673896354.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1030,
        "y": 540,
        "wires": [
            [
                "bfb17af272b25d6e"
            ]
        ]
    },
    {
        "id": "bfb17af272b25d6e",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 560,
        "wires": []
    },
    {
        "id": "c1dda677204996e6",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDE2NzM4OTYzNTQvc2Fyd2FuLnNoYWhAaW52aXhpYmxlLmNvbTpJb3QxMTIzIyM=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 540,
        "wires": [
            [
                "240d3d1a3abf820b"
            ]
        ]
    },
    {
        "id": "240d3d1a3abf820b",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "AirQuality Montoring",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            genDeviceData(\"11517\")\n            ,genDeviceData(\"13710\")\n            ,genDeviceData(\"11516\")\n            ,genDeviceData(\"14669\")\n            ,genDeviceData(\"14668\")\n        ]\n    }\n\nreturn msg;\n\nfunction genDeviceData(DeviceID){\n    var b = {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":DeviceID },\n                \"converged_measurements\":{\n                    \"Temperature\": { \"value\": genRand(16,28,2), \"unit\": \"°C\" },\n                    \"Humidity\": { \"value\": genRand(40,70,2), \"unit\": \"%\" },\n                    \"VOC\": { \"value\": genRand(100,600,0), \"unit\": \"Index\" },\n                    \"PM1\": { \"value\": genRand(5,15,0), \"unit\": \"µg/m3\" },\n                    \"PM4\": { \"value\": genRand(10,20,0), \"unit\": \"µg/m3\" } ,\n                    //\"PM2_5\": { \"value\": genRand(0,55,2), \"unit\": \"µg/m3\" } ,\n                    //\"PM10\": { \"value\": genRand(0,254,2), \"unit\": \"µg/m3\" } ,\n                    //\"CO2\": { \"value\": genRand(0,5000,0), \"unit\": \"µg/m3\" },\n                    \"PM2_5\": { \"value\": 0, \"unit\": \"µg/m3\" } ,\n                    \"PM10\": { \"value\": 0, \"unit\": \"µg/m3\" } ,\n                    \"CO2\": { \"value\": 0, \"unit\": \"µg/m3\" },\n                }\n            }\n    return b;\n}\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 540,
        "wires": [
            [
                "579be1fc73a6e5c1"
            ]
        ]
    },
    {
        "id": "cac9dbd923ebd076",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "Street Light",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            genDeviceData(\"100914473\"),\n            genDeviceData(\"100924014\"),\n            genDeviceData(\"100914977\"),\n            genDeviceData(\"100924052\"),\n            genDeviceData(\"100927312\"),\n            genDeviceData(\"100926839\"),\n            genDeviceData(\"100926850\")\n        ]\n    }\n\nreturn msg;\n\nfunction genDeviceData(DeviceID){\n    var b = {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":DeviceID },\n                \"converged_measurements\":{\n                    \"DeviceTemperature\": { \"value\": genRand(30,40,2), \"unit\": \"°C\" },   //\n                    \"ClimateTemperature\": { \"value\": genRand(20,30,2), \"unit\": \"°C\" },   //\n                    \"EnergyConsumption\": { \"value\": genRand(100,200,2), \"unit\": \"W\" },   //\n                    \"Voltage\": { \"value\": genRand(230,240,2), \"unit\": \"V\" },   //\n                    \"Current\": { \"value\": genRand(2,5,2), \"unit\": \"A\" },   //\n                    \"Humidity\": { \"value\": genRand(60,80,2), \"unit\": \"%\" },   //\n                    \"Malfunction\": { \"value\": 0, \"unit\": \"State\" },\n                    \"Light\": { \"value\": genRand(0,1,0), \"unit\": \"State\" },\n                    \"LightIntensity\": { \"value\": genRand(0,200,0), \"unit\": \"Lux\" },\n                    \"CurrentOccupants\": { \"value\": genRand(0,10,0), \"unit\": \"No.s\" }\n                }\n            }\n    return b;\n}\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}\n\n\n\n\n\nfunction daysIntoYear(date){\n    return (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - Date.UTC(date.getFullYear(), 0, 0)) / 24 / 60 / 60 / 1000;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 2860,
        "wires": [
            [
                "d1c0ac5fc0afdcef"
            ]
        ]
    },
    {
        "id": "63628fe77d10b091",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2860,
        "wires": [
            [
                "cac9dbd923ebd076"
            ]
        ]
    },
    {
        "id": "d1c0ac5fc0afdcef",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EmeaProd REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 2860,
        "wires": [
            [
                "12e8aaded0b151a0"
            ]
        ]
    },
    {
        "id": "7b5cbccaac11015f",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 2860,
        "wires": [
            [
                "63628fe77d10b091"
            ]
        ]
    },
    {
        "id": "12e8aaded0b151a0",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 2860,
        "wires": []
    },
    {
        "id": "34ca8836016ddf6e",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "Energy Monitoring",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n        genDeviceData('977676'),\n        genDeviceData('977677'),\n        genDeviceData('977675'),\n        genDeviceData('979274'),\n        genDeviceData('1222955'),\n        genDeviceData('1222139'),\n        genDeviceData('1221176'),\n        genDeviceData('1222946'), \n        ]\n    }\n\nreturn msg;\n\nfunction genDeviceData(DeviceID){\n    var b = {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":DeviceID },\n                \"converged_measurements\":{\n                    \"Temperature\": { \"value\": genRand(30,40,2), \"unit\": \"°C\" },\n                    \"Humidity\": { \"value\": genRand(60,80,2), \"unit\": \"%\" },\n                    \"EnergyConsumption\": { \"value\": genRand(100,200,2), \"unit\": \"kWh\" },\n                    \"ACVoltage\": { \"value\": genRand(230,240,2), \"unit\": \"V\" },\n                    \"TotalACCurrent\": { \"value\": genRand(5,20,2), \"unit\": \"A\" },\n                    \"ActivePower\": { \"value\": genRand(1000,5000,2), \"unit\": \"kW\" },\n                    \"ReactivePower\": { \"value\": genRand(200,1000,2), \"unit\": \"kVAr\" },\n                    \"ApparentPower\": { \"value\": genRand(1200,6000,2), \"unit\": \"kVA\" },\n                    \"PowerFactor\": { \"value\": genRand(0,100,0)/100, \"unit\": \"\" },\n                    \"ACFrequency\": { \"value\": genRand(55,60,0), \"unit\": \"Hz\" }\n                }\n            }\n    return b;\n}\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}\n\n\n\n\n\nfunction daysIntoYear(date){\n    return (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - Date.UTC(date.getFullYear(), 0, 0)) / 24 / 60 / 60 / 1000;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2920,
        "wires": [
            [
                "886fab63da14d077"
            ]
        ]
    },
    {
        "id": "45e5d60c8dd72449",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "900",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 2940,
        "wires": [
            [
                "004823ec6ee9f5b9",
                "48fdb97d0daa0daa",
                "23c35b0cf574af78"
            ]
        ]
    },
    {
        "id": "d924028b2c407bcb",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 2920,
        "wires": []
    },
    {
        "id": "886fab63da14d077",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "Dev REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1673896354.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 2920,
        "wires": [
            [
                "d924028b2c407bcb"
            ]
        ]
    },
    {
        "id": "004823ec6ee9f5b9",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDE2NzM4OTYzNTQvaHViQGludml4aWJsZS5jb206SU9UQGh1YjIwMjIjIw==';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2920,
        "wires": [
            [
                "34ca8836016ddf6e"
            ]
        ]
    },
    {
        "id": "e973a72d2b0c2b04",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "ChillerRoomMointoring",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            genDeviceData(\"117958103\")\n            // ,genDeviceData(\"\")\n        ]\n    }\n\nreturn msg;\n\nfunction genDeviceData(DeviceID){\n    var b = {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":DeviceID },\n                \"converged_measurements\":{\n                    \"Temperature\": { \"value\": genRand(4,8,2), \"unit\": \"°C\" },  //\n                    \"Humidity\": { \"value\": genRand(40,70,2), \"unit\": \"%\" }, //\n                    \"CO2\": { \"value\": genRand(500,1000,2), \"unit\": \"ug\" }, //\n                    \"LightIntensity\": { \"value\": genRand(0,300,0), \"unit\": \"Lux\" }, //\n                    \"Vibration\": { \"value\": genRand(0,10,2), \"unit\": \"mm/s\" }, //\n                    \"Door\": { \"value\": 0, \"unit\": \"State\" }, //\n                    \"Movement\": { \"value\": 0, \"unit\": \"State\" }                }\n            }\n    return b;\n}\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}\n\n\n\n\n\nfunction daysIntoYear(date){\n    return (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - Date.UTC(date.getFullYear(), 0, 0)) / 24 / 60 / 60 / 1000;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 3120,
        "wires": [
            [
                "98754b0223520979"
            ]
        ]
    },
    {
        "id": "73b58202a2676295",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 3120,
        "wires": [
            [
                "e973a72d2b0c2b04"
            ]
        ]
    },
    {
        "id": "98754b0223520979",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EmeaProd REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 3120,
        "wires": [
            [
                "5f7c34755c36839e"
            ]
        ]
    },
    {
        "id": "e15d0b01d27ad50f",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 3120,
        "wires": [
            [
                "73b58202a2676295"
            ]
        ]
    },
    {
        "id": "5f7c34755c36839e",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 3120,
        "wires": []
    },
    {
        "id": "95303dfc6d824bca",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "InjectionMouldMonitoring",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n            genDeviceData(\"197914621\")\n            ,genDeviceData(\"197912241\")\n            ,genDeviceData(\"197913219\")\n            ,genDeviceData(\"197918662\")\n            ,genDeviceData(\"197915252\")\n        ]\n    }\n\nreturn msg;\n\nfunction genDeviceData(DeviceID){\n    var b = {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":DeviceID },\n                \"converged_measurements\":{\n                    \"Cycles\": { \"value\": genRand(100,150,0), \"unit\": \"/hr\" },  //\n                    \"CyclesToday\": { \"value\": Math.round((minutesFromMidnight()*2) + genRand(1,4,0)), \"unit\": \"Cycles\" },  //\n                    \"AvgCycleToday\": { \"value\": genRand(100,150,0), \"unit\": \"/hr\" },  //\n                    \"TotalCycles\": { \"value\": Math.round(2*daysIntoYear(new Date()) + ((minutesFromMidnight()*2)+genRand(1,4,0))), \"unit\": \"Cycles\" },  //\n                    \"IdleTimeToday\": { \"value\": Math.round((minutesFromMidnight()/40)+genRand(1,4,0)), \"unit\": \"Mins\" },  //\n                    \"CurrentStatus\": { \"value\": genRand(0,2,0), \"unit\": \"Status\" },  //\n                    \"Temperature\": { \"value\": genRand(40,50,2), \"unit\": \"°C\" },  //\n                    //\"MouldTemperature\": { \"value\": genRand(50,90,2), \"unit\": \"°C\" },  //\n                    //\"NozzleTemperature\": { \"value\": genRand(200,250,2), \"unit\": \"°C\" },  //\n                    //\"EnclosureTemperature\": { \"value\": genRand(50,60,2), \"unit\": \"°C\" },  //\n                    \"DeviceTemperature\": { \"value\": genRand(45,50,2), \"unit\": \"°C\" },  //\n                    //\"AmbientTemperature\": { \"value\": genRand(30,35,2), \"unit\": \"°C\" },  //\n                    \"ExternalVoltage\": { \"value\": genRand(3.4,3.7,2), \"unit\": \"VDC\" }, //\n                    \"Battery\": { \"value\": genRand(80,82,2), \"unit\": \"%\" }, //\n                    //\"PressMotorCurrent\": { \"value\": genRand(0,60,0), \"unit\": \"Lux\" }, //\n                    //\"PressMotorPosition\": { \"value\": genRand(0,100,0), \"unit\": \"%\" }, //\n                    //\"PressMotorDirection\": { \"value\": genRand(0,1,0), \"unit\": \"Dir\" }, //\n                    \"Vibration\": { \"value\": genRand(0,10,2), \"unit\": \"mm/s\" }, //\n                    \"AccelerometerX\": { \"value\": genRand(0,3,2), \"unit\": \"G\" },                \n                    \"AccelerometerY\": { \"value\": genRand(0,0.2,2), \"unit\": \"G\" },                \n                    \"AccelerometerZ\": { \"value\": genRand(0,0.2,2), \"unit\": \"G\" },                \n                    \"Shock\": { \"value\": genRand(0,1,0), \"unit\": \"State\" }                \n                }\n            }\n    return b;\n}\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}\n\n\nfunction minutesFromMidnight(){\n    var now = new Date()\n    var then = new Date(\n            now.getFullYear(),\n            now.getMonth(),\n            now.getDate(),\n            0,0,0),\n        diff = now.getTime() - then.getTime(); // difference in milliseconds\n    return diff/1000/60; \n}\n\n\nfunction daysIntoYear(date){\n    return (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - Date.UTC(date.getFullYear(), 0, 0)) / 24 / 60 / 60 / 1000;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 3200,
        "wires": [
            [
                "193f22926c325f53"
            ]
        ]
    },
    {
        "id": "42ba97a9ae6eb99f",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 3200,
        "wires": [
            [
                "95303dfc6d824bca"
            ]
        ]
    },
    {
        "id": "193f22926c325f53",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EmeaProd REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 3200,
        "wires": [
            [
                "833f0df06e8356aa"
            ]
        ]
    },
    {
        "id": "08d4507542e25810",
        "type": "inject",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 3200,
        "wires": [
            [
                "42ba97a9ae6eb99f"
            ]
        ]
    },
    {
        "id": "833f0df06e8356aa",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 3200,
        "wires": []
    },
    {
        "id": "76d44a51c7a0fde7",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "EmeaProd REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1010,
        "y": 2960,
        "wires": [
            [
                "14548513c1c0218d"
            ]
        ]
    },
    {
        "id": "14548513c1c0218d",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 2960,
        "wires": []
    },
    {
        "id": "daf8268c6a412c4f",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "Energy Monitoring E2E",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n        genDeviceData('48200380484'),\n        genDeviceData('46200379567'),\n        genDeviceData('35200378878'),\n        genDeviceData('87200380496'),\n        genDeviceData('81200378885'),\n        genDeviceData('62200377004'),\n        genDeviceData('81200378900')\n        ]\n    }\n\nreturn msg;\n\nfunction genDeviceData(DeviceID){\n    var b = {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":DeviceID },\n                \"converged_measurements\":{\n                    \"Voltage\": { \"value\": genRand(230,240,2), \"unit\": \"V\" },\n                    \"Current\": { \"value\": genRand(5,20,2), \"unit\": \"A\" },\n                    \"ActivePower\": { \"value\": genRand(10,50,2), \"unit\": \"kW\" },\n                    \"TotalActiveEnergy\": { \"value\": genRand(10,20,2), \"unit\": \"kWh\" },\n                    \"ImportActiveEnergy\": { \"value\": genRand(10,20,2), \"unit\": \"kWh\" },\n                    \"ImportReactiveEnergy\": { \"value\": genRand(10,20,2), \"unit\": \"kWh\" },\n                    \"ExportActiveEnergy\": { \"value\": genRand(10,20,2), \"unit\": \"kWh\" },\n                    \"ExportReactiveEnergy\": { \"value\": genRand(10,20,2), \"unit\": \"kWh\" },\n                    \"ReactivePower\": { \"value\": genRand(50,100,2), \"unit\": \"kVAr\" },\n                    \"ApparentPower\": { \"value\": genRand(10,20,2), \"unit\": \"kVA\" },\n                    \"PowerFactor\": { \"value\": genRand(0,100,0)/100, \"unit\": \"\" },\n                    \"Frequency\": { \"value\": genRand(55,60,0), \"unit\": \"Hz\" }\n                }\n            }\n    return b;\n}\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}\n\n\n\n\n\nfunction daysIntoYear(date){\n    return (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - Date.UTC(date.getFullYear(), 0, 0)) / 24 / 60 / 60 / 1000;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 2960,
        "wires": [
            [
                "76d44a51c7a0fde7"
            ]
        ]
    },
    {
        "id": "48fdb97d0daa0daa",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 2960,
        "wires": [
            [
                "daf8268c6a412c4f"
            ]
        ]
    },
    {
        "id": "23c35b0cf574af78",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic bGxhL25vZGVSZWRfRnVuYzphZHNmYXczMjNzYU9JSEdfMTJKSmwk';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 3000,
        "wires": [
            [
                "6d38fe203c6d4919"
            ]
        ]
    },
    {
        "id": "6d38fe203c6d4919",
        "type": "function",
        "z": "bc1bab9a1f9a2cfc",
        "name": "Energy Monitoring LLA",
        "func": "var DTS = new Date();\nmsg.payload={\n    \"measurements\": [\n        genDeviceData('9419479'),\n        genDeviceData('3774222'),\n        genDeviceData('8274224'),\n        genDeviceData('7374226'),\n        genDeviceData('1919483'),\n        genDeviceData('7174229'),\n        genDeviceData('6419485'),\n        genDeviceData('8473590'), \n        ]\n    }\nreturn msg;\n\nfunction genDeviceData(DeviceID){\n    var b = {\n                type:\"converged_measurements\",\n                time:DTS.toISOString(),\n                \"source\": {\"id\":DeviceID },\n                \"converged_measurements\":{\n                    \"Voltage\": { \"value\": genRand(230,240,2), \"unit\": \"V\" },\n                    \"Current\": { \"value\": genRand(5,20,2), \"unit\": \"A\" },\n                    \"ActivePower\": { \"value\": genRand(10,50,2), \"unit\": \"kW\" },\n                    \"TotalActiveEnergy\": { \"value\": genRand(10,20,2), \"unit\": \"kWh\" },\n                    \"ImportActiveEnergy\": { \"value\": genRand(10,20,2), \"unit\": \"kWh\" },\n                    \"ImportReactiveEnergy\": { \"value\": genRand(10,20,2), \"unit\": \"kWh\" },\n                    \"ExportActiveEnergy\": { \"value\": genRand(10,20,2), \"unit\": \"kWh\" },\n                    \"ExportReactiveEnergy\": { \"value\": genRand(10,20,2), \"unit\": \"kWh\" },\n                    \"ReactivePower\": { \"value\": genRand(50,100,2), \"unit\": \"kVAr\" },\n                    \"ApparentPower\": { \"value\": genRand(10,20,2), \"unit\": \"kVA\" },\n                    \"PowerFactor\": { \"value\": genRand(0,100,0)/100, \"unit\": \"\" },\n                    \"Frequency\": { \"value\": genRand(55,60,0), \"unit\": \"Hz\" }\n                }\n            }\n    return b;\n}\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}\n\n\n\n\n\nfunction daysIntoYear(date){\n    return (Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - Date.UTC(date.getFullYear(), 0, 0)) / 24 / 60 / 60 / 1000;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 3000,
        "wires": [
            [
                "55632a7df69e411a"
            ]
        ]
    },
    {
        "id": "55632a7df69e411a",
        "type": "http request",
        "z": "bc1bab9a1f9a2cfc",
        "name": "LLA US REST",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://lla.us.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1000,
        "y": 3000,
        "wires": [
            [
                "a1674cb87682a6f0"
            ]
        ]
    },
    {
        "id": "a1674cb87682a6f0",
        "type": "debug",
        "z": "bc1bab9a1f9a2cfc",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 3000,
        "wires": []
    },
    {
        "id": "3a7f2691276f92c2",
        "type": "http request",
        "z": "31f995839deda452",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://d4sys.azure-api.net/mywater_services/mw/customer_data_fetch",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 550,
        "y": 300,
        "wires": [
            [
                "5d25b3f52b350633",
                "ed225a822d6c2276"
            ]
        ]
    },
    {
        "id": "a3da2eb21643de21",
        "type": "inject",
        "z": "31f995839deda452",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "3900",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 300,
        "wires": [
            [
                "ae8207feb3e93826"
            ]
        ]
    },
    {
        "id": "968c8780aaf34f0a",
        "type": "debug",
        "z": "31f995839deda452",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 580,
        "wires": []
    },
    {
        "id": "ae8207feb3e93826",
        "type": "function",
        "z": "31f995839deda452",
        "name": "",
        "func": "msg.payload = \"data to post\";\nmsg.headers = {};\nmsg.headers['Ocp-Apim-Subscription-Key'] = '789e8f42fa5a4811ab8e7405fc92eba1';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 300,
        "wires": [
            [
                "3a7f2691276f92c2",
                "d74d6856a5a71f53"
            ]
        ]
    },
    {
        "id": "68c407d15b436324",
        "type": "http request",
        "z": "31f995839deda452",
        "d": true,
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1150,
        "y": 380,
        "wires": [
            [
                "968c8780aaf34f0a"
            ]
        ]
    },
    {
        "id": "02af80e29eb1227f",
        "type": "function",
        "z": "31f995839deda452",
        "name": "formulateData",
        "func": "function genRand(min, max, decimalPlaces) {\n    const rand = Math.random() * (max - min) + min;\n    const power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand * power) / power;\n}\n\nfunction isBadNo(TheNo) {\n    if (TheNo === undefined || TheNo === null || isNaN(TheNo)) return true;\n    return false;\n}\n\nconst a = JSON.parse(msg.payload);\nconst device = a.result.device[0].Iot_data[0];\n// msg.payload = msg.payload[\"result\"];\n\nconst DTS = new Date(); // * Comment here\nPAYLOAD = {\n    measurements: [{\n        type: 'converged_measurements',\n        time: DTS.toISOString(),\n        source: {\n            id: '172055167'\n        },\n        pl: {},\n    }, ],\n};\n\nif (!isBadNo(device.flow_counter)) PAYLOAD.measurements[0].pl.FlowCounter = {\n    value: parseFloat(device.flow_counter),\n    unit: 'Flow'\n};\nif (!isBadNo(device.flow_counter_1)) PAYLOAD.measurements[0].pl.FlowCounter1 = {\n    value: parseFloat(device.flow_counter_1),\n    unit: 'Flow'\n};\nelse PAYLOAD.measurements[0].pl.FlowCounter1 = {\n    value: genRand(2600, 2800, 1),\n    unit: 'Flow'\n};\nif (!isBadNo(device.flow_counter_2)) PAYLOAD.measurements[0].pl.FlowCounter2 = {\n    value: parseFloat(device.flow_counter_2),\n    unit: 'Flow'\n};\nelse PAYLOAD.measurements[0].pl.FlowCounter2 = {\n    value: genRand(2600, 2800, 1),\n    unit: 'Flow'\n};\n\nif (!isBadNo(device.instant_flow)) PAYLOAD.measurements[0].pl.InstantFlow = {\n    value: parseFloat(device.instant_flow),\n    unit: 'Flow'\n};\nif (!isBadNo(device.instant_flow_1)) PAYLOAD.measurements[0].pl.InstantFlow1 = {\n    value: parseFloat(device.instant_flow_1),\n    unit: 'Flow'\n};\nif (!isBadNo(device.instant_flow_2)) PAYLOAD.measurements[0].pl.InstantFlow2 = {\n    value: parseFloat(device.instant_flow_2),\n    unit: 'Flow'\n};\nelse PAYLOAD.measurements[0].pl.InstantFlow2 = {\n    value: genRand(0, 30, 1),\n    unit: 'Flow'\n};\n\nif (!isBadNo(device.ph)) PAYLOAD.measurements[0].pl.pH = {\n    value: parseFloat(device.ph),\n    unit: ' '\n};\nelse PAYLOAD.measurements[0].pl.pH = {\n    value: genRand(6.5, 9.5, 10),\n    unit: ' '\n};\n\nif (!isBadNo(device.PHAv)) PAYLOAD.measurements[0].pl.PHAv = {\n    value: parseFloat(device.PHAv),\n    unit: ' '\n};\nelse PAYLOAD.measurements[0].pl.PHAv = {\n    value: genRand(6.5, 9.5, 10),\n    unit: ' '\n};\n\nif (!isBadNo(device.pressure_1)) PAYLOAD.measurements[0].pl.Pressure1 = {\n    value: parseFloat(device.pressure_1),\n    unit: ' '\n};\nif (!isBadNo(device.pressure_2)) PAYLOAD.measurements[0].pl.Pressure2 = {\n    value: parseFloat(device.pressure_2),\n    unit: ' '\n};\nif (!isBadNo(device.pressure_3)) PAYLOAD.measurements[0].pl.Pressure3 = {\n    value: parseFloat(device.pressure_3),\n    unit: ' '\n};\nif (!isBadNo(device.pressure_4)) PAYLOAD.measurements[0].pl.Pressure4 = {\n    value: parseFloat(device.pressure_4),\n    unit: ' '\n};\n\n// if(!isBadNo(device.pressure_5))\n//     PAYLOAD[\"measurements\"][0][\"pl\"][\"Pressure5\"]={ \"value\": parseFloat(device.pressure_5), \"unit\": \" \" }\n// else\n\nPAYLOAD.measurements[0].pl.Pressure5 = {\n    value: genRand(0.01, 2, 100),\n    unit: ' '\n};\nif (!isBadNo(device.pressure_6)) PAYLOAD.measurements[0].pl.Pressure6 = {\n    value: parseFloat(device.pressure_6),\n    unit: ' '\n};\nif (!isBadNo(device.pressure_7)) PAYLOAD.measurements[0].pl.Pressure7 = {\n    value: parseFloat(device.pressure_7),\n    unit: ' '\n};\nelse PAYLOAD.measurements[0].pl.Pressure7 = {\n    value: genRand(0.01, 2, 100),\n    unit: ' '\n};\n\nif (!isBadNo(device.tds_1)) PAYLOAD.measurements[0].pl.TDS1 = {\n    value: parseFloat(device.tds_1),\n    unit: 'TDS'\n};\nif (!isBadNo(device.tds_2)) PAYLOAD.measurements[0].pl.TDS2 = {\n    value: parseFloat(device.tds_2),\n    unit: 'TDS'\n};\nif (!isBadNo(device.tds_3)) PAYLOAD.measurements[0].pl.TDS3 = {\n    value: parseFloat(device.tds_3),\n    unit: 'TDS'\n};\n\nif (!isBadNo(device.temperature)) PAYLOAD.measurements[0].pl.Temperature = {\n    value: parseFloat(device.temperature),\n    unit: \"'C\"\n};\nelse PAYLOAD.measurements[0].pl.Temperature = {\n    value: genRand(10, 20, 100),\n    unit: \"'C\"\n};\nif (!isBadNo(device.temperature_1)) PAYLOAD.measurements[0].pl.Temperature1 = {\n    value: parseFloat(device.temperature_1),\n    unit: 'C'\n};\nelse PAYLOAD.measurements[0].pl.Temperature1 = {\n    value: genRand(10, 20, 100),\n    unit: 'C'\n};\nif (!isBadNo(device.temperature_3)) PAYLOAD.measurements[0].pl.Temperature3 = {\n    value: parseFloat(device.temperature_3),\n    unit: 'C'\n};\nelse PAYLOAD.measurements[0].pl.Temperature3 = {\n    value: genRand(10, 20, 100),\n    unit: 'C'\n};\n\nmsg.payload = PAYLOAD;\nreturn msg;\n\n\n// var a = JSON.parse(msg.payload);\n// var device = a.result.device[0].Iot_data[0];\n// //msg.payload = msg.payload[\"result\"];\n\n// var DTS = new Date();\n// PAYLOAD={\n//     \"measurements\": [\n//             {\n//                 type:\"converged_measurements\",\n//                 time:DTS.toISOString(),\n//                 \"source\":{\"id\":\"172055167\" },\n//                 \"pl\":{}\n//             }\n//         ]\n//     }\n\n// if(!isBadNo(device.flow_counter))PAYLOAD[\"measurements\"][0][\"pl\"][\"FlowCounter\"] = { \"value\": parseFloat(device.flow_counter), \"unit\": \"Flow\" } \n// if(!isBadNo(device.flow_counter_1))\n//     PAYLOAD[\"measurements\"][0][\"pl\"][\"FlowCounter1\"] = { \"value\": parseFloat(device.flow_counter_1), \"unit\": \"Flow\" } \n// else\n//     PAYLOAD[\"measurements\"][0][\"pl\"][\"FlowCounter1\"] = { \"value\": genRand(2600,2800,1), \"unit\": \"Flow\" } \n// if(!isBadNo(device.flow_counter_2))\n//     PAYLOAD[\"measurements\"][0][\"pl\"][\"FlowCounter2\"] = { \"value\": parseFloat(device.flow_counter_2), \"unit\": \"Flow\" } \n// else \n//     PAYLOAD[\"measurements\"][0][\"pl\"][\"FlowCounter2\"] = { \"value\": genRand(2600,2800,1), \"unit\": \"Flow\" } \n\n\n// if(!isBadNo(device.instant_flow))PAYLOAD[\"measurements\"][0][\"pl\"][\"InstantFlow\"]={ \"value\": parseFloat(device.instant_flow), \"unit\": \"Flow\" } \n// if(!isBadNo(device.instant_flow_1))PAYLOAD[\"measurements\"][0][\"pl\"][\"InstantFlow1\"]= { \"value\": parseFloat(device.instant_flow_1), \"unit\": \"Flow\" } \n// if(!isBadNo(device.instant_flow_2))\n//     PAYLOAD[\"measurements\"][0][\"pl\"][\"InstantFlow2\"]={ \"value\": parseFloat(device.instant_flow_2), \"unit\": \"Flow\" } \n// else\n//     PAYLOAD[\"measurements\"][0][\"pl\"][\"InstantFlow2\"]={ \"value\": genRand(0,30,1), \"unit\": \"Flow\" } \n\n// if(!isBadNo(device.ph))\n//     PAYLOAD[\"measurements\"][0][\"pl\"][\"pH\"]={ \"value\": parseFloat(device.ph), \"unit\": \" \" } \n// else\n//     PAYLOAD[\"measurements\"][0][\"pl\"][\"pH\"]={ \"value\": genRand(6.5,9.5,10), \"unit\": \" \" } \n\n// if(!isBadNo(device.PHAv))\n//     PAYLOAD[\"measurements\"][0][\"pl\"][\"PHAv\"]={ \"value\": parseFloat(device.PHAv), \"unit\": \" \" } \n// else\n//     PAYLOAD[\"measurements\"][0][\"pl\"][\"PHAv\"]={ \"value\": genRand(6.5,9.5,10), \"unit\": \" \" } \n\n// if(!isBadNo(device.pressure_1))PAYLOAD[\"measurements\"][0][\"pl\"][\"Pressure1\"]={ \"value\": parseFloat(device.pressure_1), \"unit\": \" \" } \n// if(!isBadNo(device.pressure_2))PAYLOAD[\"measurements\"][0][\"pl\"][\"Pressure2\"]={ \"value\": parseFloat(device.pressure_2), \"unit\": \" \" } \n// if(!isBadNo(device.pressure_3))PAYLOAD[\"measurements\"][0][\"pl\"][\"Pressure3\"]={ \"value\": parseFloat(device.pressure_3), \"unit\": \" \" } \n// if(!isBadNo(device.pressure_4))PAYLOAD[\"measurements\"][0][\"pl\"][\"Pressure4\"]={ \"value\": parseFloat(device.pressure_4), \"unit\": \" \" } \n// // if(!isBadNo(device.pressure_5))\n// //     PAYLOAD[\"measurements\"][0][\"pl\"][\"Pressure5\"]={ \"value\": parseFloat(device.pressure_5), \"unit\": \" \" } \n// // else\n//     PAYLOAD[\"measurements\"][0][\"pl\"][\"Pressure5\"]={ \"value\": genRand(0.01,2,100), \"unit\": \" \" } \n// if(!isBadNo(device.pressure_6))PAYLOAD[\"measurements\"][0][\"pl\"][\"Pressure6\"]= { \"value\": parseFloat(device.pressure_6), \"unit\": \" \" } \n// if(!isBadNo(device.pressure_7))\n//     PAYLOAD[\"measurements\"][0][\"pl\"][\"Pressure7\"]={ \"value\": parseFloat(device.pressure_7), \"unit\": \" \" } \n// else\n//     PAYLOAD[\"measurements\"][0][\"pl\"][\"Pressure7\"]={ \"value\": genRand(0.01,2,100), \"unit\": \" \" } \n\n// if(!isBadNo(device.tds_1))PAYLOAD[\"measurements\"][0][\"pl\"][\"TDS1\"]= { \"value\": parseFloat(device.tds_1), \"unit\": \"TDS\" } \n// if(!isBadNo(device.tds_2))PAYLOAD[\"measurements\"][0][\"pl\"][\"TDS2\"]= { \"value\": parseFloat(device.tds_2), \"unit\": \"TDS\" } \n// if(!isBadNo(device.tds_3))PAYLOAD[\"measurements\"][0][\"pl\"][\"TDS3\"]= { \"value\": parseFloat(device.tds_3), \"unit\": \"TDS\" } \n\n// if(!isBadNo(device.temperature))\n//     PAYLOAD[\"measurements\"][0][\"pl\"][\"Temperature\"]= { \"value\": parseFloat(device.temperature), \"unit\": \"'C\" } \n// else\n//     PAYLOAD[\"measurements\"][0][\"pl\"][\"Temperature\"]= { \"value\": genRand(10,20,100), \"unit\": \"'C\" }     \n// if(!isBadNo(device.temperature_1))\n//     PAYLOAD[\"measurements\"][0][\"pl\"][\"Temperature1\"]= { \"value\": parseFloat(device.temperature_1), \"unit\": \"C\" } \n// else\n//     PAYLOAD[\"measurements\"][0][\"pl\"][\"Temperature1\"]= { \"value\": genRand(10,20,100), \"unit\": \"C\" } \n// if(!isBadNo(device.temperature_3))\n//     PAYLOAD[\"measurements\"][0][\"pl\"][\"Temperature3\"]= { \"value\": parseFloat(device.temperature_3), \"unit\": \"C\" } \n// else\n//     PAYLOAD[\"measurements\"][0][\"pl\"][\"Temperature3\"]= { \"value\": genRand(10,20,100), \"unit\": \"C\" } \n\n// msg.payload = PAYLOAD;\n// return msg;\n\n// function genRand(min, max, decimalPlaces) {  \n//     var rand = Math.random()*(max-min) + min;\n//     var power = Math.pow(10, decimalPlaces);\n//     return Math.floor(rand*power) / power;\n// }\n\n// function isBadNo(TheNo) {  \n//     if(TheNo===undefined || TheNo===null || isNaN(TheNo))\n//         return true;\n//     else \n//         return false;\n// }\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 300,
        "wires": [
            [
                "68c407d15b436324",
                "903bc25679b4c596",
                "6d29d41dd9b12982"
            ]
        ]
    },
    {
        "id": "5d25b3f52b350633",
        "type": "function",
        "z": "31f995839deda452",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 300,
        "wires": [
            [
                "02af80e29eb1227f",
                "ecb50d9da11b198e"
            ]
        ]
    },
    {
        "id": "903bc25679b4c596",
        "type": "http request",
        "z": "31f995839deda452",
        "name": "EmeaE2E Prod",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1160,
        "y": 240,
        "wires": [
            [
                "a22ebc205c7c5f58"
            ]
        ]
    },
    {
        "id": "bdb2d77d9efc24b6",
        "type": "debug",
        "z": "31f995839deda452",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 580,
        "wires": []
    },
    {
        "id": "4526f516cbb29896",
        "type": "debug",
        "z": "31f995839deda452",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 580,
        "wires": []
    },
    {
        "id": "d74d6856a5a71f53",
        "type": "debug",
        "z": "31f995839deda452",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 580,
        "wires": []
    },
    {
        "id": "98bc9ea3c32dda72",
        "type": "debug",
        "z": "31f995839deda452",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 580,
        "wires": []
    },
    {
        "id": "ed225a822d6c2276",
        "type": "json",
        "z": "31f995839deda452",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 590,
        "y": 440,
        "wires": [
            [
                "98bc9ea3c32dda72"
            ]
        ]
    },
    {
        "id": "6d29d41dd9b12982",
        "type": "json",
        "z": "31f995839deda452",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1030,
        "y": 440,
        "wires": [
            [
                "bdb2d77d9efc24b6"
            ]
        ]
    },
    {
        "id": "a22ebc205c7c5f58",
        "type": "json",
        "z": "31f995839deda452",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1290,
        "y": 340,
        "wires": [
            [
                "968c8780aaf34f0a"
            ]
        ]
    },
    {
        "id": "ecb50d9da11b198e",
        "type": "json",
        "z": "31f995839deda452",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 790,
        "y": 440,
        "wires": [
            [
                "4526f516cbb29896"
            ]
        ]
    },
    {
        "id": "96cc6dee8d69e6ee",
        "type": "function",
        "z": "5d81012049ef5c11",
        "name": "simualte_climate_readings",
        "func": "var Post2C8Y=[];\nPost2C8Y.push(\"200,ActivePower,ActivePower,\"+  Math.round((Math.random() * (19 - 22) + 22)*100)/100 +\",kWh\");\nPost2C8Y.push(\"200,Active Power,Active Power,\"+  Math.round((Math.random() * (19 - 22) + 22)*100)/100 +\",kWh\");\nPost2C8Y.push(\"200,Temperature,Temperature,\"+  Math.round((Math.random() * (19 - 22) + 22)*100)/100 +\",°C\");\nPost2C8Y.push(\"200,Humidity,Humidity,\"+ Math.round((Math.random() * (60 - 50) + 50)*100)/100 +\",%\");\nPost2C8Y.push(\"200,Pressure,Pressure,\"+ Math.round((Math.random() * (1.0133 - 1.0) + 1.0)*100)/100 +\",bar\");\nPost2C8Y.push(\"200,AirQualityIndex,AirQualityIndex,1,AQI\");\nPost2C8Y.push(\"200,PM2_5,PM2_5,\"+ Math.round((Math.random() * (100 - 80) + 80)*100)/100 +\",ppm\");\nPost2C8Y.push(\"200,PM1,PM1,\"+ Math.round((Math.random() * (100 - 80) + 80)*100)/100 +\",ppm\");\nPost2C8Y.push(\"200,PM10,PM10,\"+ Math.round((Math.random() * (100 - 80) + 80)*100)/100 +\",ppm\");\nPost2C8Y.push(\"200,CO,CO,\"+ Math.round((Math.random() * (5 - 1) + 1)*100)/100 +\",ppm\");\nPost2C8Y.push(\"200,CO2,CO2,\"+ Math.round((Math.random() * (400 - 300) + 300)*100)/100 +\",ppm\");\n\n// Post2C8Y.push(\"402,51.38762133266561,-1.3175654774125236,1\")\n\nreturn {payload:Post2C8Y};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 580,
        "wires": [
            [
                "4a708427f3ebb178"
            ]
        ]
    },
    {
        "id": "b1d7db9a71ad126e",
        "type": "inject",
        "z": "5d81012049ef5c11",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 580,
        "wires": [
            [
                "96cc6dee8d69e6ee"
            ]
        ]
    },
    {
        "id": "4a708427f3ebb178",
        "type": "split",
        "z": "5d81012049ef5c11",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 780,
        "y": 580,
        "wires": [
            [
                "e6af7c96f2512d69",
                "b3022bcc83ea5627",
                "509f3303fe5d1380"
            ]
        ]
    },
    {
        "id": "e6af7c96f2512d69",
        "type": "mqtt out",
        "z": "5d81012049ef5c11",
        "name": "ProdOwenBrotherMeterTeltonika",
        "topic": "s/us",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "93c3627e6f1b932a",
        "x": 1350,
        "y": 580,
        "wires": []
    },
    {
        "id": "984a6d4dcdcd4527",
        "type": "function",
        "z": "5d81012049ef5c11",
        "name": "OBMeter",
        "func": "let data = msg.payload;\nlet PL = \"\";\n\nlet DTS = (data.Timestamp.substring(6,10) + \"-\"+ data.Timestamp.substring(3,5)  + \"-\" + data.Timestamp.substring(0,2) + \"T\" +  data.Timestamp.substring(11,20)+\".000Z\");\n\nif(data.SlaveID === 2 && data.StartRegister===3){\n    PL =  \"200,Voltage,Voltage,\"+parseFloat(data.Data)+\",V,\"+ DTS;\n}else if(data.SlaveID === 2 && data.StartRegister===5){\n    PL =  \"200,Frequency,Frequency,\"+parseFloat(data.Data)+\",Hz,\"+DTS;\n}else if(data.SlaveID === 2 && data.StartRegister===7){\n    PL =  \"200,Current,Current,\"+parseFloat(data.Data)+\",A,\"+DTS;\n}else if(data.SlaveID === 2 && data.StartRegister===9){\n    PL =  \"200,ActivePower,ActivePower,\"+parseFloat(data.Data)+\",W,\"+DTS;\n}else if(data.SlaveID === 2 && data.StartRegister===11){\n    PL =  \"200,ApparentPower,ApparentPower,\"+parseFloat(data.Data)+\",W,\"+DTS;\n}else if(data.SlaveID === 2 && data.StartRegister===13){\n    PL =  \"200,ReactivePower,ReactivePower,\"+parseFloat(data.Data)+\",W,\"+DTS;\n}else if(data.SlaveID === 2 && data.StartRegister===15){\n    PL =  \"200,PowerFactor,PowerFactor,\"+parseFloat(data.Data)+\",PF,\"+DTS;\n}else if(data.SlaveID === 2 && data.StartRegister===353){\n    PL =  \"200,ImportActiveEnergy,ImportActiveEnergy,\"+parseFloat(data.Data)+\",kWh,\"+DTS;\n}else if(data.SlaveID === 2 && data.StartRegister===355){\n    PL =  \"200,ImportReactiveEnergy,ImportReactiveEnergy,\"+parseFloat(data.Data)+\",kWh,\"+DTS;\n}else if(data.SlaveID === 2 && data.StartRegister===363){\n    PL =  \"200,TotalActiveEnergy,TotalActiveEnergy,\"+parseFloat(data.Data)+\",kWh,\"+DTS;\n}else if(data.SlaveID === 2 && data.StartRegister===359){\n    PL =  \"200,ExportActiveEnergy,ExportActiveEnergy,\"+parseFloat(data.Data)+\",kWh,\"+DTS;\n}else if(data.SlaveID === 2 && data.StartRegister===361){\n    PL =  \"200,ExportReactiveEnergy,ExportReactiveEnergy,\"+parseFloat(data.Data)+\",kWh,\"+DTS;\n}else{\n    PL = msg.payload;\n}\n\nreturn {payload:PL};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 720,
        "wires": [
            [
                "e6af7c96f2512d69",
                "b3022bcc83ea5627",
                "509f3303fe5d1380"
            ]
        ]
    },
    {
        "id": "b06a560e89684c05",
        "type": "switch",
        "z": "5d81012049ef5c11",
        "name": "DeviceIdentifier",
        "property": "payload.IP",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "127.0.0.1",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 820,
        "y": 460,
        "wires": [
            [],
            [
                "984a6d4dcdcd4527"
            ]
        ]
    },
    {
        "id": "b3022bcc83ea5627",
        "type": "debug",
        "z": "5d81012049ef5c11",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 700,
        "wires": []
    },
    {
        "id": "c07e3094cc03650c",
        "type": "split",
        "z": "5d81012049ef5c11",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 640,
        "y": 520,
        "wires": [
            [
                "b06a560e89684c05"
            ]
        ]
    },
    {
        "id": "675145ace51e19fb",
        "type": "switch",
        "z": "5d81012049ef5c11",
        "name": "DeviceIdentifier",
        "property": "msg.payload[0].TeltonikaID",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "eq",
                "v": "1114910619",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1115875080",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "1115844923",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 540,
        "y": 400,
        "wires": [
            [
                "bc97c4b702faf157",
                "7e4b988b75500fe3"
            ],
            [
                "c07e3094cc03650c"
            ],
            []
        ]
    },
    {
        "id": "f5c710a60dc21365",
        "type": "http in",
        "z": "5d81012049ef5c11",
        "name": "Teltonika",
        "url": "teltonika",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 320,
        "wires": [
            [
                "675145ace51e19fb",
                "3674abe8d65df0dc",
                "7e4b988b75500fe3"
            ]
        ]
    },
    {
        "id": "bc97c4b702faf157",
        "type": "split",
        "z": "5d81012049ef5c11",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 730,
        "y": 340,
        "wires": [
            [
                "955a1bf8c21e5977"
            ]
        ]
    },
    {
        "id": "3674abe8d65df0dc",
        "type": "http response",
        "z": "5d81012049ef5c11",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 500,
        "y": 300,
        "wires": []
    },
    {
        "id": "955a1bf8c21e5977",
        "type": "switch",
        "z": "5d81012049ef5c11",
        "name": "DeviceIdentifier",
        "property": "payload.IP",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "127.0.0.1",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 880,
        "y": 320,
        "wires": [
            [],
            [
                "13c08962a0a14827"
            ]
        ]
    },
    {
        "id": "13c08962a0a14827",
        "type": "function",
        "z": "5d81012049ef5c11",
        "name": "Tibbo Probes",
        "func": "let data = msg.payload;\nlet PL = \"\";\nlet DTS = (data.Timestamp.substring(6,10) + \"-\"+ data.Timestamp.substring(3,5)  + \"-\" + data.Timestamp.substring(0,2) + \"T\" +  data.Timestamp.substring(11,20)+\".000Z\");\n\n\nif(data.SlaveID === 1 && data.StartRegister===301){\n    PL =  \"200,Temperature1,Ambient Temperature,\"+parseFloat(data.Data/100)+\",C,\"+DTS;\n}else if(data.SlaveID === 2 && data.StartRegister===401){\n    PL =  \"200,Temperature2,Device Temperature,\"+parseFloat(data.Data/10)+\",C,\"+DTS;\n}else if(data.SlaveID === 2 && data.StartRegister===405){\n    PL =  \"200,Humidity,Humidity,\"+parseFloat(data.Data/10)+\",%,\"+DTS;\n}else if(data.SlaveID === 3 && data.StartRegister===501){\n    PL =  \"200,Illuminance,Light Intensity,\"+parseFloat(data.Data)+\",Lux,\"+DTS;\n}else if(data.SlaveID === 4 && data.StartRegister===601){\n    PL =  \"200,Acceleration_X,Acceleration X,\"+parseFloat(data.Data)+\",G,\"+DTS;\n}else if(data.SlaveID === 4 && data.StartRegister===603){\n    PL =  \"200,Acceleration_Y,Acceleration Y,\"+parseFloat(data.Data)+\",G,\"+DTS;\n}else if(data.SlaveID === 4 && data.StartRegister===605){\n    PL =  \"200,Acceleration_Z,Acceleration Z,\"+parseFloat(data.Data)+\",G,\"+DTS;\n}else{\n    PL = msg.payload;\n    \n}\n\nreturn {payload:PL};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 360,
        "wires": [
            [
                "9b699607563cf02e",
                "7e4b988b75500fe3"
            ]
        ]
    },
    {
        "id": "52420282c1ba97ef",
        "type": "mqtt out",
        "z": "5d81012049ef5c11",
        "d": true,
        "name": "RUT955_TibboProbes_DEV",
        "topic": "s/us",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ca21c682a317c2eb",
        "x": 1400,
        "y": 340,
        "wires": []
    },
    {
        "id": "9b699607563cf02e",
        "type": "mqtt out",
        "z": "5d81012049ef5c11",
        "d": true,
        "name": "RUT955_TibboProbes",
        "topic": "s/us",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "085407411cc6e5df",
        "x": 1420,
        "y": 240,
        "wires": []
    },
    {
        "id": "7e4b988b75500fe3",
        "type": "debug",
        "z": "5d81012049ef5c11",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 420,
        "wires": []
    },
    {
        "id": "064a4659d69fb2b0",
        "type": "mqtt out",
        "z": "5d81012049ef5c11",
        "d": true,
        "name": "Dup Fridge into Streetlight PROD",
        "topic": "s/us",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "868b68bd26c0ee7d",
        "x": 1340,
        "y": 100,
        "wires": []
    },
    {
        "id": "d22a67e60ed7e402",
        "type": "function",
        "z": "5d81012049ef5c11",
        "name": "Mini_Fridge_Temp_Sim",
        "func": "var Post2C8Y=[];\nPost2C8Y.push(\"200,Ambient Temperature,Ambient Temperature,\"+  Math.round((Math.random() * (22 - 19) + 19)*100)/100 +\",°C\");\nPost2C8Y.push(\"200,Temperature,Temperature,\"+  Math.round((Math.random() * (22 - 19) + 19)*100)/100 +\",°C\");\nPost2C8Y.push(\"200,Device Temperature,Device Temperature,\"+  Math.round((Math.random() * (6 - 4) + 4)*100)/100 +\",°C\");\nPost2C8Y.push(\"200,Humidity,Humidity,\"+ Math.round((Math.random() * (60 - 50) + 50)*100)/100 +\",%\");\nPost2C8Y.push(\"200,Light Intensity,Light Intensity,\"+ Math.round((Math.random() * (240 - 0) + 0)*100)/100 +\",Lux\");\nPost2C8Y.push(\"200,Acceleration X,Acceleration X,\"+ Math.round((Math.random() * (400 - 0) + 0)*100)/100 +\",G\");\nPost2C8Y.push(\"200,Acceleration Y,Acceleration Y,\"+ Math.round((Math.random() * (400 - 0) + 0)*100)/100 +\",G\");\nPost2C8Y.push(\"200,Acceleration Z,Acceleration Z,\"+ Math.round((Math.random() * (400 - 0) + 0)*100)/100 +\",G\");\nPost2C8Y.push(\"200,AccelerationX,AccelerationX,\"+ Math.round((Math.random() * (400 - 0) + 0)*100)/100 +\",G\");\nPost2C8Y.push(\"200,AccelerationY,AccelerationY,\"+ Math.round((Math.random() * (400 - 0) + 0)*100)/100 +\",G\");\nPost2C8Y.push(\"200,AccelerationZ,AccelerationZ,\"+ Math.round((Math.random() * (400 - 0) + 0)*100)/100 +\",G\");\nPost2C8Y.push(\"402,51.38911410905503,-1.3176525618103327,1\");\nreturn {payload:Post2C8Y};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 140,
        "wires": [
            [
                "2d88ca881dc1700c"
            ]
        ]
    },
    {
        "id": "b54f6f228d85027d",
        "type": "inject",
        "z": "5d81012049ef5c11",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 140,
        "wires": [
            [
                "d22a67e60ed7e402"
            ]
        ]
    },
    {
        "id": "2d88ca881dc1700c",
        "type": "split",
        "z": "5d81012049ef5c11",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 650,
        "y": 140,
        "wires": [
            [
                "9b699607563cf02e"
            ]
        ]
    },
    {
        "id": "509f3303fe5d1380",
        "type": "mqtt out",
        "z": "5d81012049ef5c11",
        "name": "LLA_US_OBMeter",
        "topic": "s/us",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ef0816793a59ca1b",
        "x": 1370,
        "y": 460,
        "wires": []
    },
    {
        "id": "87a1ef763e530207",
        "type": "function",
        "z": "7d74cd6f6f7ecb5a",
        "name": "ICCID vs. IMEI Check n Fix",
        "func": "switch(msg[\"ICCID\"]) {\n  case \"89430301722122635632\":\n    //Umers\n    if(msg[\"IMEI\"]!=\"866907055227788\"){\n        msg[\"Alert\"]=msg[\"Alert\"]+\" ||| Wrong IMEI vs ICCID\";\n        msg[\"AlertDetails\"]=msg[\"AlertDetails\"] + \"||| UmersFMC230 and IMEI should be 866907055227788 but it was \" + msg[\"IMEI\"] + \". fixing it...\";\n        msg[\"IMEI\"]=\"866907055227788\";\n    }\n    break;\n  case \"89430301722122582388\":\n    //1\n    if(msg[\"IMEI\"]!=\"866907052467015\"){\n        msg[\"Alert\"]=msg[\"Alert\"]+\" ||| Wrong IMEI vs ICCID\";\n        msg[\"AlertDetails\"]=msg[\"AlertDetails\"] + \"||| Bike 2 and IMEI should be 866907052467015 but it was \" + msg[\"IMEI\"] + \". fixing it...\";\n        msg[\"IMEI\"]=\"866907052467015\";\n    }\n    break;\n  case \"89430301722122582354\":\n    //2\n    if(msg[\"IMEI\"]!=\"866907052435962\"){\n        msg[\"Alert\"]=msg[\"Alert\"]+\" ||| Wrong IMEI vs ICCID\";\n        msg[\"AlertDetails\"]=msg[\"AlertDetails\"] + \"||| Bike 2 and IMEI should be 866907052435962 but it was \" + msg[\"IMEI\"] + \". fixing it...\";\n        msg[\"IMEI\"]=\"866907052435962\";\n    }\n    break;\n  case \"89430301722122582396\":\n    //3\n    if(msg[\"IMEI\"]!=\"866907053430095\"){\n        msg[\"Alert\"]=msg[\"Alert\"]+\" ||| Wrong IMEI vs ICCID\";\n        msg[\"AlertDetails\"]=msg[\"AlertDetails\"] + \"||| Bike 3 and IMEI should be 866907053430095 but it was \" + msg[\"IMEI\"] + \". fixing it...\";\n        msg[\"IMEI\"]=\"866907053430095\";\n    }\n    break;\n  case \"89430301722122582370\":\n    //4\n    if(msg[\"IMEI\"]!=\"866907053429923\"){\n        msg[\"Alert\"]=msg[\"Alert\"]+\" ||| Wrong IMEI vs ICCID\";\n        msg[\"AlertDetails\"]=msg[\"AlertDetails\"] + \"||| Bike 4 and IMEI should be 866907053429923 but it was \" + msg[\"IMEI\"] + \". fixing it...\";\n       msg[\"IMEI\"]=\"866907053429923\";\n    }\n    break;\n  case \"89430301722122582362\":\n    //5\n    if(msg[\"IMEI\"]!=\"866907053430038\"){\n        msg[\"Alert\"]=msg[\"Alert\"]+\" ||| Wrong IMEI vs ICCID\";\n        msg[\"AlertDetails\"]=msg[\"AlertDetails\"] + \"||| Bike 5 and IMEI should be 866907053430038 but it was \" + msg[\"IMEI\"] + \". fixing it...\";\n        msg[\"IMEI\"]=\"866907053430038\";\n    }\n    break;\n  case \"89430301722122635624\":\n    //5\n    if(msg[\"IMEI\"]!=\"866907055230402\"){\n        msg[\"Alert\"]=msg[\"Alert\"]+\" ||| Wrong IMEI vs ICCID\";\n        msg[\"AlertDetails\"]=msg[\"AlertDetails\"] + \"||| Bike 5 and IMEI should be 866907055230402 but it was \" + msg[\"IMEI\"] + \". fixing it...\";\n        msg[\"IMEI\"]=\"866907055230402\";\n    }\n    break;\n  case \"\":\n     msg[\"Alert\"]=+msg[\"Alert\"]+\" ||| Missing ICCID\";\n     msg[\"AlertDetails\"]=\"ICCID is empty string - IMEI:\"+msg[\"IMEI\"];\n     break;\n  case null:\n     msg[\"Alert\"]=+msg[\"Alert\"]+\" ||| Missing ICCID\";\n     msg[\"AlertDetails\"]=\"ICCID is null - IMEI:\"+msg[\"IMEI\"];\n     msg[\"ICCID\"]=\"\";\n     break;\n  case undefined:\n     msg[\"Alert\"]=+msg[\"Alert\"]+\" ||| Missing ICCID\";\n     msg[\"AlertDetails\"]=msg[\"AlertDetails\"] + \"||| ICCID is undefined - IMEI:\"+msg[\"IMEI\"];\n     msg[\"ICCID\"]=\"\";\n     break;\n}\nif(msg[\"IMEI\"]===\"\"||isNaN(msg[\"IMEI\"])||msg[\"IMEI\"]===null||msg[\"IMEI\"]===undefined){\n     msg[\"Alert\"]=+msg[\"Alert\"]+\" ||| Missing IMEI\";\n    msg[\"AlertDetails\"]=msg[\"AlertDetails\"] + \"||| Missing IMEI >>> HUGE PROBLEM\";\n    msg[\"IMEI\"]===\"\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 540,
        "wires": [
            [
                "7da5c80503b9ac09",
                "c0bcb77d2c4653c4"
            ]
        ]
    },
    {
        "id": "134b396ba9a71625",
        "type": "function",
        "z": "7d74cd6f6f7ecb5a",
        "name": "Remove Empty keys",
        "func": "var obj = msg.AVLDecodedData;\nvar klm = {};\nObject.keys(obj).forEach(key => {\n  if (obj[key] === null)  {\n    delete obj[key];\n  }\n});\n\nmsg.AVLDecodedData=obj;\n// return {payload:obj};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 460,
        "wires": [
            [
                "87a1ef763e530207"
            ]
        ]
    },
    {
        "id": "7da5c80503b9ac09",
        "type": "debug",
        "z": "7d74cd6f6f7ecb5a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 560,
        "wires": []
    },
    {
        "id": "c0bcb77d2c4653c4",
        "type": "function",
        "z": "7d74cd6f6f7ecb5a",
        "name": "set headers and ExternalID in url ",
        "func": "var theID = \"\";\nif(msg.IMEI!==\"\" && msg.IMEI !== undefined && msg.IMEI !== null) \n    theID=msg.IMEI;\nelse if(msg.ICCID!==\"\" && msg.ICCID !== undefined && msg.ICCID !== null)\n    theID=msg.ICCID;\nelse\n    msg.NoID=true;\n    \n\nif(theID!==\"\"){\n    msg.NoID=false;\n    \n    msg.headers = {};\n    msg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\n    msg.headers['Content-Type'] = 'application/json';\n    msg.headers['Accept'] = 'application/json';\n    msg.url=\"https://t1210372600.emea.cumulocity.com/identity/externalIds/c8y_Serial/\"+theID;\n    msg.payload={}   \n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 620,
        "wires": [
            [
                "24e698a47f939288"
            ]
        ]
    },
    {
        "id": "040d1e6c3fc4e9f7",
        "type": "function",
        "z": "7d74cd6f6f7ecb5a",
        "name": "DecodeAVLPacket",
        "func": "function ToSignedInt32(x) {\n        var uint32 = x//ToUint32(x);\n        if (uint32 >= Math.pow(2, 31)) {\n            return uint32 - Math.pow(2, 32)\n        } else {\n            return uint32;\n        }\n    }\n \nfunction ToSignedInt(a){ \n    if ((a & 0x8000) > 0) \n        a =  (a - 0x10000);\n    return a;\n}\n    \nvar Raw = msg.payload;\nvar decoded = {};\n\nmsg[\"Alert\"]=\"NONE\";\nmsg[\"AlertDetails\"]=\"\";\nmsg[\"AlertMsg\"]=\"\";\n\n//=================================\n//these are decoding parameters\n//the incoming string will be a collection of two chars + space each represnting a byte \n//first 4 should be zeros in AVL packet \nconst AVLSignature=/^00 00 00 00/\nconst Len_i = 4, Len_Size = 4;//assuming zero is first element\nconst Codec_i = 8, Codec_Size = 1;\nconst Recs_i = 9, Recs_Size = 1;\nconst Data_i = 10 ;\nconst D_TimeStamp_Offset = 0, D_TimeStamp_Size = 8;\nconst D_Priority_Offset = 8, D_Priority_Size = 1;\nconst D_GPS_Long_Offset = 9, D_GPS_Long_Size = 4;\nconst D_GPS_Lat_Offset = 13, D_GPS_Lat_Size = 4;\nconst D_GPS_Alt_Offset = 17, D_GPS_Alt_Size = 2;\nconst D_GPS_Angle_Offset = 19, D_GPS_Angle_Size = 2;\nconst D_GPS_Satellites_Offset = 21, D_GPS_Satellites_Size = 1;\nconst D_GPS_Speed_Offset = 22, D_GPS_Speed_Size = 2;\nconst D_IO_ID_Offset = 24, D_IO_ID_Size = 1;\nconst D_IO_Count_Offset = 25, D_IO_Count_Size = 1;\nconst D_IO_1B_Offset = 26, D_IO_Counts_Size = 1;\n\ndecoded[\"ICCID\"]=\"\";\n\n//=================\n//check if message starts with its signature 4 zero bytes\nif(Raw.match(AVLSignature)){\n    //skip first 4 zero bytes\n    var AVL_Bytes_Array = Raw.split(\" \");\n    decoded[\"PacketLength\"]=parseInt(AVL_Bytes_Array.slice(Len_i,Len_i+Len_Size).join(\"\"),16);\n\tdecoded[\"Codec\"]=parseInt(AVL_Bytes_Array.slice(Codec_i,Codec_i+Codec_Size).join(\"\"),16);\n\tvar Recs =parseInt(AVL_Bytes_Array.slice(Recs_i,Recs_i+Recs_Size).join(\"\"),16);\n    decoded[\"RecordsCount\"] = Recs;\n    msg[\"RecordsCount\"]=Recs;\n\n    var DataOffsetRunningIndex=Data_i;\n\tfor(var DataRecs_i=1;DataRecs_i<=Recs;DataRecs_i++){\n\t    var TimeStamp = parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_TimeStamp_Size).join(\"\"),16)\n        var TheCorrectedTimeStamp = new Date();\n        decoded[\"D\"+(DataRecs_i)+\"_FutureDate\"]= 0;\n        try{  \n            TheCorrectedTimeStamp = new Date(TimeStamp);\n            TheCorrectedTimeStamp_Str = new Date(TimeStamp).toISOString();\n            var NOW = new Date();\n            if(TheCorrectedTimeStamp>NOW){\n                msg[\"Alert\"]=msg[\"Alert\"] + \" ||| AVLDecoding Timestamp Issue\";\n                msg[\"AlertDetail\"]=msg[\"AlertDetails\"] + \" ||| Timestamp of record \" + DataRecs_i + \": \"+TheCorrectedTimeStamp_Str+  \" is in future as of now: \" +NOW.toISOString()  ;\n                msg[\"AlertMsg\"]=msg[\"AlertMsg\"] + \" ||| \" + JSON.stringify(msg);\n                msg[\"OddDate\"] = true;\n\n                TheCorrectedTimeStamp = NOW;\n                TheCorrectedTimeStamp_Str = NOW.toISOString();\n                decoded[\"D\"+(DataRecs_i)+\"_FutureDate\"]= 1;\n                //break;//instead of skipping the whole record when date is in incorrectly in future we will only skip location updates\n            }else if((NOW - TheCorrectedTimeStamp) > (1000 * 70 * 60 * 12.1 )){ //currently devices are set to report every 12 hours (with 2 readings of 6 hours_). 12.1 so we are a little greater than exact 12 hours\n                //TheCorrectedTimeStamp= NOW.toISOString();\n               \n                //log then DONT skip the record as its just old.previously we were skipping the records\n                msg[\"Alert\"]=msg[\"Alert\"] + \" ||| AVLDecoding Timestamp Issue\";\n                msg[\"AlertDetail\"]=msg[\"AlertDetails\"] + \" ||| Timestamp of record \" + DataRecs_i + \":\"+ TheCorrectedTimeStamp_Str+ \"  is older than 65 mins of now :\" +  NOW.toISOString();\n                msg[\"AlertMsg\"]=msg[\"AlertMsg\"] + \" ||| \" + JSON.stringify(msg);\n            //   break; <<OLD\n                msg[\"OddDate\"] = true;\n            }\n        }catch(e){\n            msg[\"Alert\"]=msg[\"Alert\"] + \" ||| AVLDecoding Timestamp Error\";\n            msg[\"AlertDetail\"]=msg[\"AlertDetails\"] + \" ||| error converting timestamp of record \" + DataRecs_i + \"  raw timestamp:\" +TimeStamp  ;\n            msg[\"AlertMsg\"]=msg[\"AlertMsg\"] + \" ||| \" + JSON.stringify(msg);\n            msg[\"OddDate\"] = true;\n            break;\n        }\n\n        try{\n            TheCorrectedTimeStamp_Str=TheCorrectedTimeStamp_Str.replace(\".000Z\",\".000+00:00\")\n        }catch(e){}\n\n\t    //DataOffsetRunningIndex = DataOffsetRunningIndex+D_TimeStamp_Offset;\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_i_ts\"]=DataOffsetRunningIndex\n\t    decoded[\"D\"+(DataRecs_i)+\"_Timestamp\"]=TheCorrectedTimeStamp_Str\n\t   \tdecoded[\"D\"+(DataRecs_i)+\"_Timestamp_R\"]= TimeStamp\n\t    DataOffsetRunningIndex+=D_TimeStamp_Size;\t\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_Priority\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_Priority_Size).join(\"\"),16)\n\t    DataOffsetRunningIndex+=D_Priority_Size;\t\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_GPS_Long_us\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_GPS_Long_Size).join(\"\"),16)\n        decoded[\"D\"+(DataRecs_i)+\"_GPS_Long\"]=ToSignedInt32(parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_GPS_Long_Size).join(\"\"),16))/10000000\n\t    DataOffsetRunningIndex+=D_GPS_Long_Size;\t\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_GPS_Lat_us\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_GPS_Lat_Size).join(\"\"),16)\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_GPS_Lat\"]=ToSignedInt32(parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_GPS_Lat_Size).join(\"\"),16))/10000000\n\t\tDataOffsetRunningIndex+=D_GPS_Lat_Size;\t\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_GPS_Alt\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_GPS_Alt_Size).join(\"\"),16)\n\t    DataOffsetRunningIndex+=D_GPS_Alt_Size;\t\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_GPS_Angle_us\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_GPS_Angle_Size).join(\"\"),16)\n\t    decoded[\"D\"+(DataRecs_i)+\"_GPS_Angle\"]=ToSignedInt32(parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_GPS_Angle_Size).join(\"\"),16))\n\t    DataOffsetRunningIndex+=D_GPS_Angle_Size;\t\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_GPS_Satellites\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_GPS_Satellites_Size).join(\"\"),16)\n\t    DataOffsetRunningIndex+=D_GPS_Satellites_Size;\t\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_GPS_Speed\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_GPS_Speed_Size).join(\"\"),16)\n\t    DataOffsetRunningIndex+=D_GPS_Speed_Size;\t\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_IO_EventID\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_IO_ID_Size).join(\"\"),16)\n\t    DataOffsetRunningIndex+=D_IO_ID_Size;\t\n\t\tvar IORecordsCount = parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_IO_Count_Size).join(\"\"),16)\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_IO_Records\"]=IORecordsCount\n\t    DataOffsetRunningIndex+=D_IO_Counts_Size;\t\n\t    var IORecordsCount_1B = parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_IO_Counts_Size).join(\"\"),16)\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_IO_1Byte_Records\"]=IORecordsCount_1B\n\t    DataOffsetRunningIndex+=D_IO_Counts_Size;\t\n\t    \n\t\tfor(var IORecs_1b_i=1;IORecs_1b_i<=IORecordsCount_1B;IORecs_1b_i++){\n\t\t\tdecoded[\"D\"+DataRecs_i+\"_IO_1Byte_\"+IORecs_1b_i+\"_ID\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1),16)\n\t\t\tDataOffsetRunningIndex+=1;\n\t\t\tdecoded[\"D\"+DataRecs_i+\"_IO_1Byte_\"+IORecs_1b_i+\"_Val\"]=(parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1),16))\n\t\t\tDataOffsetRunningIndex+=1;\n\t\t\tswitch(parseInt(decoded[\"D\"+DataRecs_i+\"_IO_1Byte_\"+IORecs_1b_i+\"_ID\"])) {\n                case 239:\n                    decoded[\"D\"+(DataRecs_i)+\"_Ignition\"] = decoded[\"D\"+DataRecs_i+\"_IO_1Byte_\"+IORecs_1b_i+\"_Val\"]\n                    break;\n                case 240:\n                    decoded[\"D\"+(DataRecs_i)+\"_Movement\"] = decoded[\"D\"+DataRecs_i+\"_IO_1Byte_\"+IORecs_1b_i+\"_Val\"]\n                    break;\n                case 21:\n                    decoded[\"D\"+(DataRecs_i)+\"_GSMSignal\"] = decoded[\"D\"+DataRecs_i+\"_IO_1Byte_\"+IORecs_1b_i+\"_Val\"]\n                    break;\n                case 113:\n                    decoded[\"D\"+(DataRecs_i)+\"_Battery\"] = decoded[\"D\"+DataRecs_i+\"_IO_1Byte_\"+IORecs_1b_i+\"_Val\"]\n                    break;\n                case 252:\n                    decoded[\"D\"+(DataRecs_i)+\"_UnplugDetection\"] = decoded[\"D\"+DataRecs_i+\"_IO_1Byte_\"+IORecs_1b_i+\"_Val\"]\n                    break;\n                case 246:\n                    decoded[\"D\"+(DataRecs_i)+\"_TowDetection\"] = decoded[\"D\"+DataRecs_i+\"_IO_1Byte_\"+IORecs_1b_i+\"_Val\"]\n                    break;\n                case 69:\n                    decoded[\"D\"+(DataRecs_i)+\"_GNSS_Status\"] = decoded[\"D\"+DataRecs_i+\"_IO_1Byte_\"+IORecs_1b_i+\"_Val\"]\n                    break;\n            }\n\t\t}\n\n\t\tvar IORecordsCount_2B=0,IORecordsCount_4B=0,IORecordsCount_8B=0;\n\t\t//check if io counts is greater then 1byte ios we just parsed. if so we must have 22byte io data too so process it\n\t\tIORecordsCount_2B = parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_IO_Counts_Size).join(\"\"),16)\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_IO_2Byte_Records\"]=IORecordsCount_2B\n\t\tDataOffsetRunningIndex+=D_IO_Counts_Size;\t\n\t\t\n\t\tif(IORecordsCount_2B>0){\n\t\t\tfor(var IORecs_2b_i=1;IORecs_2b_i<=IORecordsCount_2B;IORecs_2b_i++){\n\t\t\t\tdecoded[\"D\"+DataRecs_i+\"_IO_2Byte_\"+IORecs_2b_i+\"_ID\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1),16)\n\t\t\t\tDataOffsetRunningIndex+=1;\n\t\t\t\tdecoded[\"D\"+DataRecs_i+\"_IO_2Byte_\"+IORecs_2b_i+\"_Val\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+2).join(\"\"),16)\n\t\t\t\tDataOffsetRunningIndex+=2;\n    \t\t\tswitch(parseInt(decoded[\"D\"+DataRecs_i+\"_IO_2Byte_\"+IORecs_2b_i+\"_ID\"])) {\n                    case 66:\n                        decoded[\"D\"+(DataRecs_i)+\"_ExternalVoltage\"] = decoded[\"D\"+DataRecs_i+\"_IO_2Byte_\"+IORecs_2b_i+\"_Val\"]*0.001\n                        break;\n                    case 205:\n                        decoded[\"D\"+(DataRecs_i)+\"_CellID\"] = decoded[\"D\"+DataRecs_i+\"_IO_2Byte_\"+IORecs_2b_i+\"_Val\"]\n                        break;\n                    case 67:\n                        decoded[\"D\"+(DataRecs_i)+\"_BatteryVoltage\"] = decoded[\"D\"+DataRecs_i+\"_IO_2Byte_\"+IORecs_2b_i+\"_Val\"]*0.001\n                        break;\n                    case 68:\n                        decoded[\"D\"+(DataRecs_i)+\"_BatteryCurrent\"] = decoded[\"D\"+DataRecs_i+\"_IO_2Byte_\"+IORecs_2b_i+\"_Val\"]*0.001\n                        break;\n                }\n\t\t\t}\n        }   \n        //below is not correct - its realized that 8byte coutn can be there even if 4byte is zero\n\t\t//check if io counts is greater then 1byte + 2byte ios we just parsed. if so we must have 4byte io data too so process it\n\t\tIORecordsCount_4B = parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_IO_Counts_Size).join(\"\"),16)\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_IO_4Byte_Records\"]=IORecordsCount_4B\n\t\tDataOffsetRunningIndex+=D_IO_Counts_Size;\t\n\t\t\n\t\tif(IORecordsCount_4B>0){\n\t\t\tfor(var IORecs_4b_i=1;IORecs_4b_i<=IORecordsCount_4B;IORecs_4b_i++){\n\t\t\t\tdecoded[\"D\"+DataRecs_i+\"_IO_4Byte_\"+IORecs_4b_i+\"_ID\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1),16)\n\t\t\t\tDataOffsetRunningIndex+=1;\n\t\t\t\tdecoded[\"D\"+DataRecs_i+\"_IO_4Byte_\"+IORecs_4b_i+\"_Val\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+4).join(\"\"),16)\n\t\t\t\tDataOffsetRunningIndex+=4;\n\t\t\t}\n\t\t}\n\t\t//check if io counts is greater then 1byte + 2byte +4byte ios we just parsed. if so we must have 8byte io data too so process it\n\t\tIORecordsCount_8B = parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_IO_Counts_Size).join(\"\"),16)\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_IO_8Byte_Records\"]=IORecordsCount_8B\n\t\tDataOffsetRunningIndex+=D_IO_Counts_Size;\t\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_LastIndex\"]=DataOffsetRunningIndex\n\t\tif(IORecordsCount_8B>0){\t\n\t\t\tfor(var IORecs_8b_i=1;IORecs_8b_i<=IORecordsCount_8B;IORecs_8b_i++){\n\t\t\t\tdecoded[\"D\"+DataRecs_i+\"_IO_8Byte_\"+IORecs_8b_i+\"_ID\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1),16)\n\t\t\t\tDataOffsetRunningIndex+=1;\n\t\t\t\tdecoded[\"D\"+DataRecs_i+\"_IO_8Byte_\"+IORecs_8b_i+\"_Val\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+8).join(\"\"),16)\n\t\t\t\tDataOffsetRunningIndex+=8;\n\t\t\t\t\n\t\t\t\ttry{\n    \t\t\t\t//find iccid and populate if it exists\n                \tif(decoded[\"D\"+(DataRecs_i)+\"_IO_8Byte_\"+IORecs_8b_i+\"_ID\"]===14 && \n                \t    decoded[\"D\"+(DataRecs_i)+\"_IO_8Byte_\"+(IORecs_8b_i-1)+\"_ID\"]===11){\n                \t    let ic=decoded[\"D\"+(DataRecs_i)+\"_IO_8Byte_\"+(IORecs_8b_i-1)+\"_Val\"]+\"\"+decoded[\"D\"+(DataRecs_i)+\"_IO_8Byte_\"+IORecs_8b_i+\"_Val\"];\n                        if(ic!==\"\" && ic!==null && ic!==undefined && !isNaN(ic)){\n                            decoded[\"ICCID\"]=ic;\n                            msg[\"ICCID\"]=ic;\n                            msg[\"FoundICCID\"] = true;\n                        }\n                \t}\n\t\t\t\t}catch(e){}\n\t\t\t}\n\t\t}\n    \n\n\t}\n\tdecoded[\"DataCount\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+Recs_Size).join(\"\"),16)\n\tDataOffsetRunningIndex+=Recs_Size;\t\n\tdecoded[\"CRC\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex).join(\"\"),16)\n\t\n}\n\n\n// var TheSessionsList={};\n// var TheIMEI=\"\";\n// try{\n//     TheSessionsList=global.get(\"TCPSessons\");\n//     TheIMEI = TheSessionsList[msg._session.id];\n// }catch(e){}\n\n//msg[\"AVLRawData\"]=Raw\nmsg[\"AVLDecodedData\"]=decoded;\nmsg.payload=\"\";\n// msg[\"IMEI\"]=TheIMEI;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 400,
        "wires": [
            [
                "c32de84e4ac21f36",
                "d3f2704bfdba4e14",
                "134b396ba9a71625"
            ]
        ]
    },
    {
        "id": "24e698a47f939288",
        "type": "switch",
        "z": "7d74cd6f6f7ecb5a",
        "name": "Check If ExtID Present",
        "property": "NoID",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1040,
        "y": 660,
        "wires": [
            [
                "8692814c977ef637"
            ]
        ]
    },
    {
        "id": "9d62aad08f6176de",
        "type": "inject",
        "z": "7d74cd6f6f7ecb5a",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "00 00 00 00 00 00 01 bf 08 06 00 00 01 83 9f 8f c9 00 00 ff 36 f3 51 1e a1 20 e8 00 78 00 99 07 00 06 00 0d 07 ef 00 f0 01 15 05 45 01 71 4f f6 01 fc 01 04 42 03 f5 18 00 06 43 0f 34 44 00 00 00 02 0b 00 00 00 02 15 0b cf 9c 0e 00 00 00 00 7e 84 d9 70 00 00 01 83 9f 8f dc 88 00 ff 36 f4 8e 1e a1 1e a0 00 78 00 af 08 00 08 00 0d 07 ef 00 f0 01 15 05 45 01 71 51 f6 01 fc 01 04 42 00 00 18 00 08 43 0f 4a 44 00 00 00 02 0b 00 00 00 02 15 0b cf 9c 0e 00 00 00 00 7e 84 d9 70 00 00 01 83 34 77 7e b0 00 ff 36 f6 2e 1e a1 25 da 00 8b 00 00 06 00 00 00 0d 07 ef 00 f0 01 15 05 45 01 71 5f f6 00 fc 00 04 42 30 63 18 00 00 43 0f e7 44 00 6a 00 02 0b 00 00 00 02 15 0b cf 9c 0e 00 00 00 00 7e 84 d9 70 00 00 01 83 9f 91 bd 00 00 ff 36 f4 f2 1e a1 26 a2 00 8c 00 00 07 00 00 00 0d 07 ef 00 f0 01 15 05 45 01 71 60 f6 00 fc 00 04 42 30 63 18 00 00 43 0f f1 44 00 64 00 02 0b 00 00 00 02 15 0b cf 9c 0e 00 00 00 00 7e 84 d9 70 00 00 01 83 9f 91 d4 70 00 ff 36 f5 03 1e a1 26 81 00 8b 00 00 07 00 00 f0 0d 07 ef 00 f0 00 15 05 45 01 71 60 f6 00 fc 00 04 42 30 63 18 00 00 43 0f f6 44 00 63 00 02 0b 00 00 00 02 15 0b cf 9c 0e 00 00 00 00 7e 84 d9 70 00 00 01 83 9f 92 22 90 00 ff 36 f5 03 1e a1 26 81 00 8a 00 00 08 00 00 00 0d 07 ef 00 f0 00 15 05 45 01 71 61 f6 00 fc 00 04 42 30 63 18 00 00 43 0f fa 44 00 60 00 02 0b 00 00 00 02 15 0b cf 9c 0e 00 00 00 00 7e 84 d9 70 06 00 00 d5 4b",
        "payloadType": "str",
        "x": 510,
        "y": 400,
        "wires": [
            [
                "040d1e6c3fc4e9f7"
            ]
        ]
    },
    {
        "id": "3e26439347e0054f",
        "type": "switch",
        "z": "7d74cd6f6f7ecb5a",
        "name": "SWITCH FilterPOCBikes",
        "property": "POCIMEIFound",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 910,
        "y": 340,
        "wires": [
            [
                "f73b8efbe76917e6",
                "040d1e6c3fc4e9f7"
            ]
        ]
    },
    {
        "id": "c32de84e4ac21f36",
        "type": "function",
        "z": "7d74cd6f6f7ecb5a",
        "name": "AVL RESPONSE",
        "func": "if(msg.IMEI === undefined || msg.IMEI.trim()===\"\")\n    msg.payload = Buffer.from([0,0,0,0]);\nelse\n    msg.payload = Buffer.from([0,0,0,msg[\"RecordsCount\"]]);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 400,
        "wires": [
            [
                "511be3667fd6968b",
                "b1798d56c756fb34"
            ]
        ]
    },
    {
        "id": "d3f2704bfdba4e14",
        "type": "debug",
        "z": "7d74cd6f6f7ecb5a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 360,
        "wires": []
    },
    {
        "id": "8692814c977ef637",
        "type": "http request",
        "z": "7d74cd6f6f7ecb5a",
        "name": "Find ID from ExternalID",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1030,
        "y": 700,
        "wires": [
            [
                "5eaf09befa9dfdcc",
                "e196958352fd2281"
            ]
        ]
    },
    {
        "id": "4c1714cb6731bf34",
        "type": "function",
        "z": "7d74cd6f6f7ecb5a",
        "name": "FilterPOCsIMEIs",
        "func": "var POCIMEIFound=false;\nvar TheSessionsList={};\nvar TheIMEI=\"\";\n// try{\n    TheSessionsList=global.get(\"TCPSessions\");\n    TheIMEI = TheSessionsList[msg._session.id];\n    //msg[\"ts\"]=TheSessionsList;\n// }catch(e){}\n//866907055174832,\nconst POCIMEIs = [\"866907055227788\",\"866907052467015\",\"866907053429923\",\"866907052435962\",\"866907053430095\",\"866907053429923\",\"866907053430038\",\"866907055230402\"]\nif(POCIMEIs.includes(TheIMEI))\n    msg[\"POCIMEIFound\"]=true;\n\nmsg[\"IMEI\"]=TheIMEI;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 260,
        "wires": [
            [
                "3e26439347e0054f",
                "f5513bc66547781e"
            ]
        ]
    },
    {
        "id": "f73b8efbe76917e6",
        "type": "debug",
        "z": "7d74cd6f6f7ecb5a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 280,
        "wires": []
    },
    {
        "id": "511be3667fd6968b",
        "type": "tcp out",
        "z": "7d74cd6f6f7ecb5a",
        "name": "",
        "host": "",
        "port": "",
        "beserver": "reply",
        "base64": false,
        "end": false,
        "tls": "",
        "x": 1210,
        "y": 280,
        "wires": []
    },
    {
        "id": "b1798d56c756fb34",
        "type": "debug",
        "z": "7d74cd6f6f7ecb5a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 220,
        "wires": []
    },
    {
        "id": "5eaf09befa9dfdcc",
        "type": "function",
        "z": "7d74cd6f6f7ecb5a",
        "name": "extract id ",
        "func": "var k = JSON.parse(msg.payload);\n\nif(k.managedObject===undefined||k.managedObject.id===undefined)\n    msg.C8YiD = null;\nelse\n    msg.C8YiD = k.managedObject.id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 740,
        "wires": [
            [
                "261667b14e5b5c18"
            ]
        ]
    },
    {
        "id": "e196958352fd2281",
        "type": "debug",
        "z": "7d74cd6f6f7ecb5a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 740,
        "wires": []
    },
    {
        "id": "0ee0842111580c29",
        "type": "switch",
        "z": "7d74cd6f6f7ecb5a",
        "name": "ChkMessageType",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^00 0f",
                "vt": "str",
                "case": true
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 240,
        "wires": [
            [
                "09f72d26dda3b21e",
                "fc84d73eee404e58"
            ],
            [
                "4c1714cb6731bf34"
            ]
        ]
    },
    {
        "id": "f5513bc66547781e",
        "type": "debug",
        "z": "7d74cd6f6f7ecb5a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 300,
        "wires": []
    },
    {
        "id": "841912e2a540ad78",
        "type": "function",
        "z": "7d74cd6f6f7ecb5a",
        "name": "IMEI RESPONSE",
        "func": "msg.payload = Buffer.from([1]);\nmsg[\"host\"] = msg.ip;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 220,
        "wires": [
            [
                "511be3667fd6968b",
                "b1798d56c756fb34"
            ]
        ]
    },
    {
        "id": "261667b14e5b5c18",
        "type": "switch",
        "z": "7d74cd6f6f7ecb5a",
        "name": "Check If C8YID found",
        "property": "C8YiD",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1040,
        "y": 780,
        "wires": [
            [
                "974a44c6905f6fb5"
            ]
        ]
    },
    {
        "id": "439af54f3c8dcb68",
        "type": "function",
        "z": "7d74cd6f6f7ecb5a",
        "name": "Buffer2HexPadded",
        "func": "// Creation of a function to get the Hex Value from a message\nfunction* hexFormatValues(buffer) {\n  for (let x of buffer) {\n    const hex = x.toString(16)\n    yield hex.padStart(2, '0')\n  }\n}\n\n// Variable declaration for my loop\nvar string = \"\"\nconst buf = Buffer.from(msg.payload)\n\n// Concatenation of the buffer in a string \nfor (let hex of hexFormatValues(buf)) {\n  string = string + hex +\" \" //add a space in each byte for easy distinction and splitting\n} \n\nmsg.payload = string.trim();\nmsg.ip = msg.ip.toString().replace(\"::ffff:\",\"\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 180,
        "wires": [
            [
                "0ee0842111580c29",
                "0ff0a59f79cca7a6"
            ]
        ]
    },
    {
        "id": "a6746990f5b06d48",
        "type": "inject",
        "z": "7d74cd6f6f7ecb5a",
        "name": "",
        "props": [
            {
                "p": "payloadOLD",
                "v": "00 00 00 00 00 00 00 dd 08 02 00 00 01 81 16 2b ef 38 00 ff 36 ef 9b 1e a1 29 0b 00 85 01 4d 0d 00 00 00 16 07 ef 00 f0 00 50 04 15 05 c8 00 45 01 71 63 09 b5 00 0c b6 00 08 42 30 a1 18 00 00 ce 60 04 43 10 12 44 00 00 0d 00 00 0f 00 00 04 f1 00 00 5b 77 c7 00 00 00 00 10 00 00 2a 44 0c 00 00 00 00 02 0b 00 00 00 02 15 0b cf 9c 0e 00 00 00 00 7e 84 d9 70 00 00 01 81 16 2c 64 68 00 ff 36 ef 9b 1e a1 29 0b 00 85 01 4d 0b 00 00 00 16 07 ef 00 f0 00 50 04 15 05 c8 00 45 01 71 63 09 b5 00 0b b6 00 08 42 30 a2 18 00 00 ce 60 04 43 10 12 44 00 00 0d 00 00 0f 00 00 04 f1 00 00 5b 77 c7 00 00 00 00 10 00 00 2a 44 0c 00 00 00 00 02 0b 00 00 00 02 15 0b cf 9c 0e 00 00 00 00 7e 84 d9 70 02 00 00 d6 9c",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "00 00 00 00 00 00 00 ca 08 03 00 00 01 83 33 9a e6 63 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f7 0e 08 f7 06 ef 00 f0 00 15 05 45 02 71 31 f6 00 fc 00 04 42 30 63 18 00 00 43 0d df 44 00 8a 00 02 0b 00 00 00 02 15 0b cf 9c 0e 00 00 00 00 7e 84 d9 70 00 00 01 83 33 a4 54 73 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f7 0e 08 f7 06 ef 00 f0 01 15 04 45 02 71 3f f6 00 fc 00 04 42 30 63 18 00 00 43 0e 80 44 00 8a 00 02 0b 00 00 00 02 15 0b cf 9c 0e 00 00 00 00 7e 84 d9 70 00 00 01 83 9e e0 47 50 00 ff 36 f5 45 1e a1 23 d5 00 00 00 00 00 00 00 f0 07 04 ef 00 f0 01 45 03 71 3c 03 42 30 e6 43 0e 5d 44 00 00 00 00 03 00 00 c4 7e",
        "payloadType": "str",
        "x": 250,
        "y": 240,
        "wires": [
            [
                "0ee0842111580c29"
            ]
        ]
    },
    {
        "id": "09f72d26dda3b21e",
        "type": "debug",
        "z": "7d74cd6f6f7ecb5a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 180,
        "wires": []
    },
    {
        "id": "fc84d73eee404e58",
        "type": "function",
        "z": "7d74cd6f6f7ecb5a",
        "name": "DecodeIMEI",
        "func": "var a = msg.payload.split(\" \"),i;\nvar b = [];\n\nb=a.splice(2).join(\"\").split(\"\");\nfor (i = 0; i < b.length; i++) {\n    b.splice(i,1);\n}\n\n\nvar TheSessionID=msg._session.id;\nvar TheIMEI = b.join(\"\");\nif(TheSessionID.trim()===\"\")\n    return {payload:\"no Session id specified\"}\nelse if(TheIMEI.trim()===\"\")\n    return {payload:\"no imei specified\"}\nelse{\n      \n    var TheSessionIDsList={};\n    msg.IMEI = TheIMEI;\n    try{\n        TheSessionIDsList=global.get(\"TCPSessions\");\n    }catch(e){\n        TheSessionIDsList={\"firstKey\":\"firstVal\"}\n        global.set(\"TCPSessions\",TheSessionIDsList)\n    }\n    \n    if(TheSessionIDsList===undefined || TheSessionIDsList===null)\n        TheSessionIDsList={\"FirstEntry\":\"FirstEntry\"}\n    else{\n        var c=0;\n        Object.keys(TheSessionIDsList).forEach(function(key){\n            c++;\n            if (TheSessionIDsList[key].trim() === TheIMEI.trim()) {\n                msg[\"DeletedKey\"] = key;\n                msg[\"DeletedVal\"] = TheSessionIDsList[key];\n                delete TheSessionIDsList[key];\n            }\n        });\n    }\n\n    TheSessionIDsList[String(TheSessionID)]=TheIMEI;\n\n    global.set(\"TCPSessions\",TheSessionIDsList);\n\n    msg.payload = TheSessionIDsList;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 220,
        "wires": [
            [
                "841912e2a540ad78"
            ]
        ]
    },
    {
        "id": "e11983a3b673af9e",
        "type": "debug",
        "z": "7d74cd6f6f7ecb5a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 720,
        "wires": []
    },
    {
        "id": "974a44c6905f6fb5",
        "type": "function",
        "z": "7d74cd6f6f7ecb5a",
        "name": "parse data",
        "func": "let AVL = msg.AVLDecodedData;\n\nlet MeasurementsREST = {\"measurements\": []}\nlet LocationsRESTs = []\n\nfor(let b=1;b<=parseInt(AVL[\"RecordsCount\"]);b++){\n    let GNSS=0;\n    let MR = {type:\"payload\",time:AVL[\"D\"+b+\"_Timestamp\"],\"source\": {\"id\":msg.C8YiD },\"pl\":{}}\n\n    if(!isBadNo(AVL[\"D\"+b+\"_GPS_Speed\"])) MR[\"pl\"][\"Speed\"]={\"value\":AVL[\"D\"+b+\"_GPS_Speed\"],\"unit\":\"km/h\"};\n    if(!isBadNo(AVL[\"D\"+b+\"_GPS_Satellites\"])) MR[\"pl\"][\"Satellites\"]={\"value\":AVL[\"D\"+b+\"_GPS_Satellites\"],\"unit\": \"Count\" } \n    if(!isBadNo(AVL[\"D\"+b+\"_Ignition\"])) MR[\"pl\"][\"Ignition\"]={\"value\":AVL[\"D\"+b+\"_Ignition\"],\"unit\": \"State\" } \n    if(!isBadNo(AVL[\"D\"+b+\"_Movement\"])) MR[\"pl\"][\"Movement\"]={\"value\":AVL[\"D\"+b+\"_Movement\"],\"unit\": \"State\" } \n    if(!isBadNo(AVL[\"D\"+b+\"_UnplugDetection\"])) MR[\"pl\"][\"UnplugDetection\"]={\"value\":AVL[\"D\"+b+\"_UnplugDetection\"],\"unit\": \"State\" } \n    if(!isBadNo(AVL[\"D\"+b+\"_TowDetection\"])) MR[\"pl\"][\"TowDetection\"]={\"value\":AVL[\"D\"+b+\"_TowDetection\"],\"unit\": \"State\" } \n    if(!isBadNo(AVL[\"D\"+b+\"_GSMSignal\"])) MR[\"pl\"][\"GSMSignal\"]={\"value\":AVL[\"D\"+b+\"_GSMSignal\"],\"unit\": \"bars\" } \n    if(!isBadNo(AVL[\"D\"+b+\"_Battery\"])) MR[\"pl\"][\"Battery\"]={\"value\":AVL[\"D\"+b+\"_Battery\"],\"unit\": \"%\" } \n    if(!isBadNo(AVL[\"D\"+b+\"_BatteryVoltage\"])) MR[\"pl\"][\"BatteryVoltage\"]={\"value\":AVL[\"D\"+b+\"_BatteryVoltage\"],\"unit\": \"V\" } \n    if(!isBadNo(AVL[\"D\"+b+\"_BatteryCurrent\"])) MR[\"pl\"][\"BatteryCurrent\"]={\"value\":AVL[\"D\"+b+\"_BatteryCurrent\"],\"unit\": \"A\" } \n    if(!isBadNo(AVL[\"D\"+b+\"_ExternalVoltage\"])) MR[\"pl\"][\"ExternalVoltage\"]={\"value\":AVL[\"D\"+b+\"_ExternalVoltage\"],\"unit\": \"V\" } \n    if(!isBadNo(AVL[\"D\"+b+\"_GNSS_Status\"])) MR[\"pl\"][\"GNSS_Status\"]={\"value\":AVL[\"D\"+b+\"_GNSS_Status\"],\"unit\": \"Status\" } \n    GNSS=AVL[\"D\"+b+\"_GNSS_Status\"];\n    \n    if(isBadNo(AVL[\"D\"+b+\"_FutureDate\"]))AVL[\"D\"+b+\"_FutureDate\"]=0;\n    MR[\"pl\"][\"FutureDate\"]={\"value\":AVL[\"D\"+b+\"_FutureDate\"],\"unit\": \"State\" }\n    \n    MeasurementsREST.measurements.push(MR);\n\n\n\n    //only log locationif  GNSS FIX was recorded and satellites were higher than 1 for accuracy and if the timestamp was not in future\n    //0 - GNSS OFF        1 – GNSS ON with fix      2 - GNSS ON without fix      3 - GNSS sleep\n    if(GNSS===1 && parseInt(AVL[\"D\"+b+\"_GPS_Satellites\"])>=1 && AVL[\"D\"+b+\"_FutureDate\"]!==true &&\n            !isBadNo(AVL[\"D\"+b+\"_GPS_Lat\"]) && !isBadNo(AVL[\"D\"+b+\"_GPS_Long\"]) && !isBadNo(AVL[\"D\"+b+\"_GPS_Alt\"])){\n\n            LocationsRESTs.push(\n                {\n                    \"type\": \"c8y_LocationUpdate\",\"time\": AVL[\"D\"+b+\"_Timestamp\"], \"text\": \"Location updated\", \"source\": {\"id\":msg.C8YiD},\n                    \"c8y_Position\": {\"alt\": 1, \"lat\": AVL[\"D\"+b+\"_GPS_Lat\"], \"lng\": AVL[\"D\"+b+\"_GPS_Long\"]}\n                }\n            )\n    }\n    \n}\n\n\nmsg.MeasurementsREST=MeasurementsREST;\nmsg.LocationsRESTs=LocationsRESTs;\nreturn msg;\n\nfunction isBadNo(TheNo) {  \n    if(TheNo===undefined || TheNo===null || isNaN(TheNo))\n        return true;\n    else \n        return false;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 820,
        "wires": [
            [
                "77e879868e4e2b62",
                "e7c3bd504b9a1d3c",
                "26d97204d2950744",
                "4c67ad140758d9dd"
            ]
        ]
    },
    {
        "id": "39e3ea4e4a9e33fd",
        "type": "tcp in",
        "z": "7d74cd6f6f7ecb5a",
        "name": "",
        "server": "server",
        "host": "",
        "port": "4324",
        "datamode": "stream",
        "datatype": "buffer",
        "newline": ",",
        "topic": "",
        "base64": false,
        "tls": "",
        "x": 120,
        "y": 120,
        "wires": [
            [
                "b4be577280d9c209",
                "439af54f3c8dcb68"
            ]
        ]
    },
    {
        "id": "0ff0a59f79cca7a6",
        "type": "debug",
        "z": "7d74cd6f6f7ecb5a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 790,
        "y": 120,
        "wires": []
    },
    {
        "id": "1e697e1c7097aa87",
        "type": "inject",
        "z": "7d74cd6f6f7ecb5a",
        "name": "",
        "props": [
            {
                "p": "payloadOLD",
                "v": "00 00 00 00 00 00 00 dd 08 02 00 00 01 81 16 2b ef 38 00 ff 36 ef 9b 1e a1 29 0b 00 85 01 4d 0d 00 00 00 16 07 ef 00 f0 00 50 04 15 05 c8 00 45 01 71 63 09 b5 00 0c b6 00 08 42 30 a1 18 00 00 ce 60 04 43 10 12 44 00 00 0d 00 00 0f 00 00 04 f1 00 00 5b 77 c7 00 00 00 00 10 00 00 2a 44 0c 00 00 00 00 02 0b 00 00 00 02 15 0b cf 9c 0e 00 00 00 00 7e 84 d9 70 00 00 01 81 16 2c 64 68 00 ff 36 ef 9b 1e a1 29 0b 00 85 01 4d 0b 00 00 00 16 07 ef 00 f0 00 50 04 15 05 c8 00 45 01 71 63 09 b5 00 0b b6 00 08 42 30 a2 18 00 00 ce 60 04 43 10 12 44 00 00 0d 00 00 0f 00 00 04 f1 00 00 5b 77 c7 00 00 00 00 10 00 00 2a 44 0c 00 00 00 00 02 0b 00 00 00 02 15 0b cf 9c 0e 00 00 00 00 7e 84 d9 70 02 00 00 d6 9c",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload"
            },
            {
                "p": "ip",
                "v": "192.168.2.1",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "00 0f 32 36 36 39 30 37 30 35 33 34 33 30 30 39 35",
        "payloadType": "str",
        "x": 430,
        "y": 320,
        "wires": [
            [
                "fc84d73eee404e58"
            ]
        ]
    },
    {
        "id": "77e879868e4e2b62",
        "type": "function",
        "z": "7d74cd6f6f7ecb5a",
        "name": "MeasurementsFlow",
        "func": "let K = msg.MeasurementsREST;\n\n// msg={}\n\nmsg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.url=\"\";\n\nmsg.payload=K;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 900,
        "wires": [
            [
                "2b9771b2fa310d59",
                "4ff8fcaa7bf70de0"
            ]
        ]
    },
    {
        "id": "e7c3bd504b9a1d3c",
        "type": "function",
        "z": "7d74cd6f6f7ecb5a",
        "name": "LocationsFlow",
        "func": "let K = msg.LocationsRESTs;\n// msg={};\nmsg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.event+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.event+json';\nmsg.url=\"\";\nmsg.payload = K;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 900,
        "wires": [
            [
                "443196e1dd1bf3bc",
                "dd6d9bd2349f7b27"
            ]
        ]
    },
    {
        "id": "26d97204d2950744",
        "type": "debug",
        "z": "7d74cd6f6f7ecb5a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 800,
        "wires": []
    },
    {
        "id": "b4be577280d9c209",
        "type": "debug",
        "z": "7d74cd6f6f7ecb5a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 100,
        "wires": []
    },
    {
        "id": "2b9771b2fa310d59",
        "type": "http request",
        "z": "7d74cd6f6f7ecb5a",
        "name": "Measurements",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://demo-solutions.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1200,
        "y": 940,
        "wires": [
            [
                "6e6cae02de02ec37"
            ]
        ]
    },
    {
        "id": "443196e1dd1bf3bc",
        "type": "split",
        "z": "7d74cd6f6f7ecb5a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 970,
        "y": 940,
        "wires": [
            [
                "c6ba578097366c7f"
            ]
        ]
    },
    {
        "id": "6e6cae02de02ec37",
        "type": "debug",
        "z": "7d74cd6f6f7ecb5a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 940,
        "wires": []
    },
    {
        "id": "c6ba578097366c7f",
        "type": "http request",
        "z": "7d74cd6f6f7ecb5a",
        "name": "LocationEvent",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://demo-solutions.emea.cumulocity.com/event/events",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 940,
        "y": 980,
        "wires": [
            [
                "9f9708ea70bc230a"
            ]
        ]
    },
    {
        "id": "9f9708ea70bc230a",
        "type": "debug",
        "z": "7d74cd6f6f7ecb5a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 980,
        "wires": []
    },
    {
        "id": "4ff8fcaa7bf70de0",
        "type": "debug",
        "z": "7d74cd6f6f7ecb5a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 900,
        "wires": []
    },
    {
        "id": "dd6d9bd2349f7b27",
        "type": "debug",
        "z": "7d74cd6f6f7ecb5a",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 1000,
        "wires": []
    },
    {
        "id": "0ee52f5202116737",
        "type": "function",
        "z": "7d74cd6f6f7ecb5a",
        "name": "Fleet Sol - Ref Lorry 101981845",
        "func": "msg.C8YiD=\"101981845\";\nmsg.payload.source.id=msg.C8YiD;\nreturn msg;\n    ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1240,
        "wires": [
            [
                "251147056f51651c"
            ]
        ]
    },
    {
        "id": "4c67ad140758d9dd",
        "type": "function",
        "z": "7d74cd6f6f7ecb5a",
        "name": "Headers (cloning into fleet n cargo)",
        "func": "let K = msg.LocationsRESTs;\n// msg={};\nmsg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.event+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.event+json';\nmsg.url=\"\";\nmsg.payload = K;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 920,
        "wires": [
            [
                "7f0838ca7c2123e0"
            ]
        ]
    },
    {
        "id": "7f0838ca7c2123e0",
        "type": "split",
        "z": "7d74cd6f6f7ecb5a",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 570,
        "y": 1000,
        "wires": [
            [
                "2b53cca934f71f3c"
            ]
        ]
    },
    {
        "id": "251147056f51651c",
        "type": "http request",
        "z": "7d74cd6f6f7ecb5a",
        "name": "LocationEvent",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://demo-solutions.emea.cumulocity.com/event/events",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1100,
        "y": 1300,
        "wires": [
            [
                "9a1896e422b03ee3"
            ]
        ]
    },
    {
        "id": "9a1896e422b03ee3",
        "type": "debug",
        "z": "7d74cd6f6f7ecb5a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 1300,
        "wires": []
    },
    {
        "id": "07b15e1ff96d33eb",
        "type": "function",
        "z": "7d74cd6f6f7ecb5a",
        "name": "Fleet Sol - Truck 001 144669949",
        "func": "\n    msg.C8YiD=\"144669949\";\nmsg.payload.source.id=msg.C8YiD;\n return msg;   ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 1200,
        "wires": [
            [
                "251147056f51651c"
            ]
        ]
    },
    {
        "id": "fde485ff8b681505",
        "type": "function",
        "z": "7d74cd6f6f7ecb5a",
        "name": "Cargo Sol - UF",
        "func": "msg.C8YiD=\"157\";\nmsg.payload.source.id=msg.C8YiD;\nreturn msg;    ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1280,
        "wires": [
            [
                "251147056f51651c"
            ]
        ]
    },
    {
        "id": "550f85b525e26a22",
        "type": "function",
        "z": "7d74cd6f6f7ecb5a",
        "name": "Cargo Sol - FI1",
        "func": "\n    msg.C8YiD=\"107803\";\nmsg.payload.source.id=msg.C8YiD;\nreturn msg;    ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1320,
        "wires": [
            [
                "251147056f51651c"
            ]
        ]
    },
    {
        "id": "d9de8eb63c579956",
        "type": "function",
        "z": "7d74cd6f6f7ecb5a",
        "name": "Cargo Sol - FI2",
        "func": "\n    msg.C8YiD=\"154233\";\nmsg.payload.source.id=msg.C8YiD;\nreturn msg;    ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1360,
        "wires": [
            [
                "251147056f51651c"
            ]
        ]
    },
    {
        "id": "104e5d211dc54e24",
        "type": "function",
        "z": "7d74cd6f6f7ecb5a",
        "name": "Cargo Sol - TI2",
        "func": "\n    msg.C8YiD=\"183280455\";\nmsg.payload.source.id=msg.C8YiD;\nreturn msg;    ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 1400,
        "wires": [
            [
                "251147056f51651c"
            ]
        ]
    },
    {
        "id": "2b53cca934f71f3c",
        "type": "switch",
        "z": "7d74cd6f6f7ecb5a",
        "name": "",
        "property": "C8YiD",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "126769726",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "122285724",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "125112049",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "126813293",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "127228968",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 630,
        "y": 1080,
        "wires": [
            [
                "0ee52f5202116737",
                "fde485ff8b681505"
            ],
            [
                "07b15e1ff96d33eb",
                "550f85b525e26a22"
            ],
            [
                "d9de8eb63c579956"
            ],
            [
                "104e5d211dc54e24"
            ],
            []
        ]
    },
    {
        "id": "3e1f2a5161fb3699",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": "Buffer2HexPadded",
        "func": "// Creation of a function to get the Hex Value from a message\nfunction* hexFormatValues(buffer) {\n  for (let x of buffer) {\n    const hex = x.toString(16)\n    yield hex.padStart(2, '0')\n  }\n}\n\n// Variable declaration for my loop\nvar string = \"\"\nconst buf = Buffer.from(msg.payload)\n\n// Concatenation of the buffer in a string \nfor (let hex of hexFormatValues(buf)) {\n  string = string + hex +\" \" //add a space in each byte for easy distinction and splitting\n} \n\nmsg.payload = string.trim();\nmsg.ip = msg.ip.toString().replace(\"::ffff:\",\"\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 240,
        "wires": [
            [
                "6ed470bac817c8b2",
                "03a3681f7105039b"
            ]
        ]
    },
    {
        "id": "bf85f1583d8718a9",
        "type": "tcp in",
        "z": "f05df52a173b55f6",
        "name": "",
        "server": "server",
        "host": "",
        "port": "4324",
        "datamode": "stream",
        "datatype": "buffer",
        "newline": ",",
        "topic": "",
        "base64": false,
        "tls": "",
        "x": 100,
        "y": 180,
        "wires": [
            [
                "0b9532b3ff9f5030",
                "3e1f2a5161fb3699"
            ]
        ]
    },
    {
        "id": "6ed470bac817c8b2",
        "type": "switch",
        "z": "f05df52a173b55f6",
        "name": "ChkMessageType",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^00 0f",
                "vt": "str",
                "case": true
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 390,
        "y": 320,
        "wires": [
            [
                "0309015e0d7d5df6",
                "02598cd881e51221"
            ],
            [
                "b24f9917893e0a6f"
            ]
        ]
    },
    {
        "id": "03a3681f7105039b",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 180,
        "wires": []
    },
    {
        "id": "0b9532b3ff9f5030",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 160,
        "wires": []
    },
    {
        "id": "e434bef396b4b7b1",
        "type": "inject",
        "z": "f05df52a173b55f6",
        "name": "",
        "props": [
            {
                "p": "payloadOLD",
                "v": "00 00 00 00 00 00 00 dd 08 02 00 00 01 81 16 2b ef 38 00 ff 36 ef 9b 1e a1 29 0b 00 85 01 4d 0d 00 00 00 16 07 ef 00 f0 00 50 04 15 05 c8 00 45 01 71 63 09 b5 00 0c b6 00 08 42 30 a1 18 00 00 ce 60 04 43 10 12 44 00 00 0d 00 00 0f 00 00 04 f1 00 00 5b 77 c7 00 00 00 00 10 00 00 2a 44 0c 00 00 00 00 02 0b 00 00 00 02 15 0b cf 9c 0e 00 00 00 00 7e 84 d9 70 00 00 01 81 16 2c 64 68 00 ff 36 ef 9b 1e a1 29 0b 00 85 01 4d 0b 00 00 00 16 07 ef 00 f0 00 50 04 15 05 c8 00 45 01 71 63 09 b5 00 0b b6 00 08 42 30 a2 18 00 00 ce 60 04 43 10 12 44 00 00 0d 00 00 0f 00 00 04 f1 00 00 5b 77 c7 00 00 00 00 10 00 00 2a 44 0c 00 00 00 00 02 0b 00 00 00 02 15 0b cf 9c 0e 00 00 00 00 7e 84 d9 70 02 00 00 d6 9c",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "00 00 00 00 00 00 00 ca 08 03 00 00 01 83 33 9a e6 63 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f7 0e 08 f7 06 ef 00 f0 00 15 05 45 02 71 31 f6 00 fc 00 04 42 30 63 18 00 00 43 0d df 44 00 8a 00 02 0b 00 00 00 02 15 0b cf 9c 0e 00 00 00 00 7e 84 d9 70 00 00 01 83 33 a4 54 73 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 f7 0e 08 f7 06 ef 00 f0 01 15 04 45 02 71 3f f6 00 fc 00 04 42 30 63 18 00 00 43 0e 80 44 00 8a 00 02 0b 00 00 00 02 15 0b cf 9c 0e 00 00 00 00 7e 84 d9 70 00 00 01 83 9e e0 47 50 00 ff 36 f5 45 1e a1 23 d5 00 00 00 00 00 00 00 f0 07 04 ef 00 f0 01 45 03 71 3c 03 42 30 e6 43 0e 5d 44 00 00 00 00 03 00 00 c4 7e",
        "payloadType": "str",
        "x": 150,
        "y": 320,
        "wires": [
            [
                "6ed470bac817c8b2"
            ]
        ]
    },
    {
        "id": "02598cd881e51221",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": "DecodeIMEI",
        "func": "var a = msg.payload.split(\" \"),i;\nvar b = [];\n\nb=a.splice(2).join(\"\").split(\"\");\nfor (i = 0; i < b.length; i++) {\n    b.splice(i,1);\n}\n\n\nvar TheSessionID=msg._session.id;\nvar TheIMEI = b.join(\"\");\nif(TheSessionID.trim()===\"\")\n    return {payload:\"no Session id specified\"}\nelse if(TheIMEI.trim()===\"\")\n    return {payload:\"no imei specified\"}\nelse{\n      \n    var TheSessionIDsList={};\n    msg.IMEI = TheIMEI;\n    try{\n        TheSessionIDsList=global.get(\"TCPSessions\");\n    }catch(e){\n        TheSessionIDsList={\"firstKey\":\"firstVal\"}\n        global.set(\"TCPSessions\",TheSessionIDsList)\n    }\n    \n    if(TheSessionIDsList===undefined || TheSessionIDsList===null)\n        TheSessionIDsList={\"FirstEntry\":\"FirstEntry\"}\n    else{\n        var c=0;\n        Object.keys(TheSessionIDsList).forEach(function(key){\n            c++;\n            if (TheSessionIDsList[key].trim() === TheIMEI.trim()) {\n                msg[\"DeletedKey\"] = key;\n                msg[\"DeletedVal\"] = TheSessionIDsList[key];\n                delete TheSessionIDsList[key];\n            }\n        });\n    }\n\n    TheSessionIDsList[String(TheSessionID)]=TheIMEI;\n\n    global.set(\"TCPSessions\",TheSessionIDsList);\n\n    msg.payload = TheSessionIDsList;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 380,
        "wires": [
            [
                "1836084807a4241a"
            ]
        ]
    },
    {
        "id": "0309015e0d7d5df6",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 300,
        "wires": []
    },
    {
        "id": "26be4d6442f5211d",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": "DecodeAVLPacket",
        "func": "function ToSignedInt32(x) {\n        var uint32 = x//ToUint32(x);\n        if (uint32 >= Math.pow(2, 31)) {\n            return uint32 - Math.pow(2, 32)\n        } else {\n            return uint32;\n        }\n    }\n \nfunction ToSignedInt(a){ \n    if ((a & 0x8000) > 0) \n        a =  (a - 0x10000);\n    return a;\n}\n    \nvar Raw = msg.payload;\nvar decoded = {};\n\nmsg[\"Alert\"]=\"NONE\";\nmsg[\"AlertDetails\"]=\"\";\nmsg[\"AlertMsg\"]=\"\";\n\n//=================================\n//these are decoding parameters\n//the incoming string will be a collection of two chars + space each represnting a byte \n//first 4 should be zeros in AVL packet \nconst AVLSignature=/^00 00 00 00/\nconst Len_i = 4, Len_Size = 4;//assuming zero is first element\nconst Codec_i = 8, Codec_Size = 1;\nconst Recs_i = 9, Recs_Size = 1;\nconst Data_i = 10 ;\nconst D_TimeStamp_Offset = 0, D_TimeStamp_Size = 8;\nconst D_Priority_Offset = 8, D_Priority_Size = 1;\nconst D_GPS_Long_Offset = 9, D_GPS_Long_Size = 4;\nconst D_GPS_Lat_Offset = 13, D_GPS_Lat_Size = 4;\nconst D_GPS_Alt_Offset = 17, D_GPS_Alt_Size = 2;\nconst D_GPS_Angle_Offset = 19, D_GPS_Angle_Size = 2;\nconst D_GPS_Satellites_Offset = 21, D_GPS_Satellites_Size = 1;\nconst D_GPS_Speed_Offset = 22, D_GPS_Speed_Size = 2;\nconst D_IO_ID_Offset = 24, D_IO_ID_Size = 1;\nconst D_IO_Count_Offset = 25, D_IO_Count_Size = 1;\nconst D_IO_1B_Offset = 26, D_IO_Counts_Size = 1;\n\ndecoded[\"ICCID\"]=\"\";\n\n//=================\n//check if message starts with its signature 4 zero bytes\nif(Raw.match(AVLSignature)){\n    //skip first 4 zero bytes\n    var AVL_Bytes_Array = Raw.split(\" \");\n    decoded[\"PacketLength\"]=parseInt(AVL_Bytes_Array.slice(Len_i,Len_i+Len_Size).join(\"\"),16);\n\tdecoded[\"Codec\"]=parseInt(AVL_Bytes_Array.slice(Codec_i,Codec_i+Codec_Size).join(\"\"),16);\n\tvar Recs =parseInt(AVL_Bytes_Array.slice(Recs_i,Recs_i+Recs_Size).join(\"\"),16);\n    decoded[\"RecordsCount\"] = Recs;\n    msg[\"RecordsCount\"]=Recs;\n\n    var DataOffsetRunningIndex=Data_i;\n\tfor(var DataRecs_i=1;DataRecs_i<=Recs;DataRecs_i++){\n\t    var TimeStamp = parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_TimeStamp_Size).join(\"\"),16)\n        var TheCorrectedTimeStamp = new Date();\n        decoded[\"D\"+(DataRecs_i)+\"_FutureDate\"]= 0;\n        try{  \n            TheCorrectedTimeStamp = new Date(TimeStamp);\n            TheCorrectedTimeStamp_Str = new Date(TimeStamp).toISOString();\n            var NOW = new Date();\n            if(TheCorrectedTimeStamp>NOW){\n                msg[\"Alert\"]=msg[\"Alert\"] + \" ||| AVLDecoding Timestamp Issue\";\n                msg[\"AlertDetail\"]=msg[\"AlertDetails\"] + \" ||| Timestamp of record \" + DataRecs_i + \": \"+TheCorrectedTimeStamp_Str+  \" is in future as of now: \" +NOW.toISOString()  ;\n                msg[\"AlertMsg\"]=msg[\"AlertMsg\"] + \" ||| \" + JSON.stringify(msg);\n                msg[\"OddDate\"] = true;\n\n                TheCorrectedTimeStamp = NOW;\n                TheCorrectedTimeStamp_Str = NOW.toISOString();\n                decoded[\"D\"+(DataRecs_i)+\"_FutureDate\"]= 1;\n                //break;//instead of skipping the whole record when date is in incorrectly in future we will only skip location updates\n            }else if((NOW - TheCorrectedTimeStamp) > (1000 * 70 * 60 * 12.1 )){ //currently devices are set to report every 12 hours (with 2 readings of 6 hours_). 12.1 so we are a little greater than exact 12 hours\n                //TheCorrectedTimeStamp= NOW.toISOString();\n               \n                //log then DONT skip the record as its just old.previously we were skipping the records\n                msg[\"Alert\"]=msg[\"Alert\"] + \" ||| AVLDecoding Timestamp Issue\";\n                msg[\"AlertDetail\"]=msg[\"AlertDetails\"] + \" ||| Timestamp of record \" + DataRecs_i + \":\"+ TheCorrectedTimeStamp_Str+ \"  is older than 65 mins of now :\" +  NOW.toISOString();\n                msg[\"AlertMsg\"]=msg[\"AlertMsg\"] + \" ||| \" + JSON.stringify(msg);\n            //   break; <<OLD\n                msg[\"OddDate\"] = true;\n            }\n        }catch(e){\n            msg[\"Alert\"]=msg[\"Alert\"] + \" ||| AVLDecoding Timestamp Error\";\n            msg[\"AlertDetail\"]=msg[\"AlertDetails\"] + \" ||| error converting timestamp of record \" + DataRecs_i + \"  raw timestamp:\" +TimeStamp  ;\n            msg[\"AlertMsg\"]=msg[\"AlertMsg\"] + \" ||| \" + JSON.stringify(msg);\n            msg[\"OddDate\"] = true;\n            break;\n        }\n\n        try{\n            TheCorrectedTimeStamp_Str=TheCorrectedTimeStamp_Str.replace(\".000Z\",\".000+00:00\")\n        }catch(e){}\n\n\t    //DataOffsetRunningIndex = DataOffsetRunningIndex+D_TimeStamp_Offset;\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_i_ts\"]=DataOffsetRunningIndex\n\t    decoded[\"D\"+(DataRecs_i)+\"_Timestamp\"]=TheCorrectedTimeStamp_Str\n\t   \tdecoded[\"D\"+(DataRecs_i)+\"_Timestamp_R\"]= TimeStamp\n\t    DataOffsetRunningIndex+=D_TimeStamp_Size;\t\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_Priority\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_Priority_Size).join(\"\"),16)\n\t    DataOffsetRunningIndex+=D_Priority_Size;\t\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_GPS_Long_us\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_GPS_Long_Size).join(\"\"),16)\n        decoded[\"D\"+(DataRecs_i)+\"_GPS_Long\"]=ToSignedInt32(parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_GPS_Long_Size).join(\"\"),16))/10000000\n\t    DataOffsetRunningIndex+=D_GPS_Long_Size;\t\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_GPS_Lat_us\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_GPS_Lat_Size).join(\"\"),16)\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_GPS_Lat\"]=ToSignedInt32(parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_GPS_Lat_Size).join(\"\"),16))/10000000\n\t\tDataOffsetRunningIndex+=D_GPS_Lat_Size;\t\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_GPS_Alt\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_GPS_Alt_Size).join(\"\"),16)\n\t    DataOffsetRunningIndex+=D_GPS_Alt_Size;\t\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_GPS_Angle_us\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_GPS_Angle_Size).join(\"\"),16)\n\t    decoded[\"D\"+(DataRecs_i)+\"_GPS_Angle\"]=ToSignedInt32(parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_GPS_Angle_Size).join(\"\"),16))\n\t    DataOffsetRunningIndex+=D_GPS_Angle_Size;\t\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_GPS_Satellites\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_GPS_Satellites_Size).join(\"\"),16)\n\t    DataOffsetRunningIndex+=D_GPS_Satellites_Size;\t\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_GPS_Speed\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_GPS_Speed_Size).join(\"\"),16)\n\t    DataOffsetRunningIndex+=D_GPS_Speed_Size;\t\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_IO_EventID\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_IO_ID_Size).join(\"\"),16)\n\t    DataOffsetRunningIndex+=D_IO_ID_Size;\t\n\t\tvar IORecordsCount = parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_IO_Count_Size).join(\"\"),16)\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_IO_Records\"]=IORecordsCount\n\t    DataOffsetRunningIndex+=D_IO_Counts_Size;\t\n\t    var IORecordsCount_1B = parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_IO_Counts_Size).join(\"\"),16)\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_IO_1Byte_Records\"]=IORecordsCount_1B\n\t    DataOffsetRunningIndex+=D_IO_Counts_Size;\t\n\t    \n\t\tfor(var IORecs_1b_i=1;IORecs_1b_i<=IORecordsCount_1B;IORecs_1b_i++){\n\t\t\tdecoded[\"D\"+DataRecs_i+\"_IO_1Byte_\"+IORecs_1b_i+\"_ID\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1),16)\n\t\t\tDataOffsetRunningIndex+=1;\n\t\t\tdecoded[\"D\"+DataRecs_i+\"_IO_1Byte_\"+IORecs_1b_i+\"_Val\"]=(parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1),16))\n\t\t\tDataOffsetRunningIndex+=1;\n\t\t\tswitch(parseInt(decoded[\"D\"+DataRecs_i+\"_IO_1Byte_\"+IORecs_1b_i+\"_ID\"])) {\n                case 239:\n                    decoded[\"D\"+(DataRecs_i)+\"_Ignition\"] = decoded[\"D\"+DataRecs_i+\"_IO_1Byte_\"+IORecs_1b_i+\"_Val\"]\n                    break;\n                case 240:\n                    decoded[\"D\"+(DataRecs_i)+\"_Movement\"] = decoded[\"D\"+DataRecs_i+\"_IO_1Byte_\"+IORecs_1b_i+\"_Val\"]\n                    break;\n                case 21:\n                    decoded[\"D\"+(DataRecs_i)+\"_GSMSignal\"] = decoded[\"D\"+DataRecs_i+\"_IO_1Byte_\"+IORecs_1b_i+\"_Val\"]\n                    break;\n                case 113:\n                    decoded[\"D\"+(DataRecs_i)+\"_Battery\"] = decoded[\"D\"+DataRecs_i+\"_IO_1Byte_\"+IORecs_1b_i+\"_Val\"]\n                    break;\n                case 252:\n                    decoded[\"D\"+(DataRecs_i)+\"_UnplugDetection\"] = decoded[\"D\"+DataRecs_i+\"_IO_1Byte_\"+IORecs_1b_i+\"_Val\"]\n                    break;\n                case 246:\n                    decoded[\"D\"+(DataRecs_i)+\"_TowDetection\"] = decoded[\"D\"+DataRecs_i+\"_IO_1Byte_\"+IORecs_1b_i+\"_Val\"]\n                    break;\n                case 69:\n                    decoded[\"D\"+(DataRecs_i)+\"_GNSS_Status\"] = decoded[\"D\"+DataRecs_i+\"_IO_1Byte_\"+IORecs_1b_i+\"_Val\"]\n                    break;\n            }\n\t\t}\n\n\t\tvar IORecordsCount_2B=0,IORecordsCount_4B=0,IORecordsCount_8B=0;\n\t\t//check if io counts is greater then 1byte ios we just parsed. if so we must have 22byte io data too so process it\n\t\tIORecordsCount_2B = parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_IO_Counts_Size).join(\"\"),16)\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_IO_2Byte_Records\"]=IORecordsCount_2B\n\t\tDataOffsetRunningIndex+=D_IO_Counts_Size;\t\n\t\t\n\t\tif(IORecordsCount_2B>0){\n\t\t\tfor(var IORecs_2b_i=1;IORecs_2b_i<=IORecordsCount_2B;IORecs_2b_i++){\n\t\t\t\tdecoded[\"D\"+DataRecs_i+\"_IO_2Byte_\"+IORecs_2b_i+\"_ID\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1),16)\n\t\t\t\tDataOffsetRunningIndex+=1;\n\t\t\t\tdecoded[\"D\"+DataRecs_i+\"_IO_2Byte_\"+IORecs_2b_i+\"_Val\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+2).join(\"\"),16)\n\t\t\t\tDataOffsetRunningIndex+=2;\n    \t\t\tswitch(parseInt(decoded[\"D\"+DataRecs_i+\"_IO_2Byte_\"+IORecs_2b_i+\"_ID\"])) {\n                    case 66:\n                        decoded[\"D\"+(DataRecs_i)+\"_ExternalVoltage\"] = decoded[\"D\"+DataRecs_i+\"_IO_2Byte_\"+IORecs_2b_i+\"_Val\"]*0.001\n                        break;\n                    case 205:\n                        decoded[\"D\"+(DataRecs_i)+\"_CellID\"] = decoded[\"D\"+DataRecs_i+\"_IO_2Byte_\"+IORecs_2b_i+\"_Val\"]\n                        break;\n                    case 67:\n                        decoded[\"D\"+(DataRecs_i)+\"_BatteryVoltage\"] = decoded[\"D\"+DataRecs_i+\"_IO_2Byte_\"+IORecs_2b_i+\"_Val\"]*0.001\n                        break;\n                    case 68:\n                        decoded[\"D\"+(DataRecs_i)+\"_BatteryCurrent\"] = decoded[\"D\"+DataRecs_i+\"_IO_2Byte_\"+IORecs_2b_i+\"_Val\"]*0.001\n                        break;\n                }\n\t\t\t}\n        }   \n        //below is not correct - its realized that 8byte coutn can be there even if 4byte is zero\n\t\t//check if io counts is greater then 1byte + 2byte ios we just parsed. if so we must have 4byte io data too so process it\n\t\tIORecordsCount_4B = parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_IO_Counts_Size).join(\"\"),16)\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_IO_4Byte_Records\"]=IORecordsCount_4B\n\t\tDataOffsetRunningIndex+=D_IO_Counts_Size;\t\n\t\t\n\t\tif(IORecordsCount_4B>0){\n\t\t\tfor(var IORecs_4b_i=1;IORecs_4b_i<=IORecordsCount_4B;IORecs_4b_i++){\n\t\t\t\tdecoded[\"D\"+DataRecs_i+\"_IO_4Byte_\"+IORecs_4b_i+\"_ID\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1),16)\n\t\t\t\tDataOffsetRunningIndex+=1;\n\t\t\t\tdecoded[\"D\"+DataRecs_i+\"_IO_4Byte_\"+IORecs_4b_i+\"_Val\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+4).join(\"\"),16)\n\t\t\t\tDataOffsetRunningIndex+=4;\n\t\t\t}\n\t\t}\n\t\t//check if io counts is greater then 1byte + 2byte +4byte ios we just parsed. if so we must have 8byte io data too so process it\n\t\tIORecordsCount_8B = parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_IO_Counts_Size).join(\"\"),16)\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_IO_8Byte_Records\"]=IORecordsCount_8B\n\t\tDataOffsetRunningIndex+=D_IO_Counts_Size;\t\n\t\tdecoded[\"D\"+(DataRecs_i)+\"_LastIndex\"]=DataOffsetRunningIndex\n\t\tif(IORecordsCount_8B>0){\t\n\t\t\tfor(var IORecs_8b_i=1;IORecs_8b_i<=IORecordsCount_8B;IORecs_8b_i++){\n\t\t\t\tdecoded[\"D\"+DataRecs_i+\"_IO_8Byte_\"+IORecs_8b_i+\"_ID\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1),16)\n\t\t\t\tDataOffsetRunningIndex+=1;\n\t\t\t\tdecoded[\"D\"+DataRecs_i+\"_IO_8Byte_\"+IORecs_8b_i+\"_Val\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+8).join(\"\"),16)\n\t\t\t\tDataOffsetRunningIndex+=8;\n\t\t\t\t\n\t\t\t\ttry{\n    \t\t\t\t//find iccid and populate if it exists\n                \tif(decoded[\"D\"+(DataRecs_i)+\"_IO_8Byte_\"+IORecs_8b_i+\"_ID\"]===14 && \n                \t    decoded[\"D\"+(DataRecs_i)+\"_IO_8Byte_\"+(IORecs_8b_i-1)+\"_ID\"]===11){\n                \t    let ic=decoded[\"D\"+(DataRecs_i)+\"_IO_8Byte_\"+(IORecs_8b_i-1)+\"_Val\"]+\"\"+decoded[\"D\"+(DataRecs_i)+\"_IO_8Byte_\"+IORecs_8b_i+\"_Val\"];\n                        if(ic!==\"\" && ic!==null && ic!==undefined && !isNaN(ic)){\n                            decoded[\"ICCID\"]=ic;\n                            msg[\"ICCID\"]=ic;\n                            msg[\"FoundICCID\"] = true;\n                        }\n                \t}\n\t\t\t\t}catch(e){}\n\t\t\t}\n\t\t}\n    \n\n\t}\n\tdecoded[\"DataCount\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+Recs_Size).join(\"\"),16)\n\tDataOffsetRunningIndex+=Recs_Size;\t\n\tdecoded[\"CRC\"]=parseInt(AVL_Bytes_Array.slice(DataOffsetRunningIndex).join(\"\"),16)\n\t\n}\n\n\n// var TheSessionsList={};\n// var TheIMEI=\"\";\n// try{\n//     TheSessionsList=global.get(\"TCPSessons\");\n//     TheIMEI = TheSessionsList[msg._session.id];\n// }catch(e){}\n\n//msg[\"AVLRawData\"]=Raw\nmsg[\"AVLDecodedData\"]=decoded;\nmsg.payload=\"\";\n// msg[\"IMEI\"]=TheIMEI;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 460,
        "wires": [
            [
                "05035a7d21172b3e",
                "73286bb7664c8cab",
                "c83eb793f3cf0dc3",
                "a6960e5b2457d676"
            ]
        ]
    },
    {
        "id": "9aa0411dbe28ecf0",
        "type": "inject",
        "z": "f05df52a173b55f6",
        "name": "",
        "props": [
            {
                "p": "payloadOLD",
                "v": "00 00 00 00 00 00 00 dd 08 02 00 00 01 81 16 2b ef 38 00 ff 36 ef 9b 1e a1 29 0b 00 85 01 4d 0d 00 00 00 16 07 ef 00 f0 00 50 04 15 05 c8 00 45 01 71 63 09 b5 00 0c b6 00 08 42 30 a1 18 00 00 ce 60 04 43 10 12 44 00 00 0d 00 00 0f 00 00 04 f1 00 00 5b 77 c7 00 00 00 00 10 00 00 2a 44 0c 00 00 00 00 02 0b 00 00 00 02 15 0b cf 9c 0e 00 00 00 00 7e 84 d9 70 00 00 01 81 16 2c 64 68 00 ff 36 ef 9b 1e a1 29 0b 00 85 01 4d 0b 00 00 00 16 07 ef 00 f0 00 50 04 15 05 c8 00 45 01 71 63 09 b5 00 0b b6 00 08 42 30 a2 18 00 00 ce 60 04 43 10 12 44 00 00 0d 00 00 0f 00 00 04 f1 00 00 5b 77 c7 00 00 00 00 10 00 00 2a 44 0c 00 00 00 00 02 0b 00 00 00 02 15 0b cf 9c 0e 00 00 00 00 7e 84 d9 70 02 00 00 d6 9c",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "payload"
            },
            {
                "p": "ip",
                "v": "192.168.2.1",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "00 0f 32 36 36 39 30 37 30 35 33 34 33 30 30 39 35",
        "payloadType": "str",
        "x": 170,
        "y": 400,
        "wires": [
            [
                "02598cd881e51221"
            ]
        ]
    },
    {
        "id": "1836084807a4241a",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": "IMEI RESPONSE",
        "func": "msg.payload = Buffer.from([1]);\nmsg[\"host\"] = msg.ip;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 360,
        "wires": [
            [
                "c9c327e8c63c3dc3",
                "3152cb2e8baeace4"
            ]
        ]
    },
    {
        "id": "05035a7d21172b3e",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": "AVL RESPONSE",
        "func": "if(msg.IMEI === undefined || msg.IMEI.trim()===\"\")\n    msg.payload = Buffer.from([0,0,0,0]);\nelse\n    msg.payload = Buffer.from([0,0,0,msg[\"RecordsCount\"]]);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 440,
        "wires": [
            [
                "c9c327e8c63c3dc3",
                "3152cb2e8baeace4"
            ]
        ]
    },
    {
        "id": "73286bb7664c8cab",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 540,
        "wires": []
    },
    {
        "id": "c83eb793f3cf0dc3",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": "Remove Empty keys",
        "func": "var obj = msg.AVLDecodedData;\nvar klm = {};\nObject.keys(obj).forEach(key => {\n  if (obj[key] === null)  {\n    delete obj[key];\n  }\n});\n\nmsg.AVLDecodedData=obj;\n// return {payload:obj};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 520,
        "wires": [
            [
                "1a6ad199bb9a31b6"
            ]
        ]
    },
    {
        "id": "c9c327e8c63c3dc3",
        "type": "tcp out",
        "z": "f05df52a173b55f6",
        "name": "",
        "host": "",
        "port": "",
        "beserver": "reply",
        "base64": false,
        "end": false,
        "tls": "",
        "x": 1070,
        "y": 400,
        "wires": []
    },
    {
        "id": "3152cb2e8baeace4",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 340,
        "wires": []
    },
    {
        "id": "1a6ad199bb9a31b6",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": "ICCID vs. IMEI Check n Fix",
        "func": "switch(msg[\"ICCID\"]) {\n  case \"89430301722122635632\":\n    //Umers\n    if(msg[\"IMEI\"]!=\"866907055227788\"){\n        msg[\"Alert\"]=msg[\"Alert\"]+\" ||| Wrong IMEI vs ICCID\";\n        msg[\"AlertDetails\"]=msg[\"AlertDetails\"] + \"||| UmersFMC230 and IMEI should be 866907055227788 but it was \" + msg[\"IMEI\"] + \". fixing it...\";\n        msg[\"IMEI\"]=\"866907055227788\";\n    }\n    break;\n  case \"89430301722122582388\":\n    //1\n    if(msg[\"IMEI\"]!=\"866907052467015\"){\n        msg[\"Alert\"]=msg[\"Alert\"]+\" ||| Wrong IMEI vs ICCID\";\n        msg[\"AlertDetails\"]=msg[\"AlertDetails\"] + \"||| Bike 2 and IMEI should be 866907052467015 but it was \" + msg[\"IMEI\"] + \". fixing it...\";\n        msg[\"IMEI\"]=\"866907052467015\";\n    }\n    break;\n  case \"89430301722122582354\":\n    //2\n    if(msg[\"IMEI\"]!=\"866907052435962\"){\n        msg[\"Alert\"]=msg[\"Alert\"]+\" ||| Wrong IMEI vs ICCID\";\n        msg[\"AlertDetails\"]=msg[\"AlertDetails\"] + \"||| Bike 2 and IMEI should be 866907052435962 but it was \" + msg[\"IMEI\"] + \". fixing it...\";\n        msg[\"IMEI\"]=\"866907052435962\";\n    }\n    break;\n  case \"89430301722122582396\":\n    //3\n    if(msg[\"IMEI\"]!=\"866907053430095\"){\n        msg[\"Alert\"]=msg[\"Alert\"]+\" ||| Wrong IMEI vs ICCID\";\n        msg[\"AlertDetails\"]=msg[\"AlertDetails\"] + \"||| Bike 3 and IMEI should be 866907053430095 but it was \" + msg[\"IMEI\"] + \". fixing it...\";\n        msg[\"IMEI\"]=\"866907053430095\";\n    }\n    break;\n  case \"89430301722122582370\":\n    //4\n    if(msg[\"IMEI\"]!=\"866907053429923\"){\n        msg[\"Alert\"]=msg[\"Alert\"]+\" ||| Wrong IMEI vs ICCID\";\n        msg[\"AlertDetails\"]=msg[\"AlertDetails\"] + \"||| Bike 4 and IMEI should be 866907053429923 but it was \" + msg[\"IMEI\"] + \". fixing it...\";\n       msg[\"IMEI\"]=\"866907053429923\";\n    }\n    break;\n  case \"89430301722122582362\":\n    //5\n    if(msg[\"IMEI\"]!=\"866907053430038\"){\n        msg[\"Alert\"]=msg[\"Alert\"]+\" ||| Wrong IMEI vs ICCID\";\n        msg[\"AlertDetails\"]=msg[\"AlertDetails\"] + \"||| Bike 5 and IMEI should be 866907053430038 but it was \" + msg[\"IMEI\"] + \". fixing it...\";\n        msg[\"IMEI\"]=\"866907053430038\";\n    }\n    break;\n  case \"89430301722122635624\":\n    //5\n    if(msg[\"IMEI\"]!=\"866907055230402\"){\n        msg[\"Alert\"]=msg[\"Alert\"]+\" ||| Wrong IMEI vs ICCID\";\n        msg[\"AlertDetails\"]=msg[\"AlertDetails\"] + \"||| Bike 5 and IMEI should be 866907055230402 but it was \" + msg[\"IMEI\"] + \". fixing it...\";\n        msg[\"IMEI\"]=\"866907055230402\";\n    }\n    break;\n  case \"\":\n     msg[\"Alert\"]=+msg[\"Alert\"]+\" ||| Missing ICCID\";\n     msg[\"AlertDetails\"]=\"ICCID is empty string - IMEI:\"+msg[\"IMEI\"];\n     break;\n  case null:\n     msg[\"Alert\"]=+msg[\"Alert\"]+\" ||| Missing ICCID\";\n     msg[\"AlertDetails\"]=\"ICCID is null - IMEI:\"+msg[\"IMEI\"];\n     msg[\"ICCID\"]=\"\";\n     break;\n  case undefined:\n     msg[\"Alert\"]=+msg[\"Alert\"]+\" ||| Missing ICCID\";\n     msg[\"AlertDetails\"]=msg[\"AlertDetails\"] + \"||| ICCID is undefined - IMEI:\"+msg[\"IMEI\"];\n     msg[\"ICCID\"]=\"\";\n     break;\n}\nif(msg[\"IMEI\"]===\"\"||isNaN(msg[\"IMEI\"])||msg[\"IMEI\"]===null||msg[\"IMEI\"]===undefined){\n     msg[\"Alert\"]=+msg[\"Alert\"]+\" ||| Missing IMEI\";\n    msg[\"AlertDetails\"]=msg[\"AlertDetails\"] + \"||| Missing IMEI >>> HUGE PROBLEM\";\n    msg[\"IMEI\"]===\"\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 620,
        "wires": [
            [
                "973afb8c2c78ab37",
                "aae5fdf287c5349e",
                "663cf4a1c96e5042"
            ]
        ]
    },
    {
        "id": "05e9b64ab4b2617e",
        "type": "switch",
        "z": "f05df52a173b55f6",
        "d": true,
        "name": "",
        "property": "IMEI",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "866907052467015",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "866907052435962",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "866907053430095",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "866907053429923",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "866907053430038",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "866907055227788",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 7,
        "x": 650,
        "y": 700,
        "wires": [
            [
                "7ecfcf226581dbce",
                "2cbcf6b811ad0801"
            ],
            [
                "cb09e46f730f9478",
                "3994ba5ab2f8aefb",
                "f7740fe01dff748c"
            ],
            [
                "288d67211aa807f9",
                "a083033ba522b9ba"
            ],
            [
                "f4b006ed33cf680c",
                "fd6943e1a13434fa",
                "cefbfa6b846472f3"
            ],
            [
                "5ff98b84e741565d",
                "57d0e6da969505d7"
            ],
            [
                "86391a7ed7c3bc1a",
                "c11aa9edd7838a8b",
                "141b42a2e7a877d1"
            ],
            [
                "0ab898c3cb69bbd2",
                "70633c559c89d488"
            ]
        ]
    },
    {
        "id": "973afb8c2c78ab37",
        "type": "switch",
        "z": "f05df52a173b55f6",
        "name": "",
        "property": "Alert",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NONE",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 600,
        "wires": [
            [],
            [
                "3b95cabb8ff459a3"
            ]
        ]
    },
    {
        "id": "aae5fdf287c5349e",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 760,
        "wires": []
    },
    {
        "id": "7ecfcf226581dbce",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": "Bike_10616",
        "func": "let DataArr = [];\nlet tj = msg.AVLDecodedData;\n\nif(msg[\"IMEI\"]!==\"\")\n    DataArr.push(\"111,\"+msg[\"IMEI\"] + \",\"+ msg[\"ICCID\"]) \n\nif(msg[\"ICCID\"]!==\"\")\n    DataArr.push(\"110,\"+msg[\"ICCID\"])\n\nlet GNSS=0;\n\n// if(tj[\"ICCID\"]!==undefined && tj[\"ICCID\"]!==null && isNaN(tj[\"ICCID\"]))\n//     DataArr.push(\"110,\"+tj[\"ICCID\"])\n\nfor(let b=1;b<=parseInt(tj[\"RecordsCount\"]);b++){\n    let DTS=new Date();\n    if(!isNaN(Date.parse(tj[\"D\"+b+\"_Timestamp\"])) && tj[\"D\"+b+\"_Timestamp\"]!==undefined && tj[\"D\"+b+\"_Timestamp\"]!==null){\n        try{\n        DTS=tj[\"D\"+b+\"_Timestamp\"].replace(\".000Z\",\".000+00:00\")\n        }catch(e){}\n    }\n    if(tj[\"D\"+b+\"_GPS_Speed\"]!==undefined&&tj[\"D\"+b+\"_GPS_Speed\"]!==null)\n        DataArr.push(\"200,Speed,Speed,\"+tj[\"D\"+b+\"_GPS_Speed\"]+\",km/h,\"+DTS);\n    if(tj[\"D\"+b+\"_GPS_Satellites\"]!==undefined && tj[\"D\"+b+\"_GPS_Satellites\"]!==null)\n        DataArr.push(\"200,Satellites,Satellites,\"+tj[\"D\"+b+\"_GPS_Satellites\"]+\",Count,\"+DTS);\n\n    if(tj[\"D\"+b+\"_FutureDate\"]===undefined && tj[\"D\"+b+\"_FutureDate\"]===null)\n        tj[\"D\"+b+\"_FutureDate\"]=0;\n    DataArr.push(\"200,FutureDate,FutureDate,\"+tj[\"D\"+b+\"_FutureDate\"]+\",State,\"+DTS);\n\n\n    for(let kab=1;kab<=parseInt(tj[\"D\"+b+\"_IO_1Byte_Records\"]);kab++){\n        var TheID=parseInt(tj[\"D\"+b+\"_IO_1Byte_\"+kab+\"_ID\"])\n        var TheVal=parseInt(tj[\"D\"+b+\"_IO_1Byte_\"+kab+\"_Val\"])\n        if(TheID===239)\n            DataArr.push(\"200,Ignition,Ignition,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===240)\n            DataArr.push(\"200,Movement,Movement,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===21)\n            DataArr.push(\"200,GSMSignal,GSMSignal,\"+TheVal+\",bars,\"+DTS);\n        else if(TheID===113)//battery\n            DataArr.push(\"200,Battery,Battery,\"+TheVal+\",%,\"+DTS);\n        else if(TheID===252)//unplug detection\n            DataArr.push(\"200,UnplugDetection,UnplugDetection,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===246)//Tow detection\n            DataArr.push(\"200,TowDetection,TowDetection,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===69){//GNS Status\n            DataArr.push(\"200,GNSS_Status,GNSS_Status,\"+TheVal+\",State,\"+DTS);\n           GNSS = TheVal; \n        }\n    }\n\n    //only log locationif  GNSS FIX was recorded and satellites were higher than 1 for accuracy and if the timestamp was not in future\n    //0 - GNSS OFF        1 – GNSS ON with fix      2 - GNSS ON without fix      3 - GNSS sleep\n    if(GNSS===1 && parseInt(tj[\"D\"+b+\"_GPS_Satellites\"])>=1 && tj[\"D\"+b+\"_FutureDate\"]!==true &&\n            tj[\"D\"+b+\"_GPS_Lat\"]!==undefined && tj[\"D\"+b+\"_GPS_Lat\"]!==null && \n            tj[\"D\"+b+\"_GPS_Long\"]!==undefined && tj[\"D\"+b+\"_GPS_Long\"]!==null && \n            tj[\"D\"+b+\"_GPS_Alt\"]!==undefined && tj[\"D\"+b+\"_GPS_Alt\"]!==null)\n        DataArr.push(\"402,\"+tj[\"D\"+b+\"_GPS_Lat\"]+\",\"+tj[\"D\"+b+\"_GPS_Long\"]+\",\"+tj[\"D\"+b+\"_GPS_Alt\"]+\",,\"+DTS)\n    \n    for(let kab2=1;kab2<=parseInt(tj[\"D\"+b+\"_IO_2Byte_Records\"]);kab2++){\n        var TheID2=parseInt(tj[\"D\"+b+\"_IO_2Byte_\"+kab2+\"_ID\"])\n        var TheVal2=parseInt(tj[\"D\"+b+\"_IO_2Byte_\"+kab2+\"_Val\"])\n        if(TheID2===66)\n            DataArr.push(\"200,ExternalVoltage,ExternalVoltage,\"+(TheVal2*0.001)+\",V,\"+DTS);\n        else if(TheID2===205)//clell id\n            DataArr.push(\"111,,,,,,,\"+TheID2)\n        else if(TheID2===67)\n            DataArr.push(\"200,BatteryVoltage,BatteryVoltage,\"+(TheVal2*0.001)+\",V,\"+DTS);\n        else if(TheID2===68)\n            DataArr.push(\"200,BatteryCurrent,BatteryCurrent,\"+(TheVal2*0.001)+\",A,\"+DTS);\n    //Below was commented because we minimized the io params to optimize packet size and battery \n        // else if(TheID2===13)\n        //     DataArr.push(\"200,FuelRateGPS,FuelRateGPS,\"+(TheVal2*0.01)+\",l/100km,\"+DTS);\n        // else if(TheID2===15)\n        //     DataArr.push(\"200,EcoScore,EcoScore,\"+(TheVal2*0.01)+\",score,\"+DTS);\n    }\n    \n    //Below was commented because we minimized the io params to optimize packet size and battery \n    // for(let kab4=1;kab4<=parseInt(tj[\"D\"+b+\"_IO_4Byte_Records\"]);kab4++){\n    //     var TheID4=parseInt(tj[\"D\"+b+\"_IO_4Byte_\"+kab4+\"_ID\"])\n    //     var TheVal4=parseInt(tj[\"D\"+b+\"_IO_4Byte_\"+kab4+\"_Val\"])\n    //     if(TheID4===199)\n    //         DataArr.push(\"200,TripOdometer,TripOdometer,\"+TheVal4+\",m,\"+DTS);\n    //     else if(TheID4===16)\n    //         DataArr.push(\"200,TotalOdometer,TotalOdometer,\"+TheVal4+\",m,\"+DTS);\n    //     else if(TheID4===12)\n    //         DataArr.push(\"200,FuelUsed,FuelUsed,\"+(TheVal4*0.001)+\",l,\"+DTS);\n    // }\n    \n    // for(let kab8=1;kab8<=parseInt(tj[\"D\"+b+\"_IO_8Byte_Records\"]);kab8++){\n    //     var TheID8=parseInt(tj[\"D\"+b+\"_IO_8Byte_\"+kab8+\"_ID\"])\n    //     var TheVal8=parseInt(tj[\"D\"+b+\"_IO_8Byte_\"+kab8+\"_Val\"])\n    //     if(TheID8===)\n    //         DataArr.push(\"200,,,\"+TheVal8+\",,\"+DTS);\n    // }\n    \n}\n\nmsg.payload=DataArr;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 680,
        "wires": [
            [
                "5cca4954a6c3c111",
                "cb2619c5111579ae"
            ]
        ]
    },
    {
        "id": "2cbcf6b811ad0801",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": " Bike1 10616.csv",
        "func": "var message = {};\n\nvar D = new Date();\nvar TS = D.getTime();\nvar TS_String = new Date(TS).toISOString()\n// message.payload[\"TS\"] = TS\n// message.payload[\"TimeStamp\"] = TS_String;\n// message.payload[\"Records\"] = msg.Records;\n// message.payload[\"IMEI\"] = msg.IMEI;\n// message.payload[\"ICCID\"] = msg.ICCID;\n// message.payload[\"Records\"] = msg.RecordsCount;\n// message.payload[\"Alert\"] = msg.Alert;\n// message.payload[\"AlertDetails\"] = msg.AlertDetails;\n// message.payload[\"AlertMsg\"] = msg.AlertMsg;\n// message.payload[\"IP\"] = msg.ip;\n// message.payload[\"Port\"] = msg.port;\n// message.payload[\"Session\"] = msg._session.id;\n\nmessage.payload = TS + \",\" + \n    TS_String + \",\" + \n    msg.IMEI + \",\" + \n    msg.ICCID + \",\" + \n    msg.RecordsCount + \",\" + \n    msg.Alert + \",\" + \n    msg.AlertDetails + \",\" + \n    msg.AlertMsg + \",\" + \n    msg.ip + \",\" + \n    msg.port + \",\" + \n    msg._session.id  + \",\\\"\" + \n    msg.AVLRawData + \"\\\",\" + \n    JSON.stringify(msg.AVLDecodedData);\n\nvar today = new Date();\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\n\nfilename = yyyy +\"\"+dd +\"\"+mm+ ' Bike1 10616.csv';\n\nmessage[\"filename\"] = filename;\n\nreturn message;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1160,
        "wires": [
            [
                "1f688a0f2f851d0d"
            ]
        ]
    },
    {
        "id": "cb09e46f730f9478",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": "Bike_10372 SAMI",
        "func": "let DataArr = [];\nlet tj = msg.AVLDecodedData;\n\nif(msg[\"IMEI\"]!==\"\")\n    DataArr.push(\"111,\"+msg[\"IMEI\"] + \",\"+ msg[\"ICCID\"]) \n\nif(msg[\"ICCID\"]!==\"\")\n    DataArr.push(\"110,\"+msg[\"ICCID\"])\n\nlet GNSS=0;\n\n// if(tj[\"ICCID\"]!==undefined && tj[\"ICCID\"]!==null && isNaN(tj[\"ICCID\"]))\n//     DataArr.push(\"110,\"+tj[\"ICCID\"])\n\nfor(let b=1;b<=parseInt(tj[\"RecordsCount\"]);b++){\n    let DTS=new Date();\n    if(!isNaN(Date.parse(tj[\"D\"+b+\"_Timestamp\"])) && tj[\"D\"+b+\"_Timestamp\"]!==undefined && tj[\"D\"+b+\"_Timestamp\"]!==null){\n        try{\n        DTS=tj[\"D\"+b+\"_Timestamp\"].replace(\".000Z\",\".000+00:00\")\n        }catch(e){}\n    }\n    if(tj[\"D\"+b+\"_GPS_Speed\"]!==undefined&&tj[\"D\"+b+\"_GPS_Speed\"]!==null)\n        DataArr.push(\"200,Speed,Speed,\"+tj[\"D\"+b+\"_GPS_Speed\"]+\",km/h,\"+DTS);\n    if(tj[\"D\"+b+\"_GPS_Satellites\"]!==undefined && tj[\"D\"+b+\"_GPS_Satellites\"]!==null)\n        DataArr.push(\"200,Satellites,Satellites,\"+tj[\"D\"+b+\"_GPS_Satellites\"]+\",Count,\"+DTS);\n\n    if(tj[\"D\"+b+\"_FutureDate\"]===undefined && tj[\"D\"+b+\"_FutureDate\"]===null)\n        tj[\"D\"+b+\"_FutureDate\"]=0;\n    DataArr.push(\"200,FutureDate,FutureDate,\"+tj[\"D\"+b+\"_FutureDate\"]+\",State,\"+DTS);\n\n\n    for(let kab=1;kab<=parseInt(tj[\"D\"+b+\"_IO_1Byte_Records\"]);kab++){\n        var TheID=parseInt(tj[\"D\"+b+\"_IO_1Byte_\"+kab+\"_ID\"])\n        var TheVal=parseInt(tj[\"D\"+b+\"_IO_1Byte_\"+kab+\"_Val\"])\n        if(TheID===239)\n            DataArr.push(\"200,Ignition,Ignition,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===240)\n            DataArr.push(\"200,Movement,Movement,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===21)\n            DataArr.push(\"200,GSMSignal,GSMSignal,\"+TheVal+\",bars,\"+DTS);\n        else if(TheID===113)//battery\n            DataArr.push(\"200,Battery,Battery,\"+TheVal+\",%,\"+DTS);\n        else if(TheID===252)//unplug detection\n            DataArr.push(\"200,UnplugDetection,UnplugDetection,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===246)//Tow detection\n            DataArr.push(\"200,TowDetection,TowDetection,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===69){//GNS Status\n            DataArr.push(\"200,GNSS_Status,GNSS_Status,\"+TheVal+\",State,\"+DTS);\n           GNSS = TheVal; \n        }\n    }\n\n    //only log locationif  GNSS FIX was recorded and satellites were higher than 1 for accuracy and if the timestamp was not in future\n    //0 - GNSS OFF        1 – GNSS ON with fix      2 - GNSS ON without fix      3 - GNSS sleep\n    if(GNSS===1 && parseInt(tj[\"D\"+b+\"_GPS_Satellites\"])>=1 && tj[\"D\"+b+\"_FutureDate\"]!==true &&\n            tj[\"D\"+b+\"_GPS_Lat\"]!==undefined && tj[\"D\"+b+\"_GPS_Lat\"]!==null && \n            tj[\"D\"+b+\"_GPS_Long\"]!==undefined && tj[\"D\"+b+\"_GPS_Long\"]!==null && \n            tj[\"D\"+b+\"_GPS_Alt\"]!==undefined && tj[\"D\"+b+\"_GPS_Alt\"]!==null)\n        DataArr.push(\"402,\"+tj[\"D\"+b+\"_GPS_Lat\"]+\",\"+tj[\"D\"+b+\"_GPS_Long\"]+\",\"+tj[\"D\"+b+\"_GPS_Alt\"]+\",,\"+DTS)\n    \n    for(let kab2=1;kab2<=parseInt(tj[\"D\"+b+\"_IO_2Byte_Records\"]);kab2++){\n        var TheID2=parseInt(tj[\"D\"+b+\"_IO_2Byte_\"+kab2+\"_ID\"])\n        var TheVal2=parseInt(tj[\"D\"+b+\"_IO_2Byte_\"+kab2+\"_Val\"])\n        if(TheID2===66)\n            DataArr.push(\"200,ExternalVoltage,ExternalVoltage,\"+(TheVal2*0.001)+\",V,\"+DTS);\n        else if(TheID2===205)//clell id\n            DataArr.push(\"111,,,,,,,\"+TheID2)\n        else if(TheID2===67)\n            DataArr.push(\"200,BatteryVoltage,BatteryVoltage,\"+(TheVal2*0.001)+\",V,\"+DTS);\n        else if(TheID2===68)\n            DataArr.push(\"200,BatteryCurrent,BatteryCurrent,\"+(TheVal2*0.001)+\",A,\"+DTS);\n    //Below was commented because we minimized the io params to optimize packet size and battery \n        // else if(TheID2===13)\n        //     DataArr.push(\"200,FuelRateGPS,FuelRateGPS,\"+(TheVal2*0.01)+\",l/100km,\"+DTS);\n        // else if(TheID2===15)\n        //     DataArr.push(\"200,EcoScore,EcoScore,\"+(TheVal2*0.01)+\",score,\"+DTS);\n    }\n    \n    //Below was commented because we minimized the io params to optimize packet size and battery \n    // for(let kab4=1;kab4<=parseInt(tj[\"D\"+b+\"_IO_4Byte_Records\"]);kab4++){\n    //     var TheID4=parseInt(tj[\"D\"+b+\"_IO_4Byte_\"+kab4+\"_ID\"])\n    //     var TheVal4=parseInt(tj[\"D\"+b+\"_IO_4Byte_\"+kab4+\"_Val\"])\n    //     if(TheID4===199)\n    //         DataArr.push(\"200,TripOdometer,TripOdometer,\"+TheVal4+\",m,\"+DTS);\n    //     else if(TheID4===16)\n    //         DataArr.push(\"200,TotalOdometer,TotalOdometer,\"+TheVal4+\",m,\"+DTS);\n    //     else if(TheID4===12)\n    //         DataArr.push(\"200,FuelUsed,FuelUsed,\"+(TheVal4*0.001)+\",l,\"+DTS);\n    // }\n    \n    // for(let kab8=1;kab8<=parseInt(tj[\"D\"+b+\"_IO_8Byte_Records\"]);kab8++){\n    //     var TheID8=parseInt(tj[\"D\"+b+\"_IO_8Byte_\"+kab8+\"_ID\"])\n    //     var TheVal8=parseInt(tj[\"D\"+b+\"_IO_8Byte_\"+kab8+\"_Val\"])\n    //     if(TheID8===)\n    //         DataArr.push(\"200,,,\"+TheVal8+\",,\"+DTS);\n    // }\n    \n}\n\nmsg.payload=DataArr;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 720,
        "wires": [
            [
                "3434e7faaf37f086",
                "e3b2021581c5920f"
            ]
        ]
    },
    {
        "id": "3994ba5ab2f8aefb",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "SAMI",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 1000,
        "wires": []
    },
    {
        "id": "f7740fe01dff748c",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": "Bike2 10372 (sami) data.csv",
        "func": "var message = {};\n\nvar D = new Date();\nvar TS = D.getTime();\nvar TS_String = new Date(TS).toISOString()\n// message.payload[\"TS\"] = TS\n// message.payload[\"TimeStamp\"] = TS_String;\n// message.payload[\"Records\"] = msg.Records;\n// message.payload[\"IMEI\"] = msg.IMEI;\n// message.payload[\"ICCID\"] = msg.ICCID;\n// message.payload[\"Records\"] = msg.RecordsCount;\n// message.payload[\"Alert\"] = msg.Alert;\n// message.payload[\"AlertDetails\"] = msg.AlertDetails;\n// message.payload[\"AlertMsg\"] = msg.AlertMsg;\n// message.payload[\"IP\"] = msg.ip;\n// message.payload[\"Port\"] = msg.port;\n// message.payload[\"Session\"] = msg._session.id;\n\nmessage.payload = TS + \",\" + \n    TS_String + \",\" + \n    msg.IMEI + \",\" + \n    msg.ICCID + \",\" + \n    msg.RecordsCount + \",\" + \n    msg.Alert + \",\" + \n    msg.AlertDetails + \",\" + \n    msg.AlertMsg + \",\" + \n    msg.ip + \",\" + \n    msg.port + \",\" + \n    msg._session.id  + \",\\\"\" + \n    msg.AVLRawData + \"\\\",\" + \n    JSON.stringify(msg.AVLDecodedData);\n\nvar today = new Date();\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\n\nfilename = yyyy  +\"\"+mm+\"\"+dd+ ' Bike2 10372 (sami) data.csv';\n\nmessage[\"filename\"] = filename;\n\nreturn message;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 1200,
        "wires": [
            [
                "1f688a0f2f851d0d"
            ]
        ]
    },
    {
        "id": "288d67211aa807f9",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": "Bike_10614",
        "func": "let DataArr = [];\nlet tj = msg.AVLDecodedData;\n\nif(msg[\"IMEI\"]!==\"\")\n    DataArr.push(\"111,\"+msg[\"IMEI\"] + \",\"+ msg[\"ICCID\"]) \n\nif(msg[\"ICCID\"]!==\"\")\n    DataArr.push(\"110,\"+msg[\"ICCID\"])\n\nlet GNSS=0;\n\n// if(tj[\"ICCID\"]!==undefined && tj[\"ICCID\"]!==null && isNaN(tj[\"ICCID\"]))\n//     DataArr.push(\"110,\"+tj[\"ICCID\"])\n\nfor(let b=1;b<=parseInt(tj[\"RecordsCount\"]);b++){\n    let DTS=new Date();\n    if(!isNaN(Date.parse(tj[\"D\"+b+\"_Timestamp\"])) && tj[\"D\"+b+\"_Timestamp\"]!==undefined && tj[\"D\"+b+\"_Timestamp\"]!==null){\n        try{\n        DTS=tj[\"D\"+b+\"_Timestamp\"].replace(\".000Z\",\".000+00:00\")\n        }catch(e){}\n    }\n    if(tj[\"D\"+b+\"_GPS_Speed\"]!==undefined&&tj[\"D\"+b+\"_GPS_Speed\"]!==null)\n        DataArr.push(\"200,Speed,Speed,\"+tj[\"D\"+b+\"_GPS_Speed\"]+\",km/h,\"+DTS);\n    if(tj[\"D\"+b+\"_GPS_Satellites\"]!==undefined && tj[\"D\"+b+\"_GPS_Satellites\"]!==null)\n        DataArr.push(\"200,Satellites,Satellites,\"+tj[\"D\"+b+\"_GPS_Satellites\"]+\",Count,\"+DTS);\n\n    if(tj[\"D\"+b+\"_FutureDate\"]===undefined && tj[\"D\"+b+\"_FutureDate\"]===null)\n        tj[\"D\"+b+\"_FutureDate\"]=0;\n    DataArr.push(\"200,FutureDate,FutureDate,\"+tj[\"D\"+b+\"_FutureDate\"]+\",State,\"+DTS);\n\n\n    for(let kab=1;kab<=parseInt(tj[\"D\"+b+\"_IO_1Byte_Records\"]);kab++){\n        var TheID=parseInt(tj[\"D\"+b+\"_IO_1Byte_\"+kab+\"_ID\"])\n        var TheVal=parseInt(tj[\"D\"+b+\"_IO_1Byte_\"+kab+\"_Val\"])\n        if(TheID===239)\n            DataArr.push(\"200,Ignition,Ignition,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===240)\n            DataArr.push(\"200,Movement,Movement,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===21)\n            DataArr.push(\"200,GSMSignal,GSMSignal,\"+TheVal+\",bars,\"+DTS);\n        else if(TheID===113)//battery\n            DataArr.push(\"200,Battery,Battery,\"+TheVal+\",%,\"+DTS);\n        else if(TheID===252)//unplug detection\n            DataArr.push(\"200,UnplugDetection,UnplugDetection,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===246)//Tow detection\n            DataArr.push(\"200,TowDetection,TowDetection,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===69){//GNS Status\n            DataArr.push(\"200,GNSS_Status,GNSS_Status,\"+TheVal+\",State,\"+DTS);\n           GNSS = TheVal; \n        }\n    }\n\n    //only log locationif  GNSS FIX was recorded and satellites were higher than 1 for accuracy and if the timestamp was not in future\n    //0 - GNSS OFF        1 – GNSS ON with fix      2 - GNSS ON without fix      3 - GNSS sleep\n    if(GNSS===1 && parseInt(tj[\"D\"+b+\"_GPS_Satellites\"])>=1 && tj[\"D\"+b+\"_FutureDate\"]!==true &&\n            tj[\"D\"+b+\"_GPS_Lat\"]!==undefined && tj[\"D\"+b+\"_GPS_Lat\"]!==null && \n            tj[\"D\"+b+\"_GPS_Long\"]!==undefined && tj[\"D\"+b+\"_GPS_Long\"]!==null && \n            tj[\"D\"+b+\"_GPS_Alt\"]!==undefined && tj[\"D\"+b+\"_GPS_Alt\"]!==null)\n        DataArr.push(\"402,\"+tj[\"D\"+b+\"_GPS_Lat\"]+\",\"+tj[\"D\"+b+\"_GPS_Long\"]+\",\"+tj[\"D\"+b+\"_GPS_Alt\"]+\",,\"+DTS)\n    \n    for(let kab2=1;kab2<=parseInt(tj[\"D\"+b+\"_IO_2Byte_Records\"]);kab2++){\n        var TheID2=parseInt(tj[\"D\"+b+\"_IO_2Byte_\"+kab2+\"_ID\"])\n        var TheVal2=parseInt(tj[\"D\"+b+\"_IO_2Byte_\"+kab2+\"_Val\"])\n        if(TheID2===66)\n            DataArr.push(\"200,ExternalVoltage,ExternalVoltage,\"+(TheVal2*0.001)+\",V,\"+DTS);\n        else if(TheID2===205)//clell id\n            DataArr.push(\"111,,,,,,,\"+TheID2)\n        else if(TheID2===67)\n            DataArr.push(\"200,BatteryVoltage,BatteryVoltage,\"+(TheVal2*0.001)+\",V,\"+DTS);\n        else if(TheID2===68)\n            DataArr.push(\"200,BatteryCurrent,BatteryCurrent,\"+(TheVal2*0.001)+\",A,\"+DTS);\n    //Below was commented because we minimized the io params to optimize packet size and battery \n        // else if(TheID2===13)\n        //     DataArr.push(\"200,FuelRateGPS,FuelRateGPS,\"+(TheVal2*0.01)+\",l/100km,\"+DTS);\n        // else if(TheID2===15)\n        //     DataArr.push(\"200,EcoScore,EcoScore,\"+(TheVal2*0.01)+\",score,\"+DTS);\n    }\n    \n    //Below was commented because we minimized the io params to optimize packet size and battery \n    // for(let kab4=1;kab4<=parseInt(tj[\"D\"+b+\"_IO_4Byte_Records\"]);kab4++){\n    //     var TheID4=parseInt(tj[\"D\"+b+\"_IO_4Byte_\"+kab4+\"_ID\"])\n    //     var TheVal4=parseInt(tj[\"D\"+b+\"_IO_4Byte_\"+kab4+\"_Val\"])\n    //     if(TheID4===199)\n    //         DataArr.push(\"200,TripOdometer,TripOdometer,\"+TheVal4+\",m,\"+DTS);\n    //     else if(TheID4===16)\n    //         DataArr.push(\"200,TotalOdometer,TotalOdometer,\"+TheVal4+\",m,\"+DTS);\n    //     else if(TheID4===12)\n    //         DataArr.push(\"200,FuelUsed,FuelUsed,\"+(TheVal4*0.001)+\",l,\"+DTS);\n    // }\n    \n    // for(let kab8=1;kab8<=parseInt(tj[\"D\"+b+\"_IO_8Byte_Records\"]);kab8++){\n    //     var TheID8=parseInt(tj[\"D\"+b+\"_IO_8Byte_\"+kab8+\"_ID\"])\n    //     var TheVal8=parseInt(tj[\"D\"+b+\"_IO_8Byte_\"+kab8+\"_Val\"])\n    //     if(TheID8===)\n    //         DataArr.push(\"200,,,\"+TheVal8+\",,\"+DTS);\n    // }\n    \n}\n\nmsg.payload=DataArr;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 760,
        "wires": [
            [
                "47857fb11b8ea7f9",
                "3d10c0d8a9d1bdf5"
            ]
        ]
    },
    {
        "id": "a083033ba522b9ba",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": " Bike3 10614.csv",
        "func": "var message = {};\n\nvar D = new Date();\nvar TS = D.getTime();\nvar TS_String = new Date(TS).toISOString()\n// message.payload[\"TS\"] = TS\n// message.payload[\"TimeStamp\"] = TS_String;\n// message.payload[\"Records\"] = msg.Records;\n// message.payload[\"IMEI\"] = msg.IMEI;\n// message.payload[\"ICCID\"] = msg.ICCID;\n// message.payload[\"Records\"] = msg.RecordsCount;\n// message.payload[\"Alert\"] = msg.Alert;\n// message.payload[\"AlertDetails\"] = msg.AlertDetails;\n// message.payload[\"AlertMsg\"] = msg.AlertMsg;\n// message.payload[\"IP\"] = msg.ip;\n// message.payload[\"Port\"] = msg.port;\n// message.payload[\"Session\"] = msg._session.id;\n\nmessage.payload = TS + \",\" + \n    TS_String + \",\" + \n    msg.IMEI + \",\" + \n    msg.ICCID + \",\" + \n    msg.RecordsCount + \",\" + \n    msg.Alert + \",\" + \n    msg.AlertDetails + \",\" + \n    msg.AlertMsg + \",\" + \n    msg.ip + \",\" + \n    msg.port + \",\" + \n    msg._session.id  + \",\\\"\" + \n    msg.AVLRawData + \"\\\",\" + \n    JSON.stringify(msg.AVLDecodedData);\n\nvar today = new Date();\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\n\nfilename = yyyy  +\"\"+mm+\"\"+dd+ ' Bike3 10614.csv';\n\nmessage[\"filename\"] = filename;\n\nreturn message;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1240,
        "wires": [
            [
                "1f688a0f2f851d0d"
            ]
        ]
    },
    {
        "id": "f4b006ed33cf680c",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": "Bike_13071",
        "func": "let DataArr = [];\nlet tj = msg.AVLDecodedData;\n\nif(msg[\"IMEI\"]!==\"\")\n    DataArr.push(\"111,\"+msg[\"IMEI\"] + \",\"+ msg[\"ICCID\"]) \n\nif(msg[\"ICCID\"]!==\"\")\n    DataArr.push(\"110,\"+msg[\"ICCID\"])\n\nlet GNSS=0;\n\n// if(tj[\"ICCID\"]!==undefined && tj[\"ICCID\"]!==null && isNaN(tj[\"ICCID\"]))\n//     DataArr.push(\"110,\"+tj[\"ICCID\"])\n\nfor(let b=1;b<=parseInt(tj[\"RecordsCount\"]);b++){\n    let DTS=new Date();\n    if(!isNaN(Date.parse(tj[\"D\"+b+\"_Timestamp\"])) && tj[\"D\"+b+\"_Timestamp\"]!==undefined && tj[\"D\"+b+\"_Timestamp\"]!==null){\n        try{\n        DTS=tj[\"D\"+b+\"_Timestamp\"].replace(\".000Z\",\".000+00:00\")\n        }catch(e){}\n    }\n    if(tj[\"D\"+b+\"_GPS_Speed\"]!==undefined&&tj[\"D\"+b+\"_GPS_Speed\"]!==null)\n        DataArr.push(\"200,Speed,Speed,\"+tj[\"D\"+b+\"_GPS_Speed\"]+\",km/h,\"+DTS);\n    if(tj[\"D\"+b+\"_GPS_Satellites\"]!==undefined && tj[\"D\"+b+\"_GPS_Satellites\"]!==null)\n        DataArr.push(\"200,Satellites,Satellites,\"+tj[\"D\"+b+\"_GPS_Satellites\"]+\",Count,\"+DTS);\n\n    if(tj[\"D\"+b+\"_FutureDate\"]===undefined && tj[\"D\"+b+\"_FutureDate\"]===null)\n        tj[\"D\"+b+\"_FutureDate\"]=0;\n    DataArr.push(\"200,FutureDate,FutureDate,\"+tj[\"D\"+b+\"_FutureDate\"]+\",State,\"+DTS);\n\n\n    for(let kab=1;kab<=parseInt(tj[\"D\"+b+\"_IO_1Byte_Records\"]);kab++){\n        var TheID=parseInt(tj[\"D\"+b+\"_IO_1Byte_\"+kab+\"_ID\"])\n        var TheVal=parseInt(tj[\"D\"+b+\"_IO_1Byte_\"+kab+\"_Val\"])\n        if(TheID===239)\n            DataArr.push(\"200,Ignition,Ignition,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===240)\n            DataArr.push(\"200,Movement,Movement,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===21)\n            DataArr.push(\"200,GSMSignal,GSMSignal,\"+TheVal+\",bars,\"+DTS);\n        else if(TheID===113)//battery\n            DataArr.push(\"200,Battery,Battery,\"+TheVal+\",%,\"+DTS);\n        else if(TheID===252)//unplug detection\n            DataArr.push(\"200,UnplugDetection,UnplugDetection,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===246)//Tow detection\n            DataArr.push(\"200,TowDetection,TowDetection,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===69){//GNS Status\n            DataArr.push(\"200,GNSS_Status,GNSS_Status,\"+TheVal+\",State,\"+DTS);\n           GNSS = TheVal; \n        }\n    }\n\n    //only log locationif  GNSS FIX was recorded and satellites were higher than 1 for accuracy and if the timestamp was not in future\n    //0 - GNSS OFF        1 – GNSS ON with fix      2 - GNSS ON without fix      3 - GNSS sleep\n    if(GNSS===1 && parseInt(tj[\"D\"+b+\"_GPS_Satellites\"])>=1 && tj[\"D\"+b+\"_FutureDate\"]!==true &&\n            tj[\"D\"+b+\"_GPS_Lat\"]!==undefined && tj[\"D\"+b+\"_GPS_Lat\"]!==null && \n            tj[\"D\"+b+\"_GPS_Long\"]!==undefined && tj[\"D\"+b+\"_GPS_Long\"]!==null && \n            tj[\"D\"+b+\"_GPS_Alt\"]!==undefined && tj[\"D\"+b+\"_GPS_Alt\"]!==null)\n        DataArr.push(\"402,\"+tj[\"D\"+b+\"_GPS_Lat\"]+\",\"+tj[\"D\"+b+\"_GPS_Long\"]+\",\"+tj[\"D\"+b+\"_GPS_Alt\"]+\",,\"+DTS)\n    \n    for(let kab2=1;kab2<=parseInt(tj[\"D\"+b+\"_IO_2Byte_Records\"]);kab2++){\n        var TheID2=parseInt(tj[\"D\"+b+\"_IO_2Byte_\"+kab2+\"_ID\"])\n        var TheVal2=parseInt(tj[\"D\"+b+\"_IO_2Byte_\"+kab2+\"_Val\"])\n        if(TheID2===66)\n            DataArr.push(\"200,ExternalVoltage,ExternalVoltage,\"+(TheVal2*0.001)+\",V,\"+DTS);\n        else if(TheID2===205)//clell id\n            DataArr.push(\"111,,,,,,,\"+TheID2)\n        else if(TheID2===67)\n            DataArr.push(\"200,BatteryVoltage,BatteryVoltage,\"+(TheVal2*0.001)+\",V,\"+DTS);\n        else if(TheID2===68)\n            DataArr.push(\"200,BatteryCurrent,BatteryCurrent,\"+(TheVal2*0.001)+\",A,\"+DTS);\n    //Below was commented because we minimized the io params to optimize packet size and battery \n        // else if(TheID2===13)\n        //     DataArr.push(\"200,FuelRateGPS,FuelRateGPS,\"+(TheVal2*0.01)+\",l/100km,\"+DTS);\n        // else if(TheID2===15)\n        //     DataArr.push(\"200,EcoScore,EcoScore,\"+(TheVal2*0.01)+\",score,\"+DTS);\n    }\n    \n    //Below was commented because we minimized the io params to optimize packet size and battery \n    // for(let kab4=1;kab4<=parseInt(tj[\"D\"+b+\"_IO_4Byte_Records\"]);kab4++){\n    //     var TheID4=parseInt(tj[\"D\"+b+\"_IO_4Byte_\"+kab4+\"_ID\"])\n    //     var TheVal4=parseInt(tj[\"D\"+b+\"_IO_4Byte_\"+kab4+\"_Val\"])\n    //     if(TheID4===199)\n    //         DataArr.push(\"200,TripOdometer,TripOdometer,\"+TheVal4+\",m,\"+DTS);\n    //     else if(TheID4===16)\n    //         DataArr.push(\"200,TotalOdometer,TotalOdometer,\"+TheVal4+\",m,\"+DTS);\n    //     else if(TheID4===12)\n    //         DataArr.push(\"200,FuelUsed,FuelUsed,\"+(TheVal4*0.001)+\",l,\"+DTS);\n    // }\n    \n    // for(let kab8=1;kab8<=parseInt(tj[\"D\"+b+\"_IO_8Byte_Records\"]);kab8++){\n    //     var TheID8=parseInt(tj[\"D\"+b+\"_IO_8Byte_\"+kab8+\"_ID\"])\n    //     var TheVal8=parseInt(tj[\"D\"+b+\"_IO_8Byte_\"+kab8+\"_Val\"])\n    //     if(TheID8===)\n    //         DataArr.push(\"200,,,\"+TheVal8+\",,\"+DTS);\n    // }\n    \n}\n\nmsg.payload=DataArr;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 800,
        "wires": [
            [
                "e8633b0532d071db",
                "9ef8108f8490b792"
            ]
        ]
    },
    {
        "id": "fd6943e1a13434fa",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "Bike 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 1040,
        "wires": []
    },
    {
        "id": "cefbfa6b846472f3",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": " Bike4 13071.csv",
        "func": "var message = {};\n\nvar D = new Date();\nvar TS = D.getTime();\nvar TS_String = new Date(TS).toISOString()\n// message.payload[\"TS\"] = TS\n// message.payload[\"TimeStamp\"] = TS_String;\n// message.payload[\"Records\"] = msg.Records;\n// message.payload[\"IMEI\"] = msg.IMEI;\n// message.payload[\"ICCID\"] = msg.ICCID;\n// message.payload[\"Records\"] = msg.RecordsCount;\n// message.payload[\"Alert\"] = msg.Alert;\n// message.payload[\"AlertDetails\"] = msg.AlertDetails;\n// message.payload[\"AlertMsg\"] = msg.AlertMsg;\n// message.payload[\"IP\"] = msg.ip;\n// message.payload[\"Port\"] = msg.port;\n// message.payload[\"Session\"] = msg._session.id;\n\nmessage.payload = TS + \",\" + \n    TS_String + \",\" + \n    msg.IMEI + \",\" + \n    msg.ICCID + \",\" + \n    msg.RecordsCount + \",\" + \n    msg.Alert + \",\" + \n    msg.AlertDetails + \",\" + \n    msg.AlertMsg + \",\" + \n    msg.ip + \",\" + \n    msg.port + \",\" + \n    msg._session.id  + \",\\\"\" + \n    msg.AVLRawData + \"\\\",\" + \n    JSON.stringify(msg.AVLDecodedData);\n\nvar today = new Date();\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\n\nfilename = yyyy  +\"\"+mm+\"\"+dd+ ' Bike4 13071.csv';\n\nmessage[\"filename\"] = filename;\n\nreturn message;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1280,
        "wires": [
            [
                "1f688a0f2f851d0d"
            ]
        ]
    },
    {
        "id": "5ff98b84e741565d",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": "Bike_70079",
        "func": "let DataArr = [];\nlet tj = msg.AVLDecodedData;\n\nif(msg[\"IMEI\"]!==\"\")\n    DataArr.push(\"111,\"+msg[\"IMEI\"] + \",\"+ msg[\"ICCID\"]) \n\nif(msg[\"ICCID\"]!==\"\")\n    DataArr.push(\"110,\"+msg[\"ICCID\"])\n\nlet GNSS=0;\n\n// if(tj[\"ICCID\"]!==undefined && tj[\"ICCID\"]!==null && isNaN(tj[\"ICCID\"]))\n//     DataArr.push(\"110,\"+tj[\"ICCID\"])\n\nfor(let b=1;b<=parseInt(tj[\"RecordsCount\"]);b++){\n    let DTS=new Date();\n    if(!isNaN(Date.parse(tj[\"D\"+b+\"_Timestamp\"])) && tj[\"D\"+b+\"_Timestamp\"]!==undefined && tj[\"D\"+b+\"_Timestamp\"]!==null){\n        try{\n        DTS=tj[\"D\"+b+\"_Timestamp\"].replace(\".000Z\",\".000+00:00\")\n        }catch(e){}\n    }\n    if(tj[\"D\"+b+\"_GPS_Speed\"]!==undefined&&tj[\"D\"+b+\"_GPS_Speed\"]!==null)\n        DataArr.push(\"200,Speed,Speed,\"+tj[\"D\"+b+\"_GPS_Speed\"]+\",km/h,\"+DTS);\n    if(tj[\"D\"+b+\"_GPS_Satellites\"]!==undefined && tj[\"D\"+b+\"_GPS_Satellites\"]!==null)\n        DataArr.push(\"200,Satellites,Satellites,\"+tj[\"D\"+b+\"_GPS_Satellites\"]+\",Count,\"+DTS);\n\n    if(tj[\"D\"+b+\"_FutureDate\"]===undefined && tj[\"D\"+b+\"_FutureDate\"]===null)\n        tj[\"D\"+b+\"_FutureDate\"]=0;\n    DataArr.push(\"200,FutureDate,FutureDate,\"+tj[\"D\"+b+\"_FutureDate\"]+\",State,\"+DTS);\n\n\n    for(let kab=1;kab<=parseInt(tj[\"D\"+b+\"_IO_1Byte_Records\"]);kab++){\n        var TheID=parseInt(tj[\"D\"+b+\"_IO_1Byte_\"+kab+\"_ID\"])\n        var TheVal=parseInt(tj[\"D\"+b+\"_IO_1Byte_\"+kab+\"_Val\"])\n        if(TheID===239)\n            DataArr.push(\"200,Ignition,Ignition,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===240)\n            DataArr.push(\"200,Movement,Movement,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===21)\n            DataArr.push(\"200,GSMSignal,GSMSignal,\"+TheVal+\",bars,\"+DTS);\n        else if(TheID===113)//battery\n            DataArr.push(\"200,Battery,Battery,\"+TheVal+\",%,\"+DTS);\n        else if(TheID===252)//unplug detection\n            DataArr.push(\"200,UnplugDetection,UnplugDetection,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===246)//Tow detection\n            DataArr.push(\"200,TowDetection,TowDetection,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===69){//GNS Status\n            DataArr.push(\"200,GNSS_Status,GNSS_Status,\"+TheVal+\",State,\"+DTS);\n           GNSS = TheVal; \n        }\n    }\n\n    //only log locationif  GNSS FIX was recorded and satellites were higher than 1 for accuracy and if the timestamp was not in future\n    //0 - GNSS OFF        1 – GNSS ON with fix      2 - GNSS ON without fix      3 - GNSS sleep\n    if(GNSS===1 && parseInt(tj[\"D\"+b+\"_GPS_Satellites\"])>=1 && tj[\"D\"+b+\"_FutureDate\"]!==true &&\n            tj[\"D\"+b+\"_GPS_Lat\"]!==undefined && tj[\"D\"+b+\"_GPS_Lat\"]!==null && \n            tj[\"D\"+b+\"_GPS_Long\"]!==undefined && tj[\"D\"+b+\"_GPS_Long\"]!==null && \n            tj[\"D\"+b+\"_GPS_Alt\"]!==undefined && tj[\"D\"+b+\"_GPS_Alt\"]!==null)\n        DataArr.push(\"402,\"+tj[\"D\"+b+\"_GPS_Lat\"]+\",\"+tj[\"D\"+b+\"_GPS_Long\"]+\",\"+tj[\"D\"+b+\"_GPS_Alt\"]+\",,\"+DTS)\n    \n    for(let kab2=1;kab2<=parseInt(tj[\"D\"+b+\"_IO_2Byte_Records\"]);kab2++){\n        var TheID2=parseInt(tj[\"D\"+b+\"_IO_2Byte_\"+kab2+\"_ID\"])\n        var TheVal2=parseInt(tj[\"D\"+b+\"_IO_2Byte_\"+kab2+\"_Val\"])\n        if(TheID2===66)\n            DataArr.push(\"200,ExternalVoltage,ExternalVoltage,\"+(TheVal2*0.001)+\",V,\"+DTS);\n        else if(TheID2===205)//clell id\n            DataArr.push(\"111,,,,,,,\"+TheID2)\n        else if(TheID2===67)\n            DataArr.push(\"200,BatteryVoltage,BatteryVoltage,\"+(TheVal2*0.001)+\",V,\"+DTS);\n        else if(TheID2===68)\n            DataArr.push(\"200,BatteryCurrent,BatteryCurrent,\"+(TheVal2*0.001)+\",A,\"+DTS);\n    //Below was commented because we minimized the io params to optimize packet size and battery \n        // else if(TheID2===13)\n        //     DataArr.push(\"200,FuelRateGPS,FuelRateGPS,\"+(TheVal2*0.01)+\",l/100km,\"+DTS);\n        // else if(TheID2===15)\n        //     DataArr.push(\"200,EcoScore,EcoScore,\"+(TheVal2*0.01)+\",score,\"+DTS);\n    }\n    \n    //Below was commented because we minimized the io params to optimize packet size and battery \n    // for(let kab4=1;kab4<=parseInt(tj[\"D\"+b+\"_IO_4Byte_Records\"]);kab4++){\n    //     var TheID4=parseInt(tj[\"D\"+b+\"_IO_4Byte_\"+kab4+\"_ID\"])\n    //     var TheVal4=parseInt(tj[\"D\"+b+\"_IO_4Byte_\"+kab4+\"_Val\"])\n    //     if(TheID4===199)\n    //         DataArr.push(\"200,TripOdometer,TripOdometer,\"+TheVal4+\",m,\"+DTS);\n    //     else if(TheID4===16)\n    //         DataArr.push(\"200,TotalOdometer,TotalOdometer,\"+TheVal4+\",m,\"+DTS);\n    //     else if(TheID4===12)\n    //         DataArr.push(\"200,FuelUsed,FuelUsed,\"+(TheVal4*0.001)+\",l,\"+DTS);\n    // }\n    \n    // for(let kab8=1;kab8<=parseInt(tj[\"D\"+b+\"_IO_8Byte_Records\"]);kab8++){\n    //     var TheID8=parseInt(tj[\"D\"+b+\"_IO_8Byte_\"+kab8+\"_ID\"])\n    //     var TheVal8=parseInt(tj[\"D\"+b+\"_IO_8Byte_\"+kab8+\"_Val\"])\n    //     if(TheID8===)\n    //         DataArr.push(\"200,,,\"+TheVal8+\",,\"+DTS);\n    // }\n    \n}\n\nmsg.payload=DataArr;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 840,
        "wires": [
            [
                "80f7dcc23ea22063",
                "b4cb681a4d21d33a"
            ]
        ]
    },
    {
        "id": "57d0e6da969505d7",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": " Bike5 70079.csv",
        "func": "var message = {};\n\nvar D = new Date();\nvar TS = D.getTime();\nvar TS_String = new Date(TS).toISOString()\n// message.payload[\"TS\"] = TS\n// message.payload[\"TimeStamp\"] = TS_String;\n// message.payload[\"Records\"] = msg.Records;\n// message.payload[\"IMEI\"] = msg.IMEI;\n// message.payload[\"ICCID\"] = msg.ICCID;\n// message.payload[\"Records\"] = msg.RecordsCount;\n// message.payload[\"Alert\"] = msg.Alert;\n// message.payload[\"AlertDetails\"] = msg.AlertDetails;\n// message.payload[\"AlertMsg\"] = msg.AlertMsg;\n// message.payload[\"IP\"] = msg.ip;\n// message.payload[\"Port\"] = msg.port;\n// message.payload[\"Session\"] = msg._session.id;\n\nmessage.payload = TS + \",\" + \n    TS_String + \",\" + \n    msg.IMEI + \",\" + \n    msg.ICCID + \",\" + \n    msg.RecordsCount + \",\" + \n    msg.Alert + \",\" + \n    msg.AlertDetails + \",\" + \n    msg.AlertMsg + \",\" + \n    msg.ip + \",\" + \n    msg.port + \",\" + \n    msg._session.id  + \",\\\"\" + \n    msg.AVLRawData + \"\\\",\" + \n    JSON.stringify(msg.AVLDecodedData);\n\nvar today = new Date();\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\n\nfilename = yyyy  +\"\"+mm+\"\"+dd+ ' Bike5 70079.csv';\n\nmessage[\"filename\"] = filename;\n\nreturn message;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 1320,
        "wires": [
            [
                "1f688a0f2f851d0d"
            ]
        ]
    },
    {
        "id": "86391a7ed7c3bc1a",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": "UmersFirstTracker",
        "func": "let DataArr = [];\nlet tj = msg.AVLDecodedData;\n\nif(msg[\"IMEI\"]!==\"\")\n    DataArr.push(\"111,\"+msg[\"IMEI\"] + \",\"+ msg[\"ICCID\"]) \n\nif(msg[\"ICCID\"]!==\"\")\n    DataArr.push(\"110,\"+msg[\"ICCID\"])\n\nlet GNSS=0;\n\n// if(tj[\"ICCID\"]!==undefined && tj[\"ICCID\"]!==null && isNaN(tj[\"ICCID\"]))\n//     DataArr.push(\"110,\"+tj[\"ICCID\"])\n\nfor(let b=1;b<=parseInt(tj[\"RecordsCount\"]);b++){\n    let DTS=new Date();\n    if(!isNaN(Date.parse(tj[\"D\"+b+\"_Timestamp\"])) && tj[\"D\"+b+\"_Timestamp\"]!==undefined && tj[\"D\"+b+\"_Timestamp\"]!==null){\n        try{\n        DTS=tj[\"D\"+b+\"_Timestamp\"].replace(\".000Z\",\".000+00:00\")\n        }catch(e){}\n    }\n    if(tj[\"D\"+b+\"_GPS_Speed\"]!==undefined&&tj[\"D\"+b+\"_GPS_Speed\"]!==null)\n        DataArr.push(\"200,Speed,Speed,\"+tj[\"D\"+b+\"_GPS_Speed\"]+\",km/h,\"+DTS);\n    if(tj[\"D\"+b+\"_GPS_Satellites\"]!==undefined && tj[\"D\"+b+\"_GPS_Satellites\"]!==null)\n        DataArr.push(\"200,Satellites,Satellites,\"+tj[\"D\"+b+\"_GPS_Satellites\"]+\",Count,\"+DTS);\n\n    if(tj[\"D\"+b+\"_FutureDate\"]===undefined && tj[\"D\"+b+\"_FutureDate\"]===null)\n        tj[\"D\"+b+\"_FutureDate\"]=0;\n    DataArr.push(\"200,FutureDate,FutureDate,\"+tj[\"D\"+b+\"_FutureDate\"]+\",State,\"+DTS);\n\n\n    for(let kab=1;kab<=parseInt(tj[\"D\"+b+\"_IO_1Byte_Records\"]);kab++){\n        var TheID=parseInt(tj[\"D\"+b+\"_IO_1Byte_\"+kab+\"_ID\"])\n        var TheVal=parseInt(tj[\"D\"+b+\"_IO_1Byte_\"+kab+\"_Val\"])\n        if(TheID===239)\n            DataArr.push(\"200,Ignition,Ignition,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===240)\n            DataArr.push(\"200,Movement,Movement,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===21)\n            DataArr.push(\"200,GSMSignal,GSMSignal,\"+TheVal+\",bars,\"+DTS);\n        else if(TheID===113)//battery\n            DataArr.push(\"200,Battery,Battery,\"+TheVal+\",%,\"+DTS);\n        else if(TheID===252)//unplug detection\n            DataArr.push(\"200,UnplugDetection,UnplugDetection,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===246)//Tow detection\n            DataArr.push(\"200,TowDetection,TowDetection,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===69){//GNS Status\n            DataArr.push(\"200,GNSS_Status,GNSS_Status,\"+TheVal+\",State,\"+DTS);\n           GNSS = TheVal; \n        }\n    }\n\n    //only log locationif  GNSS FIX was recorded and satellites were higher than 1 for accuracy and if the timestamp was not in future\n    //0 - GNSS OFF        1 – GNSS ON with fix      2 - GNSS ON without fix      3 - GNSS sleep\n    if(GNSS===1 && parseInt(tj[\"D\"+b+\"_GPS_Satellites\"])>=1 && tj[\"D\"+b+\"_FutureDate\"]!==true &&\n            tj[\"D\"+b+\"_GPS_Lat\"]!==undefined && tj[\"D\"+b+\"_GPS_Lat\"]!==null && \n            tj[\"D\"+b+\"_GPS_Long\"]!==undefined && tj[\"D\"+b+\"_GPS_Long\"]!==null && \n            tj[\"D\"+b+\"_GPS_Alt\"]!==undefined && tj[\"D\"+b+\"_GPS_Alt\"]!==null)\n        DataArr.push(\"402,\"+tj[\"D\"+b+\"_GPS_Lat\"]+\",\"+tj[\"D\"+b+\"_GPS_Long\"]+\",\"+tj[\"D\"+b+\"_GPS_Alt\"]+\",,\"+DTS)\n    \n    for(let kab2=1;kab2<=parseInt(tj[\"D\"+b+\"_IO_2Byte_Records\"]);kab2++){\n        var TheID2=parseInt(tj[\"D\"+b+\"_IO_2Byte_\"+kab2+\"_ID\"])\n        var TheVal2=parseInt(tj[\"D\"+b+\"_IO_2Byte_\"+kab2+\"_Val\"])\n        if(TheID2===66)\n            DataArr.push(\"200,ExternalVoltage,ExternalVoltage,\"+(TheVal2*0.001)+\",V,\"+DTS);\n        else if(TheID2===205)//clell id\n            DataArr.push(\"111,,,,,,,\"+TheID2)\n        else if(TheID2===67)\n            DataArr.push(\"200,BatteryVoltage,BatteryVoltage,\"+(TheVal2*0.001)+\",V,\"+DTS);\n        else if(TheID2===68)\n            DataArr.push(\"200,BatteryCurrent,BatteryCurrent,\"+(TheVal2*0.001)+\",A,\"+DTS);\n    //Below was commented because we minimized the io params to optimize packet size and battery \n        // else if(TheID2===13)\n        //     DataArr.push(\"200,FuelRateGPS,FuelRateGPS,\"+(TheVal2*0.01)+\",l/100km,\"+DTS);\n        // else if(TheID2===15)\n        //     DataArr.push(\"200,EcoScore,EcoScore,\"+(TheVal2*0.01)+\",score,\"+DTS);\n    }\n    \n    //Below was commented because we minimized the io params to optimize packet size and battery \n    // for(let kab4=1;kab4<=parseInt(tj[\"D\"+b+\"_IO_4Byte_Records\"]);kab4++){\n    //     var TheID4=parseInt(tj[\"D\"+b+\"_IO_4Byte_\"+kab4+\"_ID\"])\n    //     var TheVal4=parseInt(tj[\"D\"+b+\"_IO_4Byte_\"+kab4+\"_Val\"])\n    //     if(TheID4===199)\n    //         DataArr.push(\"200,TripOdometer,TripOdometer,\"+TheVal4+\",m,\"+DTS);\n    //     else if(TheID4===16)\n    //         DataArr.push(\"200,TotalOdometer,TotalOdometer,\"+TheVal4+\",m,\"+DTS);\n    //     else if(TheID4===12)\n    //         DataArr.push(\"200,FuelUsed,FuelUsed,\"+(TheVal4*0.001)+\",l,\"+DTS);\n    // }\n    \n    // for(let kab8=1;kab8<=parseInt(tj[\"D\"+b+\"_IO_8Byte_Records\"]);kab8++){\n    //     var TheID8=parseInt(tj[\"D\"+b+\"_IO_8Byte_\"+kab8+\"_ID\"])\n    //     var TheVal8=parseInt(tj[\"D\"+b+\"_IO_8Byte_\"+kab8+\"_Val\"])\n    //     if(TheID8===)\n    //         DataArr.push(\"200,,,\"+TheVal8+\",,\"+DTS);\n    // }\n    \n}\n\nmsg.payload=DataArr;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 920,
        "wires": [
            [
                "f149ef8f706c4e70",
                "c11aa9edd7838a8b"
            ]
        ]
    },
    {
        "id": "c11aa9edd7838a8b",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 1100,
        "wires": []
    },
    {
        "id": "141b42a2e7a877d1",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": "Umers FMC230.csv",
        "func": "var message = {};\n\nvar D = new Date();\nvar TS = D.getTime();\nvar TS_String = new Date(TS).toISOString()\n// message.payload[\"TS\"] = TS\n// message.payload[\"TimeStamp\"] = TS_String;\n// message.payload[\"Records\"] = msg.Records;\n// message.payload[\"IMEI\"] = msg.IMEI;\n// message.payload[\"ICCID\"] = msg.ICCID;\n// message.payload[\"Records\"] = msg.RecordsCount;\n// message.payload[\"Alert\"] = msg.Alert;\n// message.payload[\"AlertDetails\"] = msg.AlertDetails;\n// message.payload[\"AlertMsg\"] = msg.AlertMsg;\n// message.payload[\"IP\"] = msg.ip;\n// message.payload[\"Port\"] = msg.port;\n// message.payload[\"Session\"] = msg._session.id;\n\nmessage.payload = TS + \",\" + \n    TS_String + \",\" + \n    msg.IMEI + \",\" + \n    msg.ICCID + \",\" + \n    msg.RecordsCount + \",\" + \n    msg.Alert + \",\" + \n    msg.AlertDetails + \",\" + \n    msg.AlertMsg + \",\" + \n    msg.ip + \",\" + \n    msg.port + \",\" + \n    msg._session.id  + \",\\\"\" + \n    msg.AVLRawData + \"\\\",\" + \n    JSON.stringify(msg.AVLDecodedData);\n\nvar today = new Date();\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\n\nfilename = yyyy  +\"\"+mm+\"\"+dd+ ' UmersFMC230.csv';\n\nmessage[\"filename\"] = filename;\n\nreturn message;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1360,
        "wires": [
            [
                "1f688a0f2f851d0d"
            ]
        ]
    },
    {
        "id": "0ab898c3cb69bbd2",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 820,
        "wires": []
    },
    {
        "id": "5cca4954a6c3c111",
        "type": "split",
        "z": "f05df52a173b55f6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1110,
        "y": 680,
        "wires": [
            [
                "28b7a6727fe580d1",
                "78aad1986a27cdde"
            ]
        ]
    },
    {
        "id": "cb2619c5111579ae",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "10616",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 460,
        "wires": []
    },
    {
        "id": "1f688a0f2f851d0d",
        "type": "file",
        "z": "f05df52a173b55f6",
        "name": "BikesData.csv",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1300,
        "y": 1200,
        "wires": [
            [
                "cfec47a96c286972"
            ]
        ]
    },
    {
        "id": "3434e7faaf37f086",
        "type": "split",
        "z": "f05df52a173b55f6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1110,
        "y": 720,
        "wires": [
            [
                "e48830fa5db65e9d",
                "24e914f6505bfe9f"
            ]
        ]
    },
    {
        "id": "47857fb11b8ea7f9",
        "type": "split",
        "z": "f05df52a173b55f6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1110,
        "y": 760,
        "wires": [
            [
                "836b4595b95faff6",
                "9de6a9e482f0d75c"
            ]
        ]
    },
    {
        "id": "e8633b0532d071db",
        "type": "split",
        "z": "f05df52a173b55f6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1110,
        "y": 800,
        "wires": [
            [
                "6593ee4a36e1788e",
                "c4c27dccbbf06568"
            ]
        ]
    },
    {
        "id": "80f7dcc23ea22063",
        "type": "split",
        "z": "f05df52a173b55f6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1110,
        "y": 840,
        "wires": [
            [
                "d5b6fce8aa454dfc",
                "e96be8da4df9ea74"
            ]
        ]
    },
    {
        "id": "f149ef8f706c4e70",
        "type": "split",
        "z": "f05df52a173b55f6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1130,
        "y": 920,
        "wires": [
            [
                "179769d4fcc4bf2a",
                "8e57422cbb351229",
                "53ae16f8c3b3fe13"
            ]
        ]
    },
    {
        "id": "28b7a6727fe580d1",
        "type": "mqtt out",
        "z": "f05df52a173b55f6",
        "d": true,
        "name": "Albusayra_FMC230_001_Prod",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "385f37425ca98538",
        "x": 1390,
        "y": 680,
        "wires": []
    },
    {
        "id": "78aad1986a27cdde",
        "type": "mqtt out",
        "z": "f05df52a173b55f6",
        "d": true,
        "name": "Albusayra_FMC230_001_Dev",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9c68adb1aaa37d91",
        "x": 1430,
        "y": 220,
        "wires": []
    },
    {
        "id": "cfec47a96c286972",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1483.4124755859375,
        "y": 1200.418701171875,
        "wires": []
    },
    {
        "id": "e48830fa5db65e9d",
        "type": "mqtt out",
        "z": "f05df52a173b55f6",
        "d": true,
        "name": "Albusayra_FMC230_002_Prod",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d95b802295f3487f",
        "x": 1390,
        "y": 720,
        "wires": []
    },
    {
        "id": "24e914f6505bfe9f",
        "type": "mqtt out",
        "z": "f05df52a173b55f6",
        "d": true,
        "name": "Albusayra_FMC230_002_Dev",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "39bb307e1a759a01",
        "x": 1430,
        "y": 260,
        "wires": []
    },
    {
        "id": "836b4595b95faff6",
        "type": "mqtt out",
        "z": "f05df52a173b55f6",
        "d": true,
        "name": "Albusayra_FMC230_003_Prod",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "54819f09d767b0cb",
        "x": 1390,
        "y": 760,
        "wires": []
    },
    {
        "id": "9de6a9e482f0d75c",
        "type": "mqtt out",
        "z": "f05df52a173b55f6",
        "d": true,
        "name": "Albusayra_FMC230_003_Dev",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "32eaee021723ded5",
        "x": 1430,
        "y": 300,
        "wires": []
    },
    {
        "id": "6593ee4a36e1788e",
        "type": "mqtt out",
        "z": "f05df52a173b55f6",
        "d": true,
        "name": "Albusayra_FMC230_004_Prod",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fef5973b48a0cbe7",
        "x": 1390,
        "y": 800,
        "wires": []
    },
    {
        "id": "c4c27dccbbf06568",
        "type": "mqtt out",
        "z": "f05df52a173b55f6",
        "d": true,
        "name": "Albusayra_FMC230_004_Dev",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "1a06af53d0dc8076",
        "x": 1430,
        "y": 340,
        "wires": []
    },
    {
        "id": "d5b6fce8aa454dfc",
        "type": "mqtt out",
        "z": "f05df52a173b55f6",
        "d": true,
        "name": "Albusayra_FMC230_005_Prod",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e7bb84491da9847c",
        "x": 1390,
        "y": 840,
        "wires": []
    },
    {
        "id": "e96be8da4df9ea74",
        "type": "mqtt out",
        "z": "f05df52a173b55f6",
        "d": true,
        "name": "Albusayra_FMC230_005_Dev",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "1aa0a0496a31e377",
        "x": 1430,
        "y": 380,
        "wires": []
    },
    {
        "id": "179769d4fcc4bf2a",
        "type": "mqtt out",
        "z": "f05df52a173b55f6",
        "d": true,
        "name": "UmersFMC230_C8y_Prod",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "b6fb5d071c21a067",
        "x": 1380,
        "y": 920,
        "wires": []
    },
    {
        "id": "53ae16f8c3b3fe13",
        "type": "mqtt out",
        "z": "f05df52a173b55f6",
        "d": true,
        "name": "UmersFMC230_Dev",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "373637bc766a5e6c",
        "x": 1400,
        "y": 180,
        "wires": []
    },
    {
        "id": "3ab5cef8ce755740",
        "type": "file in",
        "z": "f05df52a173b55f6",
        "name": "bikes_data.csv",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 940,
        "y": 1500,
        "wires": [
            [
                "7eb56bdc5eb5c48d"
            ]
        ]
    },
    {
        "id": "477defabf6acb89e",
        "type": "inject",
        "z": "f05df52a173b55f6",
        "name": "Read Bike1 10616.CSV",
        "props": [
            {
                "p": "filename",
                "v": "20222208 Bike1 10616.csv",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 660,
        "y": 1460,
        "wires": [
            [
                "3ab5cef8ce755740"
            ]
        ]
    },
    {
        "id": "2b6fe2c6e88033af",
        "type": "inject",
        "z": "f05df52a173b55f6",
        "name": "Bike2 10372 (sami) data.csv",
        "props": [
            {
                "p": "filename",
                "v": "20221509 Bike2 10372 (sami) data.csv",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 640,
        "y": 1500,
        "wires": [
            [
                "3ab5cef8ce755740"
            ]
        ]
    },
    {
        "id": "a0f310f0871d0889",
        "type": "inject",
        "z": "f05df52a173b55f6",
        "name": "Read  Bike3 10614.csv",
        "props": [
            {
                "p": "filename",
                "v": "20221407 Bike3 10614.csv",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 660,
        "y": 1540,
        "wires": [
            [
                "3ab5cef8ce755740"
            ]
        ]
    },
    {
        "id": "8181f785129cb1d7",
        "type": "inject",
        "z": "f05df52a173b55f6",
        "name": "Read Bike4 13071.csv",
        "props": [
            {
                "p": "filename",
                "v": "20221407 Bike4 13071.csv",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 660,
        "y": 1580,
        "wires": [
            [
                "3ab5cef8ce755740"
            ]
        ]
    },
    {
        "id": "057640c87e2c8dd0",
        "type": "inject",
        "z": "f05df52a173b55f6",
        "name": "Read  Bike5 70079.csv",
        "props": [
            {
                "p": "filename",
                "v": "20221407 Bike5 70079.csv",
                "vt": "str"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "x": 640,
        "y": 1660,
        "wires": [
            [
                "3ab5cef8ce755740"
            ]
        ]
    },
    {
        "id": "7eb56bdc5eb5c48d",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 1500,
        "wires": []
    },
    {
        "id": "f1b732fd1189f014",
        "type": "file in",
        "z": "f05df52a173b55f6",
        "name": "file given by get request",
        "filename": "",
        "format": "",
        "allProps": false,
        "x": 730,
        "y": 1800,
        "wires": [
            [
                "103d1b60736f1cf1"
            ]
        ]
    },
    {
        "id": "561b3f58e0910175",
        "type": "http in",
        "z": "f05df52a173b55f6",
        "name": "",
        "url": "/bikesdata",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 1860,
        "wires": [
            [
                "b2f65e412b04ccb4",
                "c4e61320725d5fc2"
            ]
        ]
    },
    {
        "id": "103d1b60736f1cf1",
        "type": "change",
        "z": "f05df52a173b55f6",
        "name": "Set Headers",
        "rules": [
            {
                "t": "set",
                "p": "headers",
                "pt": "msg",
                "to": "{}",
                "tot": "json"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "text/csv",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 970,
        "y": 1880,
        "wires": [
            [
                "1caa793cc65c128e"
            ]
        ]
    },
    {
        "id": "1caa793cc65c128e",
        "type": "http response",
        "z": "f05df52a173b55f6",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 960,
        "y": 2000,
        "wires": []
    },
    {
        "id": "8e57422cbb351229",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "Bike 1 866907052467015 ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 1080,
        "wires": []
    },
    {
        "id": "3d10c0d8a9d1bdf5",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "10614",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 540,
        "wires": []
    },
    {
        "id": "e3b2021581c5920f",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "Samis 13072",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 500,
        "wires": []
    },
    {
        "id": "9ef8108f8490b792",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "13071",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 580,
        "wires": []
    },
    {
        "id": "b4cb681a4d21d33a",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "70079",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 620,
        "wires": []
    },
    {
        "id": "a6960e5b2457d676",
        "type": "switch",
        "z": "f05df52a173b55f6",
        "d": true,
        "name": "",
        "property": "OddDate",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 910,
        "y": 520,
        "wires": [
            [
                "d885851bf819dac4",
                "70633c559c89d488"
            ]
        ]
    },
    {
        "id": "d885851bf819dac4",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 460,
        "wires": []
    },
    {
        "id": "70633c559c89d488",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": "Errors.CSV",
        "func": "var message = {};\n\nvar D = new Date();\nvar TS = D.getTime();\nvar TS_String = new Date(TS).toISOString()\n// message.payload[\"TS\"] = TS\n// message.payload[\"TimeStamp\"] = TS_String;\n// message.payload[\"Records\"] = msg.Records;\n// message.payload[\"IMEI\"] = msg.IMEI;\n// message.payload[\"ICCID\"] = msg.ICCID;\n// message.payload[\"Records\"] = msg.RecordsCount;\n// message.payload[\"Alert\"] = msg.Alert;\n// message.payload[\"AlertDetails\"] = msg.AlertDetails;\n// message.payload[\"AlertMsg\"] = msg.AlertMsg;\n// message.payload[\"IP\"] = msg.ip;\n// message.payload[\"Port\"] = msg.port;\n// message.payload[\"Session\"] = msg._session.id;\n\nmessage.payload = TS + \",\" + \n    TS_String + \",\" + \n    msg.IMEI + \",\" + \n    msg.ICCID + \",\" + \n    msg.OddDate + \",\" +\n    msg.RecordsCount + \",\" + \n    msg.Alert + \",\" + \n    msg.AlertDetails + \",\" + \n    msg.AlertMsg + \",\" + \n    msg.ip + \",\" + \n    msg.port + \",\" + \n    msg._session.id  + \",\\\"\" + \n    msg.AVLRawData + \"\\\",\" + \n    JSON.stringify(msg.AVLDecodedData);\n\nvar today = new Date();\nvar dd = String(today.getDate()).padStart(2, '0');\nvar mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\nvar yyyy = today.getFullYear();\n\nfilename = yyyy  +\"\"+mm+' Errors.csv';\n\nmessage[\"filename\"] = filename;\n\nreturn message;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 1400,
        "wires": [
            [
                "1f688a0f2f851d0d"
            ]
        ]
    },
    {
        "id": "b2f65e412b04ccb4",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 1960,
        "wires": []
    },
    {
        "id": "c4e61320725d5fc2",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": "set filenname",
        "func": "msg[\"filename\"] = msg.payload.filename;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1820,
        "wires": [
            [
                "f1b732fd1189f014"
            ]
        ]
    },
    {
        "id": "bd75f4252da56650",
        "type": "inject",
        "z": "f05df52a173b55f6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 2120,
        "wires": [
            [
                "b852d08294cb7693"
            ]
        ]
    },
    {
        "id": "b852d08294cb7693",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": "epoch",
        "func": "\n\n var TimeStamp = 1663321993000;\n  var TheCorrectedTimeStamp = new Date(TimeStamp).toISOString();\nmsg.TimeStamp= TheCorrectedTimeStamp\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 2140,
        "wires": [
            [
                "1353056bc19f6d2c"
            ]
        ]
    },
    {
        "id": "1353056bc19f6d2c",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 2140,
        "wires": []
    },
    {
        "id": "e257232df8813660",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": "parse data",
        "func": "let AVL = msg.AVLDecodedData;\n\nlet MeasurementsREST = {\"measurements\": []}\nlet LocationsRESTs = []\n\nfor(let b=1;b<=parseInt(AVL[\"RecordsCount\"]);b++){\n    let GNSS=0;\n    let MR = {type:\"payload\",time:AVL[\"D\"+b+\"_Timestamp\"],\"source\": {\"id\":msg.C8YiD },\"pl\":{}}\n\n    if(!isBadNo(AVL[\"D\"+b+\"_GPS_Speed\"])) MR[\"pl\"][\"Speed\"]={\"value\":AVL[\"D\"+b+\"_GPS_Speed\"],\"unit\":\"km/h\"};\n    if(!isBadNo(AVL[\"D\"+b+\"_GPS_Satellites\"])) MR[\"pl\"][\"Satellites\"]={\"value\":AVL[\"D\"+b+\"_GPS_Satellites\"],\"unit\": \"Count\" } \n    if(!isBadNo(AVL[\"D\"+b+\"_Ignition\"])) MR[\"pl\"][\"Ignition\"]={\"value\":AVL[\"D\"+b+\"_Ignition\"],\"unit\": \"State\" } \n    if(!isBadNo(AVL[\"D\"+b+\"_Movement\"])) MR[\"pl\"][\"Movement\"]={\"value\":AVL[\"D\"+b+\"_Movement\"],\"unit\": \"State\" } \n    if(!isBadNo(AVL[\"D\"+b+\"_UnplugDetection\"])) MR[\"pl\"][\"UnplugDetection\"]={\"value\":AVL[\"D\"+b+\"_UnplugDetection\"],\"unit\": \"State\" } \n    if(!isBadNo(AVL[\"D\"+b+\"_TowDetection\"])) MR[\"pl\"][\"TowDetection\"]={\"value\":AVL[\"D\"+b+\"_TowDetection\"],\"unit\": \"State\" } \n    if(!isBadNo(AVL[\"D\"+b+\"_GSMSignal\"])) MR[\"pl\"][\"GSMSignal\"]={\"value\":AVL[\"D\"+b+\"_GSMSignal\"],\"unit\": \"bars\" } \n    if(!isBadNo(AVL[\"D\"+b+\"_Battery\"])) MR[\"pl\"][\"Battery\"]={\"value\":AVL[\"D\"+b+\"_Battery\"],\"unit\": \"%\" } \n    if(!isBadNo(AVL[\"D\"+b+\"_BatteryVoltage\"])) MR[\"pl\"][\"BatteryVoltage\"]={\"value\":AVL[\"D\"+b+\"_BatteryVoltage\"],\"unit\": \"V\" } \n    if(!isBadNo(AVL[\"D\"+b+\"_BatteryCurrent\"])) MR[\"pl\"][\"BatteryCurrent\"]={\"value\":AVL[\"D\"+b+\"_BatteryCurrent\"],\"unit\": \"A\" } \n    if(!isBadNo(AVL[\"D\"+b+\"_ExternalVoltage\"])) MR[\"pl\"][\"ExternalVoltage\"]={\"value\":AVL[\"D\"+b+\"_ExternalVoltage\"],\"unit\": \"V\" } \n    if(!isBadNo(AVL[\"D\"+b+\"_GNSS_Status\"])) MR[\"pl\"][\"GNSS_Status\"]={\"value\":AVL[\"D\"+b+\"_GNSS_Status\"],\"unit\": \"Status\" } \n    GNSS=AVL[\"D\"+b+\"_GNSS_Status\"];\n    \n    if(isBadNo(AVL[\"D\"+b+\"_FutureDate\"]))AVL[\"D\"+b+\"_FutureDate\"]=0;\n    MR[\"pl\"][\"FutureDate\"]={\"value\":AVL[\"D\"+b+\"_FutureDate\"],\"unit\": \"State\" }\n    \n    MeasurementsREST.measurements.push(MR);\n\n\n\n    //only log locationif  GNSS FIX was recorded and satellites were higher than 1 for accuracy and if the timestamp was not in future\n    //0 - GNSS OFF        1 – GNSS ON with fix      2 - GNSS ON without fix      3 - GNSS sleep\n    if(GNSS===1 && parseInt(AVL[\"D\"+b+\"_GPS_Satellites\"])>=1 && AVL[\"D\"+b+\"_FutureDate\"]!==true &&\n            !isBadNo(AVL[\"D\"+b+\"_GPS_Lat\"]) && !isBadNo(AVL[\"D\"+b+\"_GPS_Long\"]) && !isBadNo(AVL[\"D\"+b+\"_GPS_Alt\"])){\n\n            LocationsRESTs.push(\n                {\n                    \"type\": \"c8y_LocationUpdate\",\"time\": AVL[\"D\"+b+\"_Timestamp\"], \"text\": \"Location updated\", \"source\": {\"id\":msg.C8YiD},\n                    \"c8y_Position\": {\"alt\": 1, \"lat\": AVL[\"D\"+b+\"_GPS_Lat\"], \"lng\": AVL[\"D\"+b+\"_GPS_Long\"]}\n                }\n            )\n    }\n    \n}\n\n\nmsg.MeasurementsREST=MeasurementsREST;\nmsg.LocationsRESTs=LocationsRESTs;\nreturn msg;\n\nfunction isBadNo(TheNo) {  \n    if(TheNo===undefined || TheNo===null || isNaN(TheNo))\n        return true;\n    else \n        return false;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 920,
        "wires": [
            [
                "26a78676eb339b44",
                "45e9e496ba0efd90",
                "14b3bca31d7dd470"
            ]
        ]
    },
    {
        "id": "9c7674860b1ac301",
        "type": "http request",
        "z": "f05df52a173b55f6",
        "name": "Measurements",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://demo-solutions.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 420,
        "y": 1040,
        "wires": [
            [
                "25a67c17d557c58d"
            ]
        ]
    },
    {
        "id": "0add7b3a594994c7",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 1080,
        "wires": []
    },
    {
        "id": "663cf4a1c96e5042",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": "set headers and ExternalID in url ",
        "func": "var theID = \"\";\nif(msg.IMEI!==\"\" && msg.IMEI !== undefined && msg.IMEI !== null) \n    theID=msg.IMEI;\nelse if(msg.ICCID!==\"\" && msg.ICCID !== undefined && msg.ICCID !== null)\n    theID=msg.ICCID;\nelse\n    msg.NoID=true;\n    \n\nif(theID!==\"\"){\n    msg.NoID=false;\n    \n    msg.headers = {};\n    msg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\n    msg.headers['Content-Type'] = 'application/json';\n    msg.headers['Accept'] = 'application/json';\n    msg.url=\"https://t1210372600.emea.cumulocity.com/identity/externalIds/c8y_Serial/\"+theID;\n    msg.payload={}   \n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 720,
        "wires": [
            [
                "baa3ed5aabe8dd29"
            ]
        ]
    },
    {
        "id": "baa3ed5aabe8dd29",
        "type": "switch",
        "z": "f05df52a173b55f6",
        "name": "Check If ExtID Present",
        "property": "NoID",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 260,
        "y": 760,
        "wires": [
            [
                "77abf45975000eb5"
            ]
        ]
    },
    {
        "id": "77abf45975000eb5",
        "type": "http request",
        "z": "f05df52a173b55f6",
        "name": "Find ID from ExternalID",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 250,
        "y": 800,
        "wires": [
            [
                "9c90b72e11f076c6",
                "265645458a913010"
            ]
        ]
    },
    {
        "id": "9c90b72e11f076c6",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": "extract id ",
        "func": "var k = JSON.parse(msg.payload);\n\nif(k.managedObject===undefined||k.managedObject.id===undefined)\n    msg.C8YiD = null;\nelse\n    msg.C8YiD = k.managedObject.id\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 840,
        "wires": [
            [
                "0fbb3851c807303c"
            ]
        ]
    },
    {
        "id": "0fbb3851c807303c",
        "type": "switch",
        "z": "f05df52a173b55f6",
        "name": "Check If C8YID found",
        "property": "C8YiD",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 260,
        "y": 880,
        "wires": [
            [
                "e257232df8813660"
            ]
        ]
    },
    {
        "id": "49be459a9f20989e",
        "type": "http request",
        "z": "f05df52a173b55f6",
        "name": "LocationEvent",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://demo-solutions.emea.cumulocity.com/event/events",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 160,
        "y": 1080,
        "wires": [
            [
                "0add7b3a594994c7"
            ]
        ]
    },
    {
        "id": "26a78676eb339b44",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": "MeasurementsFlow",
        "func": "let K = msg.MeasurementsREST;\n\n// msg={}\n\nmsg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.url=\"\";\n\nmsg.payload=K;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1000,
        "wires": [
            [
                "9c7674860b1ac301"
            ]
        ]
    },
    {
        "id": "25a67c17d557c58d",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 1040,
        "wires": []
    },
    {
        "id": "45e9e496ba0efd90",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": "LocationsFlow",
        "func": "let K = msg.LocationsRESTs;\n// msg={};\nmsg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.event+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.event+json';\nmsg.url=\"\";\nmsg.payload = K;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 1000,
        "wires": [
            [
                "5e08f011052085ad"
            ]
        ]
    },
    {
        "id": "5e08f011052085ad",
        "type": "split",
        "z": "f05df52a173b55f6",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 190,
        "y": 1040,
        "wires": [
            [
                "49be459a9f20989e"
            ]
        ]
    },
    {
        "id": "395106bbcc1300b9",
        "type": "inject",
        "z": "f05df52a173b55f6",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "00 00 00 00 00 00 01 bf 08 06 00 00 01 83 9f 8f c9 00 00 ff 36 f3 51 1e a1 20 e8 00 78 00 99 07 00 06 00 0d 07 ef 00 f0 01 15 05 45 01 71 4f f6 01 fc 01 04 42 03 f5 18 00 06 43 0f 34 44 00 00 00 02 0b 00 00 00 02 15 0b cf 9c 0e 00 00 00 00 7e 84 d9 70 00 00 01 83 9f 8f dc 88 00 ff 36 f4 8e 1e a1 1e a0 00 78 00 af 08 00 08 00 0d 07 ef 00 f0 01 15 05 45 01 71 51 f6 01 fc 01 04 42 00 00 18 00 08 43 0f 4a 44 00 00 00 02 0b 00 00 00 02 15 0b cf 9c 0e 00 00 00 00 7e 84 d9 70 00 00 01 83 34 77 7e b0 00 ff 36 f6 2e 1e a1 25 da 00 8b 00 00 06 00 00 00 0d 07 ef 00 f0 01 15 05 45 01 71 5f f6 00 fc 00 04 42 30 63 18 00 00 43 0f e7 44 00 6a 00 02 0b 00 00 00 02 15 0b cf 9c 0e 00 00 00 00 7e 84 d9 70 00 00 01 83 9f 91 bd 00 00 ff 36 f4 f2 1e a1 26 a2 00 8c 00 00 07 00 00 00 0d 07 ef 00 f0 01 15 05 45 01 71 60 f6 00 fc 00 04 42 30 63 18 00 00 43 0f f1 44 00 64 00 02 0b 00 00 00 02 15 0b cf 9c 0e 00 00 00 00 7e 84 d9 70 00 00 01 83 9f 91 d4 70 00 ff 36 f5 03 1e a1 26 81 00 8b 00 00 07 00 00 f0 0d 07 ef 00 f0 00 15 05 45 01 71 60 f6 00 fc 00 04 42 30 63 18 00 00 43 0f f6 44 00 63 00 02 0b 00 00 00 02 15 0b cf 9c 0e 00 00 00 00 7e 84 d9 70 00 00 01 83 9f 92 22 90 00 ff 36 f5 03 1e a1 26 81 00 8a 00 00 08 00 00 00 0d 07 ef 00 f0 00 15 05 45 01 71 61 f6 00 fc 00 04 42 30 63 18 00 00 43 0f fa 44 00 60 00 02 0b 00 00 00 02 15 0b cf 9c 0e 00 00 00 00 7e 84 d9 70 06 00 00 d5 4b",
        "payloadType": "str",
        "x": 170,
        "y": 460,
        "wires": [
            [
                "26be4d6442f5211d"
            ]
        ]
    },
    {
        "id": "7ba54e50ad8fb0f5",
        "type": "comment",
        "z": "f05df52a173b55f6",
        "name": "Convert Binary data into Hex String padded by spaces for each parsing",
        "info": "Convert Binary data into Hex String padded by spaces for each parsing\n",
        "x": 510,
        "y": 220,
        "wires": []
    },
    {
        "id": "815cde9580cbdec3",
        "type": "comment",
        "z": "f05df52a173b55f6",
        "name": "Check if message is re/connection from deveice and hence its sending IMEI or if it is a data packet (Google Telotinka Codec 8)",
        "info": "",
        "x": 860,
        "y": 280,
        "wires": []
    },
    {
        "id": "66ac99f83d5fe89c",
        "type": "comment",
        "z": "f05df52a173b55f6",
        "name": "Responses are very important.  Especially data packet one needs to confirm how many records have been received. ",
        "info": "",
        "x": 1270,
        "y": 380,
        "wires": []
    },
    {
        "id": "c4d4d74f977f3f71",
        "type": "comment",
        "z": "f05df52a173b55f6",
        "name": "If imei then store it against the session or IP address so all forthcoming messages are mapped correctly",
        "info": "",
        "x": 910,
        "y": 320,
        "wires": []
    },
    {
        "id": "99a6d0ed672dc864",
        "type": "comment",
        "z": "f05df52a173b55f6",
        "name": "if Data packet then PROCESS IT (google teltonika AVL Codes)  and store in a easy JSON object for later usage",
        "info": "",
        "x": 470,
        "y": 500,
        "wires": []
    },
    {
        "id": "75639b0e85055f5b",
        "type": "comment",
        "z": "f05df52a173b55f6",
        "name": "sometimes IP address switchover, in this case validate using ICCID",
        "info": "",
        "x": 740,
        "y": 580,
        "wires": []
    },
    {
        "id": "52bf7d16c2cf72b0",
        "type": "comment",
        "z": "f05df52a173b55f6",
        "name": "Below flows will simply forumate a POST request to push all this data. LocationEVENTs is separate API to Measurements",
        "info": "",
        "x": 750,
        "y": 700,
        "wires": []
    },
    {
        "id": "fa7db27d28fab13d",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": "DecodeIMEIOLD",
        "func": "var a = msg.payload.split(\" \"),i;\nvar b = [];\n\nb=a.splice(2).join(\"\").split(\"\");\nfor (i = 0; i < b.length; i++) {\n    b.splice(i,1);\n}\n\n\nvar TheIP=msg.ip;\nvar TheIMEI = b.join(\"\");\nif(TheIP.trim()===\"\")\n    return {payload:\"no IP specified\"}\nelse if(TheIMEI.trim()===\"\")\n    return {payload:\"no imei specified\"}\nelse{\n      \n    var TheIPsList={};\n    msg.IMEI = TheIMEI;\n    try{\n        TheIPsList=global.get(\"IPsList\");\n    }catch(e){\n        TheIPsList={\"firstKey\":\"firstVal\"}\n        global.set(\"IPsList\",TheIPsList)\n    }\n    \n    if(TheIPsList===undefined || TheIPsList===null)\n        TheIPsList={\"FirstEntry\":\"FirstEntry\"}\n    else{\n        var c=0;\n        Object.keys(TheIPsList).forEach(function(key){\n            c++;\n            if (TheIPsList[key].trim() === TheIMEI.trim()) {\n                msg[\"DeletedKey\"] = key;\n                msg[\"DeletedVal\"] = TheIPsList[key];\n                delete TheIPsList[key];\n            }\n        });\n    }\n\n    TheIPsList[String(TheIP)]=TheIMEI;\n\n    global.set(\"IPsList\",TheIPsList);\n\n    msg.payload = TheIPsList;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "14b3bca31d7dd470",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 900,
        "wires": []
    },
    {
        "id": "3b95cabb8ff459a3",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 1180,
        "wires": []
    },
    {
        "id": "030c9529217fb8aa",
        "type": "comment",
        "z": "f05df52a173b55f6",
        "name": "ensure only pilot devices are processed by this flow",
        "info": "",
        "x": 190,
        "y": 520,
        "wires": []
    },
    {
        "id": "b24f9917893e0a6f",
        "type": "function",
        "z": "f05df52a173b55f6",
        "name": "FilterPOCsIMEIs",
        "func": "var POCIMEIFound=false;\nvar TheSessionsList={};\nvar TheIMEI=\"\";\n// try{\n    TheSessionsList=global.get(\"TCPSessions\");\n    TheIMEI = TheSessionsList[msg._session.id];\n    //msg[\"ts\"]=TheSessionsList;\n// }catch(e){}\n\nconst POCIMEIs = [\"866907055227788\",\"866907052467015\",\"866907053429923\",\"866907052435962\",\"866907053430095\",\"866907053429923\",\"866907053430038\",\"866907055230402\"]\nif(POCIMEIs.includes(TheIMEI))\n    msg[\"POCIMEIFound\"]=true;\n\nmsg[\"IMEI\"]=TheIMEI;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 420,
        "wires": [
            [
                "ea1d84a973b0f8b6",
                "2ddbbabd323d1719"
            ]
        ]
    },
    {
        "id": "0a36099ebf67308b",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 400,
        "wires": []
    },
    {
        "id": "ea1d84a973b0f8b6",
        "type": "switch",
        "z": "f05df52a173b55f6",
        "name": "",
        "property": "POCIMEIFound",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 630,
        "y": 400,
        "wires": [
            [
                "0a36099ebf67308b",
                "26be4d6442f5211d"
            ]
        ]
    },
    {
        "id": "2ddbbabd323d1719",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 360,
        "wires": []
    },
    {
        "id": "265645458a913010",
        "type": "debug",
        "z": "f05df52a173b55f6",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 510,
        "y": 840,
        "wires": []
    },
    {
        "id": "78548e33147c30af",
        "type": "function",
        "z": "0b341faebdc36f06",
        "name": "setHeadersSignIn",
        "func": "msg.headers = {};\n//msg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/json';\nmsg.headers['Accept'] = '*/*';\n\n//msg.headers['Ocp-Apim-Subscription-Key'] = '789e8f42fa5a4811ab8e7405fc92eba1';\nmsg.payload = {\n    \"userName\":\"umer.fraz@invixible.com\",\n    \"password\":\"Invexal_2022!\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 140,
        "wires": [
            [
                "b37e3f42a67cb948"
            ]
        ]
    },
    {
        "id": "4885f4064cb6183d",
        "type": "inject",
        "z": "0b341faebdc36f06",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "30 01 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 260,
        "wires": [
            [
                "78548e33147c30af"
            ]
        ]
    },
    {
        "id": "b37e3f42a67cb948",
        "type": "http request",
        "z": "0b341faebdc36f06",
        "name": "SignIn2GetToken",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://rensair-backend.xelerate.solutions/api/signin",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 570,
        "y": 260,
        "wires": [
            [
                "97d32bd51d06668a"
            ]
        ]
    },
    {
        "id": "79d4ab9065b83819",
        "type": "debug",
        "z": "0b341faebdc36f06",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 480,
        "wires": []
    },
    {
        "id": "97d32bd51d06668a",
        "type": "json",
        "z": "0b341faebdc36f06",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": true,
        "x": 590,
        "y": 320,
        "wires": [
            [
                "617eec5f6d7ce4e6"
            ]
        ]
    },
    {
        "id": "617eec5f6d7ce4e6",
        "type": "switch",
        "z": "0b341faebdc36f06",
        "name": "checkSuccess",
        "property": "payload.success",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 640,
        "y": 380,
        "wires": [
            [
                "4fe1b3c97bd8d262"
            ]
        ]
    },
    {
        "id": "4fe1b3c97bd8d262",
        "type": "function",
        "z": "0b341faebdc36f06",
        "name": "extract token",
        "func": "msg.signinToken = msg.payload.payload[0].token;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 440,
        "wires": [
            [
                "bfe765b88a7caecb"
            ]
        ]
    },
    {
        "id": "bfe765b88a7caecb",
        "type": "function",
        "z": "0b341faebdc36f06",
        "name": "setupCall",
        "func": "var startDT = new Date();\nvar endDT = new Date();\nstartDT.setUTCHours(0,0,0,0)\nendDT.setUTCHours(-24,0,0,0)\n\n\nmsg.url = \"https://rensair-backend.xelerate.solutions/api/monitoring/get/9211?\"+\n\"pageSize=10000&withTotalPages=true&\"+\n\"dateTo=\"+startDT.toISOString()+\"&\" +\n\"dateFrom=\"+endDT.toISOString()+\"&\"+\n\"dataPoints=[%22AQI%22,%22Temperature%22,%22Humidity%22,%22CO2%22,%22VOC%22,%22PM1%22,\"+\n\"%22PM2_5%22,%22PM4%22,%22PM10%22,%22SignalStrength%22,%22pollutant_source%22,%22FilterRemainingTime%22,\"+\n\"%22UVError%22,%22UVRunTime%22]\"\n\n\nmsg.headers = {};\n//msg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/json';\nmsg.headers['Accept'] = '*/*';\nmsg.headers['x-access-token'] = msg.signinToken;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 440,
        "wires": [
            [
                "a11b00c109d5eb94",
                "631bd69bf16e8291"
            ]
        ]
    },
    {
        "id": "a11b00c109d5eb94",
        "type": "http request",
        "z": "0b341faebdc36f06",
        "name": "History",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1060,
        "y": 460,
        "wires": [
            [
                "79d4ab9065b83819",
                "987be19a93a1dd33"
            ]
        ]
    },
    {
        "id": "631bd69bf16e8291",
        "type": "debug",
        "z": "0b341faebdc36f06",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 320,
        "wires": []
    },
    {
        "id": "55d88dfda2b59a44",
        "type": "debug",
        "z": "0b341faebdc36f06",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 600,
        "wires": []
    },
    {
        "id": "987be19a93a1dd33",
        "type": "function",
        "z": "0b341faebdc36f06",
        "name": "",
        "func": "msg.payload = msg.payload.payload.data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 540,
        "wires": [
            [
                "8f3ddecf258fce6f"
            ]
        ]
    },
    {
        "id": "8f3ddecf258fce6f",
        "type": "json-2-csv",
        "z": "0b341faebdc36f06",
        "name": "",
        "x": 1100,
        "y": 600,
        "wires": [
            [
                "55d88dfda2b59a44",
                "eb6f4303a27e5ef7"
            ]
        ]
    },
    {
        "id": "eb6f4303a27e5ef7",
        "type": "file",
        "z": "0b341faebdc36f06",
        "name": "POC03",
        "filename": "POC03_Data.csv",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1120,
        "y": 680,
        "wires": [
            [
                "d119fc428e6698ee",
                "77e19b1208375f39"
            ]
        ]
    },
    {
        "id": "d119fc428e6698ee",
        "type": "debug",
        "z": "0b341faebdc36f06",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 680,
        "wires": []
    },
    {
        "id": "f7471b82dae6a035",
        "type": "inject",
        "z": "0b341faebdc36f06",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 760,
        "y": 820,
        "wires": [
            [
                "77e19b1208375f39"
            ]
        ]
    },
    {
        "id": "77e19b1208375f39",
        "type": "file in",
        "z": "0b341faebdc36f06",
        "name": "",
        "filename": "POC03_Data.csv",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 970,
        "y": 820,
        "wires": [
            [
                "b42acafc647cce87"
            ]
        ]
    },
    {
        "id": "032985a1f2883ffa",
        "type": "e-mail",
        "z": "0b341faebdc36f06",
        "server": "smtp.gmail.com",
        "port": "465",
        "secure": true,
        "tls": true,
        "name": "umerfraz@gmail.com",
        "dname": "GMAIL",
        "x": 1340,
        "y": 800,
        "wires": []
    },
    {
        "id": "b42acafc647cce87",
        "type": "function",
        "z": "0b341faebdc36f06",
        "name": "",
        "func": "msg.filename = \"POC03_Data.csv\";\nmsg.topic = \"POC03 Data Extract for yesterday\"\nmsg.description = \"Hello,\"+\n\"\\n\\nThis is an automated email generated by Rensair IoT Platform. Please find the data of POC03 Air Purifier for yesterday attached herewith.\"+\n\"\\n\\nIn case of any question feel free to contact support@invixible.com. \\n\\nThanks & regards\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 820,
        "wires": [
            [
                "b34fb0b9f854d38d"
            ]
        ]
    },
    {
        "id": "b34fb0b9f854d38d",
        "type": "e-mail",
        "z": "0b341faebdc36f06",
        "server": "smtp.office365.com",
        "port": "587",
        "secure": false,
        "tls": false,
        "name": "umer.fraz@invixible.com",
        "dname": "adminiot",
        "x": 1360,
        "y": 880,
        "wires": []
    },
    {
        "id": "ae878681987c4695",
        "type": "http in",
        "z": "a83f932318520f19",
        "d": true,
        "name": "Remora2",
        "url": "remora",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 580,
        "wires": [
            [
                "0ba264531248be17",
                "ae40262bdf9e687e",
                "c931843826b74e0c",
                "2cf70ef1a3c493d3"
            ]
        ]
    },
    {
        "id": "ae40262bdf9e687e",
        "type": "http response",
        "z": "a83f932318520f19",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 660,
        "y": 540,
        "wires": []
    },
    {
        "id": "466917323b0b73fd",
        "type": "debug",
        "z": "a83f932318520f19",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 980,
        "wires": []
    },
    {
        "id": "29d4d22f0d6f16e0",
        "type": "mqtt out",
        "z": "a83f932318520f19",
        "d": true,
        "name": "DevRemora383076_Dev",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d3f816f5a99ddb5b",
        "x": 1110,
        "y": 660,
        "wires": []
    },
    {
        "id": "0ba264531248be17",
        "type": "switch",
        "z": "a83f932318520f19",
        "name": "DeviceIdentifier",
        "property": "payload.SerNo",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "363076",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "383565",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "383568",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 220,
        "y": 720,
        "wires": [
            [
                "d2a194deb9367b75",
                "4a3d8151239f9c46"
            ],
            [
                "bb18f569754a9672",
                "1cee8bb0948a01ca"
            ],
            [
                "527a685fb3a7dcad",
                "f6c611ae48db2a80"
            ]
        ]
    },
    {
        "id": "d2a194deb9367b75",
        "type": "function",
        "z": "a83f932318520f19",
        "name": "MetaData",
        "func": "let Metadata=[];\nMetadata.push(\"110,\"+msg.payload.SerNo+\",Remora2,\"+msg.payload.FW);\nMetadata.push(\"111,\"+msg.payload.IMEI+\",\"+msg.payload.ICCID+\",\");\n\nreturn {payload:Metadata};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 660,
        "wires": [
            [
                "dbc6496163798b98",
                "c931843826b74e0c"
            ]
        ]
    },
    {
        "id": "4a3d8151239f9c46",
        "type": "function",
        "z": "a83f932318520f19",
        "name": "Location & Stats",
        "func": "let DataArr = [];\nfor(let i=0;i<msg.payload.Records.length;i++){\n    let RecordFields = msg.payload.Records[i].Fields;\n    //let DTS = (msg.payload.Records[i].DateUTC.substring(6,10) + \"-\"+ msg.payload.Records[i].DateUTC.substring(3,5)  + \"-\" + msg.payload.Records[i].DateUTC.substring(0,2) + \"T\" +  msg.payload.Records[i].DateUTC.substring(11,20)+\".000Z\");\n    let DTS=msg.payload.Records[i].DateUTC.replace(\" \",\"T\")+\".000+00:00\"\n    for(let j=0;j<RecordFields.length;j++){\n        let Field = RecordFields[j];\n\n        //clear shock\n        let Shock=\"200,Shock,Shock,\"+0+\",State,\"+DTS;\n        \n        if(Field.FType==0){\n            // let GPS_DTS = (Field.GpsUTC.substring(6,10) + \"-\"+ Field.GpsUTC.substring(3,5)  + \"-\" + Field.GpsUTC.substring(0,2) + \"T\" +  Field.GpsUTC.substring(11,20)+\".000Z\");\n            let GPS_DTS = Field.GpsUTC.replace(\" \",\"T\")+\".000+00:00\"\n            let Loc=\"402,\"+ \n                Field.Lat+\",\"+\n                Field.Long+\",\"+\n                Field.Alt+\",\"+\n                Field.PosAcc+\",\"+\n                DTS;//GPS_DTS;\n            DataArr.push(Loc);    \n\n            let Speed = \"200,Speed,Speed,\"+(Field.Spd/100)+\",m/s,\"+DTS;//GPS_DTS;\n            DataArr.push(Speed);    \n        }else if(Field.FType==6){\n/*            let Temp=\"211,\"+ \n                (Field.AnalogueData[\"3\"])/100+\",\"+\n                msg.payload.Records[i].DateUTC.replace(\" \",\"T\")+\"Z\";*/\n            let Temp=\"200,Temperature,Temperature,\"+ (Field.AnalogueData[\"3\"])/100+\",°C,\"+DTS;\n            DataArr.push(Temp);    \n/*            let Batt=\"212,\"+ \n                (Field.AnalogueData[\"1\"])/1000+\",\"+\n                msg.payload.Records[i].DateUTC.replace(\" \",\"T\")+\"Z\";*/\n            let Batt_V = (Field.AnalogueData[\"1\"])/1000;\n            let Batt_P = ((Batt_V - 0) / (7.3 - 0)) * 100;\n            let Batt=\"200,Battery,Battery,\"+ Batt_P +\",V,\"+DTS;\n\n            DataArr.push(Batt);    \n        }else if(Field.FType==2){\n            let k = (Field.DevStat >>>6).toString(2);\n            let Tamper=\"200,Tamper,Tamper,\"+ k+\",State,\"+ DTS;\n\n            DataArr.push(Tamper);    \n        }else if(Field.FType==24){\n            Shock=\"200,Shock,Shock,\"+ 1+\",State,\"+ DTS;\n        }\n        DataArr.push(Shock);    \n    }\n}\nreturn {payload:DataArr};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 720,
        "wires": [
            [
                "71aac2690c5bd161",
                "c931843826b74e0c"
            ]
        ]
    },
    {
        "id": "71aac2690c5bd161",
        "type": "split",
        "z": "a83f932318520f19",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 590,
        "y": 720,
        "wires": [
            [
                "29d4d22f0d6f16e0",
                "c0fa38d7c13afe86",
                "466917323b0b73fd",
                "2cf70ef1a3c493d3"
            ]
        ]
    },
    {
        "id": "dbc6496163798b98",
        "type": "split",
        "z": "a83f932318520f19",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 570,
        "y": 660,
        "wires": [
            [
                "29d4d22f0d6f16e0",
                "c0fa38d7c13afe86",
                "466917323b0b73fd",
                "2cf70ef1a3c493d3"
            ]
        ]
    },
    {
        "id": "bb3147429fd8a958",
        "type": "mqtt out",
        "z": "a83f932318520f19",
        "d": true,
        "name": "Remora383565_Dev",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79c1d4f68e234a3e",
        "x": 1100,
        "y": 920,
        "wires": []
    },
    {
        "id": "bb18f569754a9672",
        "type": "function",
        "z": "a83f932318520f19",
        "name": "MetaData",
        "func": "let Metadata=[];\nMetadata.push(\"110,\"+msg.payload.SerNo+\",Remora2,\"+msg.payload.FW);\nMetadata.push(\"111,\"+msg.payload.IMEI+\",\"+msg.payload.ICCID+\",\");\n\nreturn {payload:Metadata};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 860,
        "wires": [
            [
                "9176f640c6f034bc",
                "c931843826b74e0c"
            ]
        ]
    },
    {
        "id": "1cee8bb0948a01ca",
        "type": "function",
        "z": "a83f932318520f19",
        "name": "Location & Stats",
        "func": "let DataArr = [];\nfor(let i=0;i<msg.payload.Records.length;i++){\n    let RecordFields = msg.payload.Records[i].Fields;\n    //let DTS = (msg.payload.Records[i].DateUTC.substring(6,10) + \"-\"+ msg.payload.Records[i].DateUTC.substring(3,5)  + \"-\" + msg.payload.Records[i].DateUTC.substring(0,2) + \"T\" +  msg.payload.Records[i].DateUTC.substring(11,20)+\".000Z\");\n    let DTS=msg.payload.Records[i].DateUTC.replace(\" \",\"T\")+\".000+00:00\"\n    for(let j=0;j<RecordFields.length;j++){\n        let Field = RecordFields[j];\n\n        //clear shock\n        let Shock=\"200,Shock,Shock,\"+0+\",State,\"+DTS;\n        \n        if(Field.FType==0){\n            // let GPS_DTS = (Field.GpsUTC.substring(6,10) + \"-\"+ Field.GpsUTC.substring(3,5)  + \"-\" + Field.GpsUTC.substring(0,2) + \"T\" +  Field.GpsUTC.substring(11,20)+\".000Z\");\n            let GPS_DTS = Field.GpsUTC.replace(\" \",\"T\")+\".000+00:00\"\n            let Loc=\"402,\"+ \n                Field.Lat+\",\"+\n                Field.Long+\",\"+\n                Field.Alt+\",\"+\n                Field.PosAcc+\",\"+\n                DTS;//GPS_DTS;\n            DataArr.push(Loc);    \n\n            let Speed = \"200,Speed,Speed,\"+(Field.Spd/100)+\",m/s,\"+DTS;//GPS_DTS;\n            DataArr.push(Speed);    \n        }else if(Field.FType==6){\n/*            let Temp=\"211,\"+ \n                (Field.AnalogueData[\"3\"])/100+\",\"+\n                msg.payload.Records[i].DateUTC.replace(\" \",\"T\")+\"Z\";*/\n            let Temp=\"200,Temperature,Temperature,\"+ (Field.AnalogueData[\"3\"])/100+\",°C,\"+DTS;\n            DataArr.push(Temp);    \n/*            let Batt=\"212,\"+ \n                (Field.AnalogueData[\"1\"])/1000+\",\"+\n                msg.payload.Records[i].DateUTC.replace(\" \",\"T\")+\"Z\";*/\n            let Batt_V = (Field.AnalogueData[\"1\"])/1000;\n            let Batt_P = ((Batt_V - 0) / (7.3 - 0)) * 100;\n            let Batt=\"200,Battery,Battery,\"+ Batt_P +\",V,\"+DTS;\n\n            DataArr.push(Batt);    \n        }else if(Field.FType==2){\n            let k = (Field.DevStat >>>6).toString(2);\n            let Tamper=\"200,Tamper,Tamper,\"+ k+\",State,\"+ DTS;\n\n            DataArr.push(Tamper);    \n        }else if(Field.FType==24){\n            Shock=\"200,Shock,Shock,\"+ 1+\",State,\"+ DTS;\n        }\n        DataArr.push(Shock);    \n    }\n}\nreturn {payload:DataArr};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 920,
        "wires": [
            [
                "51641df554c2ae74",
                "c931843826b74e0c"
            ]
        ]
    },
    {
        "id": "51641df554c2ae74",
        "type": "split",
        "z": "a83f932318520f19",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 590,
        "y": 920,
        "wires": [
            [
                "bb3147429fd8a958",
                "c758e13ad7203d56",
                "466917323b0b73fd",
                "2cf70ef1a3c493d3"
            ]
        ]
    },
    {
        "id": "9176f640c6f034bc",
        "type": "split",
        "z": "a83f932318520f19",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 590,
        "y": 860,
        "wires": [
            [
                "bb3147429fd8a958",
                "c758e13ad7203d56",
                "466917323b0b73fd",
                "2cf70ef1a3c493d3"
            ]
        ]
    },
    {
        "id": "c5a93e5fd5247234",
        "type": "mqtt out",
        "z": "a83f932318520f19",
        "d": true,
        "name": "Remora383568_Dev",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "dbe3e7c446319407",
        "x": 1100,
        "y": 1120,
        "wires": []
    },
    {
        "id": "527a685fb3a7dcad",
        "type": "function",
        "z": "a83f932318520f19",
        "name": "MetaData",
        "func": "let Metadata=[];\nMetadata.push(\"110,\"+msg.payload.SerNo+\",Remora2,\"+msg.payload.FW);\nMetadata.push(\"111,\"+msg.payload.IMEI+\",\"+msg.payload.ICCID+\",\");\n\nreturn {payload:Metadata};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1060,
        "wires": [
            [
                "789b7ecdaa78d392",
                "c931843826b74e0c"
            ]
        ]
    },
    {
        "id": "f6c611ae48db2a80",
        "type": "function",
        "z": "a83f932318520f19",
        "name": "Location & Stats",
        "func": "let DataArr = [];\nfor(let i=0;i<msg.payload.Records.length;i++){\n    let RecordFields = msg.payload.Records[i].Fields;\n    //let DTS = (msg.payload.Records[i].DateUTC.substring(6,10) + \"-\"+ msg.payload.Records[i].DateUTC.substring(3,5)  + \"-\" + msg.payload.Records[i].DateUTC.substring(0,2) + \"T\" +  msg.payload.Records[i].DateUTC.substring(11,20)+\".000Z\");\n    let DTS=msg.payload.Records[i].DateUTC.replace(\" \",\"T\")+\".000+00:00\"\n    for(let j=0;j<RecordFields.length;j++){\n        let Field = RecordFields[j];\n\n        //clear shock\n        let Shock=\"200,Shock,Shock,\"+0+\",State,\"+DTS;\n        \n        if(Field.FType==0){\n            //let GPS_DTS = (Field.GpsUTC.substring(6,10) + \"-\"+ Field.GpsUTC.substring(3,5)  + \"-\" + Field.GpsUTC.substring(0,2) + \"T\" +  Field.GpsUTC.substring(11,20)+\".000Z\");\n            let GPS_DTS = Field.GpsUTC.replace(\" \",\"T\")+\".000+00:00\"\n            let Loc=\"402,\"+ \n                Field.Lat+\",\"+\n                Field.Long+\",\"+\n                Field.Alt+\",\"+\n                Field.PosAcc+\",\"+\n                DTS//GPS_DTS;\n            DataArr.push(Loc);    \n\n            let Speed = \"200,Speed,Speed,\"+(Field.Spd/100)+\",m/s,\"+DTS//GPS_DTS;\n            DataArr.push(Speed);    \n        }else if(Field.FType==6){\n/*            let Temp=\"211,\"+ \n                (Field.AnalogueData[\"3\"])/100+\",\"+\n                msg.payload.Records[i].DateUTC.replace(\" \",\"T\")+\"Z\";*/\n            let Temp=\"200,Temperature,Temperature,\"+ (Field.AnalogueData[\"3\"])/100+\",°C,\"+DTS;\n            DataArr.push(Temp);    \n/*            let Batt=\"212,\"+ \n                (Field.AnalogueData[\"1\"])/1000+\",\"+\n                msg.payload.Records[i].DateUTC.replace(\" \",\"T\")+\"Z\";*/\n            let Batt_V = (Field.AnalogueData[\"1\"])/1000;\n            let Batt_P = ((Batt_V - 0) / (7.3 - 0)) * 100;\n            let Batt=\"200,Battery,Battery,\"+ Batt_P +\",V,\"+DTS;\n\n            DataArr.push(Batt);    \n        }else if(Field.FType==2){\n            let k = (Field.DevStat >>>6).toString(2);\n            let Tamper=\"200,Tamper,Tamper,\"+ k+\",State,\"+ DTS;\n\n            DataArr.push(Tamper);    \n        }else if(Field.FType==24){\n            Shock=\"200,Shock,Shock,\"+ 1+\",State,\"+ DTS;\n        }\n        DataArr.push(Shock);    \n    }\n}\nreturn {payload:DataArr};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1120,
        "wires": [
            [
                "3a65e4c896c8edab",
                "c931843826b74e0c"
            ]
        ]
    },
    {
        "id": "3a65e4c896c8edab",
        "type": "split",
        "z": "a83f932318520f19",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 590,
        "y": 1120,
        "wires": [
            [
                "c5a93e5fd5247234",
                "dc56849443b1ebee",
                "466917323b0b73fd",
                "2cf70ef1a3c493d3"
            ]
        ]
    },
    {
        "id": "789b7ecdaa78d392",
        "type": "split",
        "z": "a83f932318520f19",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 570,
        "y": 1060,
        "wires": [
            [
                "c5a93e5fd5247234",
                "dc56849443b1ebee",
                "466917323b0b73fd",
                "2cf70ef1a3c493d3"
            ]
        ]
    },
    {
        "id": "c0fa38d7c13afe86",
        "type": "mqtt out",
        "z": "a83f932318520f19",
        "name": "Remora383076_Prod",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "18e9cacb889f9b2f",
        "x": 1100,
        "y": 720,
        "wires": []
    },
    {
        "id": "c758e13ad7203d56",
        "type": "mqtt out",
        "z": "a83f932318520f19",
        "name": "Remora383565_Prod",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fd79225331c414cb",
        "x": 1100,
        "y": 860,
        "wires": []
    },
    {
        "id": "dc56849443b1ebee",
        "type": "mqtt out",
        "z": "a83f932318520f19",
        "name": "Remora383568_Prod",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "810406116fdc2e43",
        "x": 1100,
        "y": 1060,
        "wires": []
    },
    {
        "id": "01722aa52687c18c",
        "type": "inject",
        "z": "a83f932318520f19",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 900,
        "wires": [
            [
                "d529050a562148e9"
            ]
        ]
    },
    {
        "id": "d529050a562148e9",
        "type": "function",
        "z": "a83f932318520f19",
        "name": "SimulatedLoadnLockRemora",
        "func": "var Post2C8Y=[];\n\nPost2C8Y.push(\"200,Locked,Locked,1,State\");\nPost2C8Y.push(\"200,Loaded,Loaded,1,State\");\n\nreturn {payload:Post2C8Y};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 800,
        "wires": [
            [
                "71aac2690c5bd161",
                "51641df554c2ae74",
                "3a65e4c896c8edab"
            ]
        ]
    },
    {
        "id": "c931843826b74e0c",
        "type": "debug",
        "z": "a83f932318520f19",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 600,
        "wires": []
    },
    {
        "id": "6819a0a149a39fbd",
        "type": "debug",
        "z": "a83f932318520f19",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 1280,
        "wires": []
    },
    {
        "id": "4e667c1d549eabd0",
        "type": "inject",
        "z": "a83f932318520f19",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{ \t\"SerNo\": 383568, \t\"IMEI\": \"354724640270051\", \t\"ICCID\": \"89882280666023068541\", \t\"ProdId\": 62, \t\"FW\": \"62.2.2.18\", \t\"Records\": [ \t\t{ \t\t\t\"SeqNo\": 50602, \t\t\t\"Reason\": 11, \t\t\t\"DateUTC\": \"2022-05-30 03:49:23\", \t\t\t\"Fields\": [ \t\t\t\t{ \t\t\t\t\t\"GpsUTC\": \"2022-05-30 03:49:23\", \t\t\t\t\t\"Lat\": 51.3876106, \t\t\t\t\t\"Long\": -1.3174669, \t\t\t\t\t\"Alt\": 119, \t\t\t\t\t\"Spd\": 0, \t\t\t\t\t\"SpdAcc\": 3, \t\t\t\t\t\"Head\": 0, \t\t\t\t\t\"PDOP\": 17, \t\t\t\t\t\"PosAcc\": 14, \t\t\t\t\t\"GpsStat\": 3, \t\t\t\t\t\"FType\": 0 \t\t\t\t}, \t\t\t\t{ \t\t\t\t\t\"DIn\": 18, \t\t\t\t\t\"DOut\": 0, \t\t\t\t\t\"DevStat\": 2, \t\t\t\t\t\"FType\": 2 \t\t\t\t}, \t\t\t\t{ \t\t\t\t\t\"AnalogueData\": { \t\t\t\t\t\t\"1\": 7118, \t\t\t\t\t\t\"3\": 1351, \t\t\t\t\t\t\"4\": 21, \t\t\t\t\t\t\"5\": 7075, \t\t\t\t\t\t\"6\": 9999 \t\t\t\t\t}, \t\t\t\t\t\"FType\": 6 \t\t\t\t} \t\t\t] \t\t} \t] }",
        "payloadType": "json",
        "x": 290,
        "y": 1220,
        "wires": [
            [
                "1eb8338554e5baf5"
            ]
        ]
    },
    {
        "id": "1eb8338554e5baf5",
        "type": "function",
        "z": "a83f932318520f19",
        "name": "",
        "func": "let i = 0; \nlet DTS = (msg.payload.Records[i].DateUTC.substring(6,10) + \"-\"+ msg.payload.Records[i].DateUTC.substring(3,5)  + \"-\" + msg.payload.Records[i].DateUTC.substring(0,2) + \"T\" +  msg.payload.Records[i].DateUTC.substring(11,20)+\".000Z\");\nDTS=msg.payload.Records[i].DateUTC.replace(\" \",\"T\")+\".000Z\"\nreturn {\"payload\":{\"raw\":msg.payload.Records[0].DateUTC,\"DTS\":DTS}}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1260,
        "wires": [
            [
                "6819a0a149a39fbd"
            ]
        ]
    },
    {
        "id": "2cf70ef1a3c493d3",
        "type": "mqtt out",
        "z": "a83f932318520f19",
        "name": "broker.xelerate.solutions_remora",
        "topic": "Remora/Messages",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "275791cea5740d6b",
        "x": 1100,
        "y": 800,
        "wires": []
    },
    {
        "id": "e781100122cf6cde",
        "type": "tcp in",
        "z": "a83f932318520f19",
        "name": "DigitalMattersDevices_8980",
        "server": "server",
        "host": "",
        "port": "8980",
        "datamode": "stream",
        "datatype": "buffer",
        "newline": "",
        "topic": "",
        "base64": false,
        "tls": "",
        "x": 220,
        "y": 200,
        "wires": [
            [
                "cd70297f2f51f9a9"
            ]
        ]
    },
    {
        "id": "cd70297f2f51f9a9",
        "type": "function",
        "z": "a83f932318520f19",
        "name": "Buffer2HexPadded",
        "func": "// Creation of a function to get the Hex Value from a message\nfunction* hexFormatValues(buffer) {\n  for (let x of buffer) {\n    const hex = x.toString(16)\n    yield hex.padStart(2, '0')\n  }\n}\n\n// Variable declaration for my loop\nvar string = \"\"\nconst buf = Buffer.from(msg.payload)\n\n// Concatenation of the buffer in a string \nfor (let hex of hexFormatValues(buf)) {\n  string = string + hex +\" \" //add a space in each byte for easy distinction and splitting\n} \n\nmsg.payload = string.trim();\nmsg.ip = msg.ip.toString().replace(\"::ffff:\",\"\");\n//msg.payloadLength= parseInt(buf.slice(3,5).join(\"\"),16); //parseInt(buf.slice(3,4).join(\"\"),16);\n//msg.payloadLengthRAW= buf.slice(3,5)\n//msg.payloadLengthRAWLE= buf.readUInt16LE(3)\nmsg.type= msg.payload.slice(6,8).toString()\nmsg.raw=buf;\n\nif(msg.type===\"04\")\n    msg.type = \"04-Data\"\nelse if(msg.type===\"00\")\n    msg.type = \"00-Hello\"\nelse if(msg.type===\"05\")\n    msg.type = \"05-Commit_Request\"\nelse if(msg.type===\"30\")\n    msg.type = \"30-Time_Request\"\nelse if(msg.type===\"14\")\n    msg.type = \"05-Version_Data\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 200,
        "wires": [
            [
                "ce9abc3a7ccfa407"
            ]
        ]
    },
    {
        "id": "ce9abc3a7ccfa407",
        "type": "switch",
        "z": "a83f932318520f19",
        "name": "ChkMsgType",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "regex",
                "v": "^02 55 00",
                "vt": "str",
                "case": true
            },
            {
                "t": "regex",
                "v": "^02 55 05",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^02 55 30",
                "vt": "str",
                "case": false
            },
            {
                "t": "regex",
                "v": "^02 55 04",
                "vt": "str",
                "case": false
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 670,
        "y": 200,
        "wires": [
            [
                "b1f8d506a9a8fd29"
            ],
            [
                "bc3618778d4e6305"
            ],
            [
                "12a27bc7a59f40c9"
            ],
            [
                "5afcc6e72a33d6ab"
            ],
            [
                "70d3fd62e5eab338"
            ]
        ]
    },
    {
        "id": "b1f8d506a9a8fd29",
        "type": "function",
        "z": "a83f932318520f19",
        "name": "HelloResponse",
        "func": "let dt = new Date().getTime();\n\n//this was incorrecting sending original payload length\n//const conc = Buffer.from([0x02,0x55,0x01].concat(...msg.payloadLengthRAW));\nconst conc = Buffer.from([0x02,0x55,0x01]);\n\nlet bufLen = Buffer.alloc(2);\nbufLen.writeUInt16LE(8);\n\nlet bufDT = Buffer.alloc(4);\nbufDT.writeUInt32LE((new Date().getTime())/1000);\n\nlet bufCode = Buffer.alloc(4);\nbufCode.writeUInt32LE(0);\n\nmsg.payload = Buffer.concat([conc,bufLen,bufDT,bufCode])\nmsg[\"host\"] = msg.ip;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 180,
        "wires": [
            [
                "e1df1c2789cdb31f",
                "3c16c6b6b43bf69d"
            ]
        ]
    },
    {
        "id": "bc3618778d4e6305",
        "type": "function",
        "z": "a83f932318520f19",
        "name": "CommitResponse",
        "func": "let dt = new Date().getTime();\n\n//this was incorrecting sending original payload length\n//const conc = Buffer.from([0x02,0x55,0x01].concat(...msg.payloadLengthRAW));\nconst conc = Buffer.from([0x02,0x55,0x06]);\nconst bufCommitStatus = Buffer.from([0x01]);\n\nlet bufLen = Buffer.alloc(2);\nbufLen.writeUInt16LE(1);\n\nmsg.payload = Buffer.concat([conc,bufLen,bufCommitStatus])\nmsg[\"host\"] = msg.ip;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 220,
        "wires": [
            [
                "3c16c6b6b43bf69d",
                "e1df1c2789cdb31f"
            ]
        ]
    },
    {
        "id": "70d3fd62e5eab338",
        "type": "debug",
        "z": "a83f932318520f19",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 340,
        "wires": []
    },
    {
        "id": "12a27bc7a59f40c9",
        "type": "function",
        "z": "a83f932318520f19",
        "name": "WIP - Time Resposne",
        "func": "let dt = new Date().getTime();\n\n//this was incorrecting sending original payload length\n//const conc = Buffer.from([0x02,0x55,0x01].concat(...msg.payloadLengthRAW));\nconst conc = Buffer.from([0x02,0x55,0x06]);\nconst bufCommitStatus = Buffer.from([0x01]);\n\nlet bufLen = Buffer.alloc(2);\nbufLen.writeUInt16LE(1);\n\nmsg.payload = Buffer.concat([conc,bufLen,bufCommitStatus])\nmsg[\"host\"] = msg.ip;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 260,
        "wires": [
            [
                "3c16c6b6b43bf69d"
            ]
        ]
    },
    {
        "id": "5afcc6e72a33d6ab",
        "type": "function",
        "z": "a83f932318520f19",
        "name": "WIP - Data message",
        "func": "let dt = new Date().getTime();\n\n//this was incorrecting sending original payload length\n//const conc = Buffer.from([0x02,0x55,0x01].concat(...msg.payloadLengthRAW));\nconst conc = Buffer.from([0x02,0x55,0x06]);\nconst bufCommitStatus = Buffer.from([0x01]);\n\nlet bufLen = Buffer.alloc(2);\nbufLen.writeUInt16LE(1);\n\nmsg.payload = Buffer.concat([conc,bufLen,bufCommitStatus])\nmsg[\"host\"] = msg.ip;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 300,
        "wires": [
            [
                "3c16c6b6b43bf69d"
            ]
        ]
    },
    {
        "id": "e1df1c2789cdb31f",
        "type": "tcp out",
        "z": "a83f932318520f19",
        "name": "",
        "host": "",
        "port": "",
        "beserver": "reply",
        "base64": false,
        "end": false,
        "tls": "",
        "x": 1150,
        "y": 100,
        "wires": []
    },
    {
        "id": "3c16c6b6b43bf69d",
        "type": "debug",
        "z": "a83f932318520f19",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 200,
        "wires": []
    },
    {
        "id": "ae6363b89bf7874b",
        "type": "debug",
        "z": "5b6bbc35843236c3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 260,
        "wires": []
    },
    {
        "id": "0c4e938121dcb576",
        "type": "inject",
        "z": "5b6bbc35843236c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "511,869492056693889_3,\"{\\\"WMaxLimPct\\\":43}\" 511,869492056693889_3,\"{\\\"WMaxLimPct\\\":27}\" 511,869492056693889_3,\"{\\\"WMaxLimPct\\\":12}\"",
        "payloadType": "str",
        "x": 470,
        "y": 300,
        "wires": [
            [
                "839a8761bc680cd8"
            ]
        ]
    },
    {
        "id": "839a8761bc680cd8",
        "type": "function",
        "z": "5b6bbc35843236c3",
        "name": "",
        "func": "// var k =msg.payload.replace(/\\\\\"/g, '').replace(/\\n/g,\"\");\n// if(k.includes('WMaxLim_Ena')){\n//     var x=k.indexOf(\"WMaxLim_Ena:\")+11;\n//     var y=k.substr(k.indexOf(\"WMaxLim_Ena:\")+11)\n//     var val=parseInt(y.replace(/^[^0-9]+/, ''), 10);\n//     msg.payload = {\"payload\":\n//         {\n//         \"msgId\":\"111\",\n//         \"subDeviceId\":\"192.168.0.180\",\n//         \"subProtocol\":\"modbus\",\n//         \"subDeviceTag\":\"1\",\n//         \"cmdType\":\"writeReg\",\n//         \"param\":{\n//             \"WMaxLimPct\":val\n//         }    \n//     }\n// }\n// }else\n//     msg.payload=\"not found\"\n// return msg;\n\nvar param = JSON.parse(JSON.parse(msg.payload.split(',')[2]))\n\nif (param.OutPFSet) {\n        param.OutPFSet = Number(param.OutPFSet) * 0.01\n}\n\nvar packet = { \"payload\": { \"payload\":{\n        \"msgId\":\"111\",\n        \"subDeviceId\":\"192.168.0.180\",\n        \"subProtocol\":\"modbus\",\n        \"subDeviceTag\":\"1\",\n        \"cmdType\":\"writeReg\",\n        \"param\": param\n        }\n    }\n}\n    \nreturn packet",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 300,
        "wires": [
            [
                "ae6363b89bf7874b",
                "e8c1f8a0f2ec54a7"
            ]
        ]
    },
    {
        "id": "e8c1f8a0f2ec54a7",
        "type": "mqtt out",
        "z": "5b6bbc35843236c3",
        "d": true,
        "name": "",
        "topic": "CKH/ESB/869492056695454/control",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "34c1eb061266e241",
        "x": 1230,
        "y": 300,
        "wires": []
    },
    {
        "id": "185a830df0f54993",
        "type": "function",
        "z": "5b6bbc35843236c3",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.operationcollection+json;charset=UTF-8;ver=0.9';\nmsg.headers['Accept'] = '*/*';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 600,
        "wires": [
            [
                "b4941bfd9e77d002"
            ]
        ]
    },
    {
        "id": "b4941bfd9e77d002",
        "type": "http request",
        "z": "5b6bbc35843236c3",
        "name": "EMEA Prod",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/devicecontrol/operations?status=PENDING&deviceId=188772966&pageSize=100",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 790,
        "y": 640,
        "wires": [
            [
                "5a66def1581e232f"
            ]
        ]
    },
    {
        "id": "5a66def1581e232f",
        "type": "function",
        "z": "5b6bbc35843236c3",
        "name": "Split operations",
        "func": "var k = JSON.parse(msg.payload);\nvar b = k.operations;\nreturn {\"payload\":b};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 680,
        "wires": [
            [
                "ccad1f2ce9ed3537"
            ]
        ]
    },
    {
        "id": "ccad1f2ce9ed3537",
        "type": "split",
        "z": "5b6bbc35843236c3",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 930,
        "y": 720,
        "wires": [
            [
                "c995b0587218279b"
            ]
        ]
    },
    {
        "id": "321a1b83190aa5f6",
        "type": "http request",
        "z": "5b6bbc35843236c3",
        "name": "EMEA Prod",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/devicecontrol/operations/{{OperationID}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1350,
        "y": 640,
        "wires": [
            [
                "143e09e8adde3e32"
            ]
        ]
    },
    {
        "id": "e3ac526b52a28533",
        "type": "function",
        "z": "5b6bbc35843236c3",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvZXRsLmRldmljZXNAaW52aXhpYmxlLmNvbTo5c1k2dHV6NUw=';\nmsg.headers['Content-Type'] = 'application/json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.operation+json';\nmsg.body = {\"status\": \"SUCCESSFUL\"};\nmsg.payload={\"status\": \"SUCCESSFUL\"};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 680,
        "wires": [
            [
                "321a1b83190aa5f6"
            ]
        ]
    },
    {
        "id": "c995b0587218279b",
        "type": "change",
        "z": "5b6bbc35843236c3",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.id",
                "pt": "msg",
                "to": "OperationID",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 720,
        "wires": [
            [
                "e3ac526b52a28533"
            ]
        ]
    },
    {
        "id": "143e09e8adde3e32",
        "type": "debug",
        "z": "5b6bbc35843236c3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 600,
        "wires": []
    },
    {
        "id": "e9366ea715f7afc9",
        "type": "inject",
        "z": "5b6bbc35843236c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "900",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 530,
        "y": 600,
        "wires": [
            [
                "185a830df0f54993"
            ]
        ]
    },
    {
        "id": "61a960571ee5b749",
        "type": "comment",
        "z": "5b6bbc35843236c3",
        "name": "Below parts are to auto clean ALL Operations for RTU and TCP inverter (BLINDLY)",
        "info": "Below parts are to auto clean ALL Operations for RTU and TCP inverter (BLINDLY)",
        "x": 870,
        "y": 380,
        "wires": []
    },
    {
        "id": "3221c8378c1af40b",
        "type": "comment",
        "z": "5b6bbc35843236c3",
        "name": "5454 is tcp  and other is rtu",
        "info": "Below parts are to auto clean ALL Operations for RTU and TCP inverter (BLINDLY)",
        "x": 1150,
        "y": 220,
        "wires": []
    },
    {
        "id": "525b381d5e5ed3ff",
        "type": "delay",
        "z": "5b6bbc35843236c3",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 580,
        "y": 460,
        "wires": [
            [
                "185a830df0f54993"
            ]
        ]
    },
    {
        "id": "945ae16b8ff866c8",
        "type": "comment",
        "z": "5b6bbc35843236c3",
        "name": "5454 is tcp ",
        "info": "Below parts are to auto clean ALL Operations for RTU and TCP inverter (BLINDLY)",
        "x": 740,
        "y": 460,
        "wires": []
    },
    {
        "id": "60f62f10a9703d98",
        "type": "switch",
        "z": "5b6bbc35843236c3",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "869492056695454",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "869492056693889",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 220,
        "wires": [
            [
                "839a8761bc680cd8",
                "525b381d5e5ed3ff"
            ],
            []
        ]
    },
    {
        "id": "7bcb3ad91c0ac166",
        "type": "comment",
        "z": "5b6bbc35843236c3",
        "name": "rtu",
        "info": "Below parts are to auto clean ALL Operations for RTU and TCP inverter (BLINDLY)",
        "x": 670,
        "y": 520,
        "wires": []
    },
    {
        "id": "40e09da5f444a299",
        "type": "inject",
        "z": "5b6bbc35843236c3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "900",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 530,
        "y": 740,
        "wires": [
            [
                "58c1d54486564027"
            ]
        ]
    },
    {
        "id": "58c1d54486564027",
        "type": "function",
        "z": "5b6bbc35843236c3",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvZXRsLmRldmljZXNAaW52aXhpYmxlLmNvbTo5c1k2dHV6NUw=';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.operationcollection+json;charset=UTF-8;ver=0.9';\nmsg.headers['Accept'] = '*/*';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 740,
        "wires": [
            [
                "0b882220abe6a3c2"
            ]
        ]
    },
    {
        "id": "0b882220abe6a3c2",
        "type": "http request",
        "z": "5b6bbc35843236c3",
        "name": "EMEA Prod",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/devicecontrol/operations?status=PENDING&deviceId=188649207&pageSize=100",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 790,
        "y": 780,
        "wires": [
            [
                "b2d408d6a0414e81"
            ]
        ]
    },
    {
        "id": "b2d408d6a0414e81",
        "type": "function",
        "z": "5b6bbc35843236c3",
        "name": "Split operations",
        "func": "var k = JSON.parse(msg.payload);\nvar b = k.operations;\nreturn {\"payload\":b};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 820,
        "wires": [
            [
                "ccdf926a25c823e0"
            ]
        ]
    },
    {
        "id": "ccdf926a25c823e0",
        "type": "split",
        "z": "5b6bbc35843236c3",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 930,
        "y": 860,
        "wires": [
            [
                "956580b21dfc873d"
            ]
        ]
    },
    {
        "id": "956580b21dfc873d",
        "type": "change",
        "z": "5b6bbc35843236c3",
        "name": "",
        "rules": [
            {
                "t": "move",
                "p": "payload.id",
                "pt": "msg",
                "to": "OperationID",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 860,
        "wires": [
            [
                "b97d6eae754b2bc9"
            ]
        ]
    },
    {
        "id": "b97d6eae754b2bc9",
        "type": "function",
        "z": "5b6bbc35843236c3",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvbm9kZXJlZF9zaW1zX2Z1bmM6Qmxhc3RlcnNfMjAyMiE=';\nmsg.headers['Content-Type'] = 'application/json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.operation+json';\nmsg.body = {\"status\": \"SUCCESSFUL\"};\nmsg.payload={\"status\": \"SUCCESSFUL\"};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 820,
        "wires": [
            [
                "471a77fe220d595f"
            ]
        ]
    },
    {
        "id": "471a77fe220d595f",
        "type": "http request",
        "z": "5b6bbc35843236c3",
        "name": "EMEA Prod",
        "method": "PUT",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.emea.cumulocity.com/devicecontrol/operations/{{OperationID}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1350,
        "y": 780,
        "wires": [
            [
                "7432b5581d25f318"
            ]
        ]
    },
    {
        "id": "7432b5581d25f318",
        "type": "debug",
        "z": "5b6bbc35843236c3",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 740,
        "wires": []
    },
    {
        "id": "6ba1095f32b2ad9a",
        "type": "mqtt in",
        "z": "5b6bbc35843236c3",
        "d": true,
        "name": "",
        "topic": "s/us",
        "qos": "0",
        "datatype": "auto",
        "broker": "a93d4ff72192dfc3",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 290,
        "y": 240,
        "wires": [
            [
                "60f62f10a9703d98"
            ]
        ]
    },
    {
        "id": "6c575ad037267fc2",
        "type": "debug",
        "z": "d552056ef1ced847",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1170,
        "y": 500,
        "wires": []
    },
    {
        "id": "81f04d17ab0dcf71",
        "type": "function",
        "z": "d552056ef1ced847",
        "name": "locationGenerator",
        "func": "var DTS = new Date();\n\nmsg.payload = {\n        \"type\": \"c8y_LocationUpdate\",\n        \"time\": DTS.toISOString(),\n        \"text\": \"LocUpdate\",\n        \"source\": {\"id\": \"10351\" },\n        \"c8y_Position\": {\n            \"alt\": 1,\n            \"lat\": genRand(45, 55, 4),\n            \"lng\": genRand(55, 65, 4)\n        }\n    }\n    \nreturn msg;\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 560,
        "wires": [
            [
                "d3d9766e7d9e073e",
                "2a15cff55b00154d"
            ]
        ]
    },
    {
        "id": "d3d9766e7d9e073e",
        "type": "http request",
        "z": "d552056ef1ced847",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://developer.cumulocity.com/event/events",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 950,
        "y": 560,
        "wires": [
            [
                "6c575ad037267fc2"
            ]
        ]
    },
    {
        "id": "91849045f5646d23",
        "type": "function",
        "z": "d552056ef1ced847",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic c2Fyd2FuLnNoYWhAaW52aXhpYmxlLmNvbTpJb3QxMTIzIyM=';\nmsg.headers['Content-Type'] = 'application/json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurement+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 560,
        "wires": [
            [
                "81f04d17ab0dcf71"
            ]
        ]
    },
    {
        "id": "963b485ac4c9f6b2",
        "type": "inject",
        "z": "d552056ef1ced847",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 560,
        "wires": [
            [
                "91849045f5646d23"
            ]
        ]
    },
    {
        "id": "97a693bde31b325a",
        "type": "inject",
        "z": "d552056ef1ced847",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 460,
        "wires": [
            [
                "867d6dec80a38f7a"
            ]
        ]
    },
    {
        "id": "867d6dec80a38f7a",
        "type": "function",
        "z": "d552056ef1ced847",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic c2Fyd2FuLnNoYWhAaW52aXhpYmxlLmNvbTpJb3QxMTIzIyM=';\nmsg.headers['Content-Type'] = 'application/json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurement+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 460,
        "wires": [
            [
                "194da04de5ebe27a"
            ]
        ]
    },
    {
        "id": "194da04de5ebe27a",
        "type": "function",
        "z": "d552056ef1ced847",
        "name": "measurementGenerator",
        "func": "var DTS = new Date();\nmsg.payload= {\n                type:\"measurements\",\n                time:DTS.toISOString(),\n                source: {\"id\":\"10351\" },\n                measurements:{\n                    \"T\": { \"value\": genRand(5,105,2), \"unit\": \"°C\" },\n                    \"H\": { \"value\": genRand(40,70,2), \"unit\": \"%\" },\n                }\n            }\n  \n\nreturn msg;\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 460,
        "wires": [
            [
                "65ab60f948c0564d",
                "18ac40221f213399"
            ]
        ]
    },
    {
        "id": "65ab60f948c0564d",
        "type": "http request",
        "z": "d552056ef1ced847",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://developer.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 950,
        "y": 460,
        "wires": [
            [
                "6c575ad037267fc2"
            ]
        ]
    },
    {
        "id": "2a15cff55b00154d",
        "type": "http request",
        "z": "d552056ef1ced847",
        "name": "New C8y",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://developer.emea.cumulocity.com/event/events",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 940,
        "y": 620,
        "wires": [
            [
                "6c575ad037267fc2"
            ]
        ]
    },
    {
        "id": "18ac40221f213399",
        "type": "http request",
        "z": "d552056ef1ced847",
        "name": "NewC8y",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://developer.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 940,
        "y": 400,
        "wires": [
            [
                "6c575ad037267fc2"
            ]
        ]
    },
    {
        "id": "0b95bc795a3b6425",
        "type": "comment",
        "z": "d552056ef1ced847",
        "name": "Disable Reason",
        "info": "this is duplicating data. into air qulaity 5 device. which is already being ingected data from AirQulaity_Rest flow",
        "x": 220,
        "y": 400,
        "wires": []
    },
    {
        "id": "9d9fa6f5da61dcc1",
        "type": "debug",
        "z": "897f09753607b3a2",
        "d": true,
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 220,
        "wires": []
    },
    {
        "id": "a45376d2b99fb638",
        "type": "mqtt out",
        "z": "897f09753607b3a2",
        "d": true,
        "name": "Xelerate_C8Y_Orano_359159972124789",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e1f19448ef0f2205",
        "x": 1200,
        "y": 260,
        "wires": []
    },
    {
        "id": "29ce8ce214604ee2",
        "type": "mqtt out",
        "z": "897f09753607b3a2",
        "d": true,
        "name": "Xelerate_C8Y_Orano_359159972124912",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "f44889954ed091ee",
        "x": 1200,
        "y": 300,
        "wires": []
    },
    {
        "id": "43c64e857b31c25a",
        "type": "function",
        "z": "897f09753607b3a2",
        "d": true,
        "name": "Parse 4789",
        "func": "var Post2C8Y=[];\n\n// Post2C8Y.push(\"200,Temperature,Temperature,\"+ msg.payload.v.temperature.value +\",°C,\"+msg.payload.ts);\n// Post2C8Y.push(\"200,BatteryVoltage,BatteryVoltage,\"+ msg.payload.v.battery.value +\",V,\"+msg.payload.ts);\n// Post2C8Y.push(\"200,BatteryLeft,BatteryLeft,\"+ msg.payload.v.battery.remaining +\",%,\"+msg.payload.ts);\n// Post2C8Y.push(\"200,Speed,Speed,\"+ msg.payload.v.GPS.speed.value +\",kmh,\"+msg.payload.ts);\n// Post2C8Y.push(\"200,RSRP,RSRP,\"+ msg.payload.v.network.rsrp + \",#,\"+msg.payload.ts);\n// Post2C8Y.push(\"200,RSRQ,RSRQ,\"+ msg.payload.v.network.rsrq + \",#,\"+msg.payload.ts);\n// Post2C8Y.push(\"200,OnMove,OnMove,\"+ msg.payload.v.GPS.onMove + \",State,\"+msg.payload.ts);\n\nif(msg.payload.loc[0]!==0 && msg.payload.loc[1]!==0)\n    Post2C8Y.push(\"402,\"+ msg.payload.loc[0] +\",\" +msg.payload.loc[1]+\",1,,\"+msg.payload.ts)\n\n\nreturn {payload:Post2C8Y};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 260,
        "wires": [
            [
                "96123eb7253143a3"
            ]
        ]
    },
    {
        "id": "96123eb7253143a3",
        "type": "split",
        "z": "897f09753607b3a2",
        "d": true,
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 870,
        "y": 260,
        "wires": [
            [
                "9d9fa6f5da61dcc1"
            ]
        ]
    },
    {
        "id": "999925057cd62697",
        "type": "split",
        "z": "897f09753607b3a2",
        "d": true,
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 870,
        "y": 300,
        "wires": [
            [
                "a973bbbae7e7e099"
            ]
        ]
    },
    {
        "id": "504399b061844e34",
        "type": "function",
        "z": "897f09753607b3a2",
        "d": true,
        "name": "Parse 4912",
        "func": "var Post2C8Y=[];\n\n// Post2C8Y.push(\"200,Temperature,Temperature,\"+ msg.payload.v.temperature.value +\",°C,\"+msg.payload.ts);\n// Post2C8Y.push(\"200,BatteryVoltage,BatteryVoltage,\"+ msg.payload.v.battery.value +\",V,\"+msg.payload.ts);\n// Post2C8Y.push(\"200,BatteryLeft,BatteryLeft,\"+ msg.payload.v.battery.remaining +\",%,\"+msg.payload.ts);\n// Post2C8Y.push(\"200,Speed,Speed,\"+ msg.payload.v.GPS.speed.value +\",kmh,\"+msg.payload.ts);\n// Post2C8Y.push(\"200,RSRP,RSRP,\"+ msg.payload.v.network.rsrp + \",#,\"+msg.payload.ts);\n// Post2C8Y.push(\"200,RSRQ,RSRQ,\"+ msg.payload.v.network.rsrq + \",#,\"+msg.payload.ts);\n// Post2C8Y.push(\"200,OnMove,OnMove,\"+ msg.payload.v.GPS.onMove + \",State,\"+msg.payload.ts);\n\nif(msg.payload.loc[0]!==0 && msg.payload.loc[1]!==0)\n    Post2C8Y.push(\"402,\"+ msg.payload.loc[0] +\",\" +msg.payload.loc[1]+\",1,,\"+msg.payload.ts)\n\n    \nreturn {payload:Post2C8Y};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 300,
        "wires": [
            [
                "999925057cd62697"
            ]
        ]
    },
    {
        "id": "a973bbbae7e7e099",
        "type": "debug",
        "z": "897f09753607b3a2",
        "d": true,
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 340,
        "wires": []
    },
    {
        "id": "4adcd1a697bb2889",
        "type": "debug",
        "z": "897f09753607b3a2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 220,
        "wires": []
    },
    {
        "id": "2aa01937b598640f",
        "type": "function",
        "z": "897f09753607b3a2",
        "name": "set headers and ExternalID in url ",
        "func": "if(msg.topic===\"\" || msg.topic === undefined || msg.topic === null)\n    msg.NoID=true;\nelse{\n    msg.NoID=false;\n    msg.headers = {};\n    msg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvaGFzc2FuLmFobWFkQGludml4aWJsZS5jb206bXlDdW11bG9jaXR5UGFzcw==';\n    msg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.externalid+json';\n    msg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.externalid+json';\n    msg.url=\"https://t1210372600.cumulocity.com/identity/externalIds/c8y_Serial/\"+msg.topic;\n    msg.original_message=msg.payload;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 480,
        "wires": [
            [
                "8663519605750d7e"
            ]
        ]
    },
    {
        "id": "68f3834c6799f21e",
        "type": "http request",
        "z": "897f09753607b3a2",
        "name": "DevMeasurements",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t925813249.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1310,
        "y": 560,
        "wires": [
            [
                "5163eda9c07f9893"
            ]
        ]
    },
    {
        "id": "5163eda9c07f9893",
        "type": "debug",
        "z": "897f09753607b3a2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 500,
        "wires": []
    },
    {
        "id": "8613ab2f62dcd6b7",
        "type": "http request",
        "z": "897f09753607b3a2",
        "name": "Find ID from ExternalID",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 770,
        "y": 400,
        "wires": [
            [
                "72ec2e830b9afb98"
            ]
        ]
    },
    {
        "id": "f4184a1a1aa3b4f3",
        "type": "inject",
        "z": "897f09753607b3a2",
        "name": "TESTING only",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "359159972124789_tet",
        "payload": "{ \"s\": \"urn:lo:nsid:1114_TEST_BE:359159972124789\", \"ts\": \"2022-10-01T21:30:33.0Z\", \"m\": \"init_model\", \"loc\": [ 55.955831, 12.803907 ], \"v\": { \"temperature\": { \"value\": 15, \"unit\": \"degC\" }, \"battery\": { \"value\": 3.599000, \"unit\": \"V\", \"remaining\": 81 }, \"GPS\": { \"validPosition\": 1, \"speed\": { \"value\": 91.850000, \"unit\": \"kmh\" }, \"onMove\": 16 }, \"network\": { \"rsrp\": -110, \"rsrq\": -20 } }, \"t\": [ \"Ercogener\", \"Saumur\" ] }",
        "payloadType": "json",
        "x": 110,
        "y": 380,
        "wires": [
            [
                "2aa01937b598640f"
            ]
        ]
    },
    {
        "id": "142593477d603d22",
        "type": "function",
        "z": "897f09753607b3a2",
        "name": "parse measurement data",
        "func": "msg.payload={\n    \"measurements\": [\n            {\n                type:\"converged_measurements\",\n                time:msg.original_message.ts.replace(\"Z\",\"+00:00\"),\n                \"source\": {\"id\":msg.foundID },\n                \"converged_measurements\":{\n                    \"Temperature\": { \"value\": msg.original_message.v.temperature.value, \"unit\": \"°C\" },\n                    \"BatteryVoltage\": { \"value\": msg.original_message.v.battery.value, \"unit\": \"V\" },\n                    \"BatteryLeft\": { \"value\": msg.original_message.v.battery.remaining, \"unit\": \"%\" },\n                    \"Speed\": { \"value\": msg.original_message.v.GPS.speed.value, \"unit\": \"km/h\" },\n                    \"RSRP\": { \"value\": msg.original_message.v.network.rsrp, \"unit\": \"#\" },\n                    \"RSRQ\": { \"value\": msg.original_message.v.network.rsrq, \"unit\": \"#\" },\n                    \"OnMove\": { \"value\": msg.original_message.v.GPS.onMove, \"unit\": \"state\" }\n                }\n            }\n        ]\n    }\n\n\n\n// if(msg.original_message.loc[0]!==0 && msg.original_message.loc[1]!==0)\n//     Post2C8Y.push(\"402,\"+ msg.original_message.loc[0] +\",\" +msg.original_message.loc[1]+\",1,,\"+msg.original_message.ts)\n\n\nreturn msg;\n\nfunction genRand(min, max, decimalPlaces) {  \n    var rand = Math.random()*(max-min) + min;\n    var power = Math.pow(10, decimalPlaces);\n    return Math.floor(rand*power) / power;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 520,
        "wires": [
            [
                "6a1944246527bc5e"
            ]
        ]
    },
    {
        "id": "8663519605750d7e",
        "type": "switch",
        "z": "897f09753607b3a2",
        "name": "Check If ExtID Present",
        "property": "NoID",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 520,
        "y": 400,
        "wires": [
            [
                "8613ab2f62dcd6b7"
            ]
        ]
    },
    {
        "id": "6a1944246527bc5e",
        "type": "function",
        "z": "897f09753607b3a2",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvaGFzc2FuLmFobWFkQGludml4aWJsZS5jb206bXlDdW11bG9jaXR5UGFzcw==';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.url=\"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 520,
        "wires": [
            [
                "68f3834c6799f21e",
                "7341c6377f5c3b88",
                "26550553cf1613bb"
            ]
        ]
    },
    {
        "id": "30ee5475a1bbeb6c",
        "type": "http request",
        "z": "897f09753607b3a2",
        "name": "DevLocationEvent",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t925813249.cumulocity.com/event/events",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1310,
        "y": 620,
        "wires": [
            [
                "fa9d9b1babac373d"
            ]
        ]
    },
    {
        "id": "26a7fd2f599bf3b5",
        "type": "function",
        "z": "897f09753607b3a2",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvaGFzc2FuLmFobWFkQGludml4aWJsZS5jb206bXlDdW11bG9jaXR5UGFzcw==';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.event+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.event+json';\nmsg.url=\"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 660,
        "wires": [
            [
                "30ee5475a1bbeb6c",
                "a4a7289d1fabdbea",
                "b0be3721f2ff4c0b"
            ]
        ]
    },
    {
        "id": "502cd2e71f55374e",
        "type": "function",
        "z": "897f09753607b3a2",
        "name": "parse location data",
        "func": "msg.payload={\n        \"type\": \"c8y_LocationUpdate\",\n        \"time\": msg.original_message.ts.replace(\"Z\",\"+00:00\"),\n        \"text\": \"Location updated v2\",\n        \"source\": {\"id\":msg.foundID },\n        \"c8y_Position\": {\n            \"alt\": 1,\n            \"lat\": msg.original_message.loc[0],\n            \"lng\": msg.original_message.loc[1]\n        }\n        \n    }\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 700,
        "wires": [
            [
                "26a7fd2f599bf3b5"
            ]
        ]
    },
    {
        "id": "fa9d9b1babac373d",
        "type": "debug",
        "z": "897f09753607b3a2",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 680,
        "wires": []
    },
    {
        "id": "72ec2e830b9afb98",
        "type": "function",
        "z": "897f09753607b3a2",
        "name": "extract id and tag location",
        "func": "var k = JSON.parse(msg.payload);\nmsg.foundID = k.managedObject.id;\n\n\nif(msg.original_message.loc[0]!==0 && msg.original_message.loc[1]!==0)\n    msg.hasLocation=true;\nelse\n    msg.hasLocation=false;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 560,
        "wires": [
            [
                "142593477d603d22",
                "db38414681f1620a"
            ]
        ]
    },
    {
        "id": "db38414681f1620a",
        "type": "switch",
        "z": "897f09753607b3a2",
        "name": "Check has location",
        "property": "hasLocation",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 690,
        "y": 700,
        "wires": [
            [
                "502cd2e71f55374e"
            ]
        ]
    },
    {
        "id": "45ca332a9f318ebe",
        "type": "mqtt in",
        "z": "897f09753607b3a2",
        "name": "",
        "topic": "#",
        "qos": "0",
        "datatype": "json",
        "broker": "cf257dbc6a840b6f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 180,
        "wires": [
            [
                "4adcd1a697bb2889",
                "0e6dfe47dc56b12e"
            ]
        ]
    },
    {
        "id": "0e6dfe47dc56b12e",
        "type": "switch",
        "z": "897f09753607b3a2",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "359159972124789",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "359159972124912",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 280,
        "wires": [
            [
                "2aa01937b598640f"
            ],
            [
                "2aa01937b598640f"
            ]
        ]
    },
    {
        "id": "7341c6377f5c3b88",
        "type": "http request",
        "z": "897f09753607b3a2",
        "name": "EMEA Measurements",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t160245771.emea.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1220,
        "y": 460,
        "wires": [
            [
                "5163eda9c07f9893"
            ]
        ]
    },
    {
        "id": "a4a7289d1fabdbea",
        "type": "http request",
        "z": "897f09753607b3a2",
        "name": "EmeaOranoLocationEvent",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t160245771.emea.cumulocity.com/event/events",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1320,
        "y": 740,
        "wires": [
            [
                "fa9d9b1babac373d"
            ]
        ]
    },
    {
        "id": "26550553cf1613bb",
        "type": "http request",
        "z": "897f09753607b3a2",
        "name": "ProdMeasurements",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1290,
        "y": 500,
        "wires": [
            [
                "5163eda9c07f9893"
            ]
        ]
    },
    {
        "id": "b0be3721f2ff4c0b",
        "type": "http request",
        "z": "897f09753607b3a2",
        "name": "ProdLocationEvent",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.cumulocity.com/event/events",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1230,
        "y": 700,
        "wires": [
            [
                "fa9d9b1babac373d"
            ]
        ]
    },
    {
        "id": "f0d9fa1b7b62c6a2",
        "type": "comment",
        "z": "897f09753607b3a2",
        "name": "DISREGARD as we dont need special cargo tracking in e2e",
        "info": "",
        "x": 640,
        "y": 60,
        "wires": []
    },
    {
        "id": "68d147659507f904",
        "type": "function",
        "z": "bc405aef93a3a2c0",
        "name": "Parse",
        "func": "if(msg.payload.includes(\"12345123400\")){\n    //this is all astreerlights asset\n    if(msg.payload.slice(-2)==\",1\")\n        return {payload:\"{light:all,power:on}\"};\n    else if(msg.payload.slice(-2)==\",0\")\n        return {payload:\"{light:all,power:off}\"};\n\n    if(msg.payload.toLowerCase().includes(\"dimlevel:\"))\n        return {payload:\"{light:all,\"+String(msg.payload.toLowerCase()).substring(17)};\n}else if(msg.payload.includes(\"12345123401\")){\n    //this is all astreerlight1\n    if(msg.payload.slice(-2)==\",1\")\n        return {payload:\"{light:1,power:on}\"};\n    else if(msg.payload.slice(-2)==\",0\")\n        return {payload:\"{light:1,power:off}\"};\n\n    if(msg.payload.toLowerCase().includes(\"dimlevel:\"))\n        return {payload:\"{light:1,\"+String(msg.payload.toLowerCase()).substring(17)};\n}else if(msg.payload.includes(\"12345123402\")){\n    //this is all astreerlight1\n    if(msg.payload.slice(-2)==\",1\")\n        return {payload:\"{light:2,power:on}\"};\n    else if(msg.payload.slice(-2)==\",0\")\n        return {payload:\"{light:2,power:off}\"};\n\n    if(msg.payload.toLowerCase().includes(\"dimlevel:\"))\n        return {payload:\"{light:2,\"+String(msg.payload.toLowerCase()).substring(17)};\n}else if(msg.payload.includes(\"12345123403\")){\n    //this is all astreerlight1\n    if(msg.payload.slice(-2)==\",1\")\n        return {payload:\"{light:3,power:on}\"};\n    else if(msg.payload.slice(-2)==\",0\")\n        return {payload:\"{light:3,power:off}\"};\n\n    if(msg.payload.toLowerCase().includes(\"dimlevel:\"))\n        return {payload:\"{light:3,\"+String(msg.payload.toLowerCase()).substring(17)};\n}else if(msg.payload.includes(\"12345123404\")){\n    //this is all astreerlight1\n    if(msg.payload.slice(-2)==\",1\")\n        return {payload:\"{light:4,power:on}\"};\n    else if(msg.payload.slice(-2)==\",0\")\n        return {payload:\"{light:4,power:off}\"};\n\n    if(msg.payload.toLowerCase().includes(\"dimlevel:\"))\n        return {payload:\"{light:4,\"+String(msg.payload.toLowerCase()).substring(17)};\n}else if(msg.payload.includes(\"12345123405\")){\n    //this is all astreerlight1\n    if(msg.payload.slice(-2)==\",1\")\n        return {payload:\"{light:5,power:on}\"};\n    else if(msg.payload.slice(-2)==\",0\")\n        return {payload:\"{light:5,power:off}\"};\n\n    if(msg.payload.toLowerCase().includes(\"dimlevel:\"))\n        return {payload:\"{light:5,\"+String(msg.payload.toLowerCase()).substring(17)};\n}else if(msg.payload.includes(\"12345123406\")){\n    //this is all astreerlight1\n    if(msg.payload.slice(-2)==\",1\")\n        return {payload:\"{light:6,power:on}\"};\n    else if(msg.payload.slice(-2)==\",0\")\n        return {payload:\"{light:6,power:off}\"};\n\n    if(msg.payload.toLowerCase().includes(\"dimlevel:\"))\n        return {payload:\"{light:6,\"+String(msg.payload.toLowerCase()).substring(17)};\n}else if(msg.payload.includes(\"12345123407\")){\n    //this is all astreerlight1\n    if(msg.payload.slice(-2)==\",1\")\n        return {payload:\"{light:7,power:on}\"};\n    else if(msg.payload.slice(-2)==\",0\")\n        return {payload:\"{light:7,power:off}\"};\n\n    if(msg.payload.toLowerCase().includes(\"dimlevel:\"))\n        return {payload:\"{light:7,\"+String(msg.payload.toLowerCase()).substring(17)};\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 140,
        "wires": [
            [
                "e7831cc661b60d14",
                "6fd03c68c3edc16d"
            ]
        ]
    },
    {
        "id": "65fe6ab9bf0a20f0",
        "type": "mqtt in",
        "z": "bc405aef93a3a2c0",
        "name": "ProdSL1_12345123401",
        "topic": "s/ds",
        "qos": "0",
        "datatype": "auto",
        "broker": "bbb9715de6b3ef3a",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 280,
        "wires": [
            [
                "68d147659507f904"
            ]
        ]
    },
    {
        "id": "7845d4975f870ff7",
        "type": "mqtt in",
        "z": "bc405aef93a3a2c0",
        "name": "ProdSL2_12345123402",
        "topic": "s/ds",
        "qos": "0",
        "datatype": "auto",
        "broker": "0d18fb4f1f6e0f8d",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 380,
        "wires": [
            [
                "68d147659507f904"
            ]
        ]
    },
    {
        "id": "ae44794747260043",
        "type": "mqtt in",
        "z": "bc405aef93a3a2c0",
        "name": "ProdSL3_12345123403",
        "topic": "s/ds",
        "qos": "0",
        "datatype": "auto",
        "broker": "ffa280b09e5e0df5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 440,
        "wires": [
            [
                "68d147659507f904"
            ]
        ]
    },
    {
        "id": "49213b6887084f81",
        "type": "mqtt in",
        "z": "bc405aef93a3a2c0",
        "name": "ProdSL4_12345123404",
        "topic": "s/ds",
        "qos": "0",
        "datatype": "auto",
        "broker": "3b4805373ac8adca",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 500,
        "wires": [
            [
                "68d147659507f904"
            ]
        ]
    },
    {
        "id": "9d520a4137e25ba5",
        "type": "mqtt in",
        "z": "bc405aef93a3a2c0",
        "name": "ProdSL5_12345123405",
        "topic": "s/ds",
        "qos": "0",
        "datatype": "auto",
        "broker": "acdcf317f8b0ce9f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 560,
        "wires": [
            [
                "68d147659507f904"
            ]
        ]
    },
    {
        "id": "6a2183ab5f9a52ba",
        "type": "mqtt in",
        "z": "bc405aef93a3a2c0",
        "name": "ProdSL6_12345123406",
        "topic": "s/ds",
        "qos": "0",
        "datatype": "auto",
        "broker": "c278002ca639c4da",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 640,
        "wires": [
            [
                "68d147659507f904"
            ]
        ]
    },
    {
        "id": "7efd51459f703f40",
        "type": "mqtt in",
        "z": "bc405aef93a3a2c0",
        "name": "ProdSL7_12345123407",
        "topic": "s/ds",
        "qos": "0",
        "datatype": "auto",
        "broker": "201dd01fe60fa2ec",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 280,
        "y": 700,
        "wires": [
            [
                "68d147659507f904"
            ]
        ]
    },
    {
        "id": "e7831cc661b60d14",
        "type": "debug",
        "z": "bc405aef93a3a2c0",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 280,
        "wires": []
    },
    {
        "id": "6fd03c68c3edc16d",
        "type": "mqtt out",
        "z": "bc405aef93a3a2c0",
        "name": "LegoStreetlightDemo",
        "topic": "esp8266/led",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "6c7aa8eaacfceccb",
        "x": 900,
        "y": 120,
        "wires": []
    },
    {
        "id": "d3e2b6e6747dce41",
        "type": "function",
        "z": "bc405aef93a3a2c0",
        "name": "SimulatedStreetlights",
        "func": "var Post2C8Y=[];\nPost2C8Y.push(\"200,ClimateTemperature,ClimateTemperature,\"+ Math.round(Math.random() * (30 - 20) + 20) +\",°C\");\nPost2C8Y.push(\"200,Humidity,Humidity,\"+ Math.round(Math.random() * (70 - 40) + 40) +\",%\");\nPost2C8Y.push(\"200,Light Intensity,Light Intensity,\"+ Math.round(Math.random() * (250 - 1) + 1) +\",Lux\");\nPost2C8Y.push(\"200,Device Temperature,Device Temperature,\"+ Math.round(Math.random() * (40 - 30) + 30) +\",°C\");\nPost2C8Y.push(\"200,EnergyConsumption,EnergyConsumption,\"+ Math.round(Math.random() * (70 - 40) + 40) +\",°C\");\nPost2C8Y.push(\"200,Voltage,Voltage,\"+ Math.round(Math.random() * (240 - 235) + 235) +\",°C\");\nPost2C8Y.push(\"200,Current,Current,\"+ Math.round(Math.random() * (200 - 100) + 100) +\",°C\");\nPost2C8Y.push(\"200,Malfunction,Malfunction,0,State\");\nPost2C8Y.push(\"200,Light,Light,1,State\");\nPost2C8Y.push(\"200,Occupancy,Occupancy,\"+ Math.round(Math.random() * (1 - 0) + 0) +\",State\");\n\n\nvar d = new Date(), e = new Date(d);\nvar msSinceMidnight = e - d.setHours(0,0,0,0);\nvar mins = msSinceMidnight/60000;\n// DataArr.push(\"200,Steps,Steps,\"+ Math.round(mins*5));\n\nPost2C8Y.push(\"200,CurrentOccupants,CurrentOccupants,\"+ Math.round(mins*5)+\",Counts\");\n\nreturn {payload:Post2C8Y};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 820,
        "wires": [
            [
                "1112190d0e527e3c"
            ]
        ]
    },
    {
        "id": "ee3037ccc7198f2e",
        "type": "inject",
        "z": "bc405aef93a3a2c0",
        "d": true,
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 880,
        "wires": [
            [
                "d3e2b6e6747dce41"
            ]
        ]
    },
    {
        "id": "1112190d0e527e3c",
        "type": "split",
        "z": "bc405aef93a3a2c0",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 470,
        "y": 860,
        "wires": [
            [
                "9b463f9f127829c8",
                "e2e665140738c5ea",
                "9b41b17ac81ea0c3"
            ]
        ]
    },
    {
        "id": "9b463f9f127829c8",
        "type": "mqtt out",
        "z": "bc405aef93a3a2c0",
        "d": true,
        "name": "ProdSL1",
        "topic": "s/us",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbb9715de6b3ef3a",
        "x": 740,
        "y": 820,
        "wires": []
    },
    {
        "id": "e2e665140738c5ea",
        "type": "mqtt out",
        "z": "bc405aef93a3a2c0",
        "d": true,
        "name": "ProdSL2",
        "topic": "s/us",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "0d18fb4f1f6e0f8d",
        "x": 740,
        "y": 900,
        "wires": []
    },
    {
        "id": "30f7318f282f7647",
        "type": "mqtt in",
        "z": "bc405aef93a3a2c0",
        "name": "ResetEvent",
        "topic": "esp8266/led/reset",
        "qos": "0",
        "datatype": "auto",
        "broker": "6c7aa8eaacfceccb",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 550,
        "y": 360,
        "wires": [
            [
                "b73283a6f39461e6"
            ]
        ]
    },
    {
        "id": "5b221fc7c5b7f14e",
        "type": "mqtt out",
        "z": "bc405aef93a3a2c0",
        "name": "prod_Post_Malfunction",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "bbb9715de6b3ef3a",
        "x": 1400,
        "y": 580,
        "wires": []
    },
    {
        "id": "b73283a6f39461e6",
        "type": "function",
        "z": "bc405aef93a3a2c0",
        "name": "SimulatedStreetlights",
        "func": "if(msg.payload.includes(\"true\")){\n    return {payload:\"200,Malfunction,Malfunction,1,State\"}\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 520,
        "wires": [
            [
                "5b221fc7c5b7f14e",
                "e7831cc661b60d14",
                "61a9f37e078bbd2c"
            ]
        ]
    },
    {
        "id": "0758396a785d39b9",
        "type": "function",
        "z": "bc405aef93a3a2c0",
        "name": "SimulatedStreetlights",
        "func": "return {payload:\"200,Malfunction,Malfunction,0,State\"}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 940,
        "y": 680,
        "wires": [
            [
                "5b221fc7c5b7f14e",
                "e7831cc661b60d14"
            ]
        ]
    },
    {
        "id": "61a9f37e078bbd2c",
        "type": "delay",
        "z": "bc405aef93a3a2c0",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 860,
        "y": 580,
        "wires": [
            [
                "0758396a785d39b9"
            ]
        ]
    },
    {
        "id": "9b41b17ac81ea0c3",
        "type": "mqtt out",
        "z": "bc405aef93a3a2c0",
        "d": true,
        "name": "ProdSL3",
        "topic": "s/us",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "a1759412171ed784",
        "x": 900,
        "y": 860,
        "wires": []
    },
    {
        "id": "98ba4a2514b2d490",
        "type": "function",
        "z": "34b7d0bcf37c9198",
        "name": "SimulatedVitals",
        "func": "var Post2C8Y=[];\nPost2C8Y.push(\"200,Battery,Battery,\"+  Math.round(Math.random() * (98 - 97) + 97) +\",%\");\nPost2C8Y.push(\"200,HeartRate,HeartRate,\"+  Math.round(Math.random() * (95 - 85) + 85) +\",bpm\");\nPost2C8Y.push(\"200,HeartBeat,HeartBeat,\"+  Math.round(Math.random() * (95 - 85) + 85) +\",bpm\");\nPost2C8Y.push(\"200,SpO2,SpO2,\"+ Math.round(Math.random() * (100 - 95) + 95) +\",%\");\nPost2C8Y.push(\"200,Temperature,Temperature,\"+ Math.round(Math.random() * (37 - 36) + 36) +\",°C\");\nPost2C8Y.push(\"200,Shock,Shock,0,State\");\nPost2C8Y.push(\"200,Mood,Mood,1,State\");\nPost2C8Y.push(\"200,SafetyGear,SafetyGear,1,State\");\n\nvar d = new Date(), e = new Date(d);\nvar msSinceMidnight = e - d.setHours(0,0,0,0);\nvar mins = msSinceMidnight/60000;\n\nPost2C8Y.push(\"200,Steps,Steps,\"+ Math.round(mins*5) +\",Counts\");\n\nreturn {payload:Post2C8Y};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 600,
        "wires": [
            [
                "d01c0b44faa9fd9a"
            ]
        ]
    },
    {
        "id": "17b234d107d28c02",
        "type": "inject",
        "z": "34b7d0bcf37c9198",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 720,
        "wires": [
            [
                "98ba4a2514b2d490"
            ]
        ]
    },
    {
        "id": "5768cf7fca0547c8",
        "type": "debug",
        "z": "34b7d0bcf37c9198",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 540,
        "wires": []
    },
    {
        "id": "d01c0b44faa9fd9a",
        "type": "split",
        "z": "34b7d0bcf37c9198",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 690,
        "y": 640,
        "wires": [
            [
                "8cd01d64722c5802"
            ]
        ]
    },
    {
        "id": "e12639fc820f99cd",
        "type": "split",
        "z": "34b7d0bcf37c9198",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 670,
        "y": 260,
        "wires": [
            [
                "5768cf7fca0547c8",
                "8cd01d64722c5802"
            ]
        ]
    },
    {
        "id": "151d818039f61208",
        "type": "function",
        "z": "34b7d0bcf37c9198",
        "name": "Sensor Reading",
        "func": "if(msg.payload.hasOwnProperty(\"Wifi\") && \n    msg.payload.Wifi.hasOwnProperty(\"RSSI\")){\n    return {payload:\"200,HubSignal,HubSignal,\"+ msg.payload.Wifi.RSSI +\",dBm\"};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 440,
        "wires": [
            [
                "8cd01d64722c5802",
                "5768cf7fca0547c8"
            ]
        ]
    },
    {
        "id": "beedb911647508ef",
        "type": "function",
        "z": "34b7d0bcf37c9198",
        "name": "Sensor Reading",
        "func": "if(msg.payload.hasOwnProperty(\"ZbReceived\")){\n    var Post2C8Y=[];\n    let SensorData = msg.payload.ZbReceived[Object.keys(msg.payload.ZbReceived)[0]];\n    if(SensorData.Name==\"ClimateSensor\"){\n        if(SensorData.hasOwnProperty(\"Humidity\"))\n            Post2C8Y.push(\"200,ClimateHumidity,ClimateHumidity,\"+ SensorData.Humidity+\",%\");\n        if(SensorData.hasOwnProperty(\"LinkQuality\"))\n            Post2C8Y.push(\"200,ClimateLQI,ClimateLQI,\"+ SensorData.LinkQuality+\",LQI\");\n        if(SensorData.hasOwnProperty(\"BatteryPercentage\"))\n            Post2C8Y.push(\"200,ClimateBattery,ClimateBattery,\"+ SensorData.BatteryPercentage+\",%\");\n        if(SensorData.hasOwnProperty(\"Temperature\"))\n            Post2C8Y.push(\"200,ClimateTemperature,ClimateTemperature,\"+ SensorData.Temperature+\",°C\");\n    }else if(SensorData.Name ==\"MotionSensor\"){\n        if(SensorData.hasOwnProperty(\"Occupancy\"))\n            Post2C8Y.push(\"200,Occupancy,Occupancy,\"+ SensorData.Occupancy+\",State\");\n        if(SensorData.hasOwnProperty(\"LinkQuality\"))\n            Post2C8Y.push(\"200,OccupancyLQI,OccupancyLQI,\"+ SensorData.LinkQuality+\",LQI\");\n        if(SensorData.hasOwnProperty(\"BatteryPercentage\"))\n            Post2C8Y.push(\"200,OccupancyBattery,OccupancyBattery,\"+ SensorData.BatteryPercentage+\",%\");\n    }else if(SensorData.Name==\"WirelessButton\"){\n        if(SensorData.hasOwnProperty(\"Click\"))\n            Post2C8Y.push(\"200,ButtonClick,ButtonClick,\"+ SensorData.Click+\",State\");\n        if(SensorData.hasOwnProperty(\"LinkQuality\"))\n            Post2C8Y.push(\"200,WirelessButtonLQI,WirelessButtonLQI,\"+ SensorData.LinkQuality+\",LQI\");\n        if(SensorData.hasOwnProperty(\"BatteryPercentage\"))\n            Post2C8Y.push(\"200,WirelessButtonLQI,WirelessButtonLQI,\"+ SensorData.BatteryPercentage+\",%\");\n    }else if(SensorData.Name==\"ContactSensor\"){\n        if(SensorData.hasOwnProperty(\"Contact\"))\n            Post2C8Y.push(\"200,Opening,Opening,\"+ SensorData.Contact+\",State\");\n        if(SensorData.hasOwnProperty(\"LinkQuality\"))\n            Post2C8Y.push(\"200,OpeningLQI,OpeningLQI,\"+ SensorData.LinkQuality+\",LQI\");\n        if(SensorData.hasOwnProperty(\"BatteryPercentage\"))\n            Post2C8Y.push(\"200,OpeningBattery,OpeningBattery,\"+ SensorData.BatteryPercentage+\",%\");\n    }\n    Post2C8Y.push(\"200,HeartRate,HeartRate,90,bpm\");\n    Post2C8Y.push(\"200,SpO2,SpO2,96,%\");\n    return {payload:Post2C8Y};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 220,
        "wires": [
            [
                "e12639fc820f99cd"
            ]
        ]
    },
    {
        "id": "c398462f39774425",
        "type": "mqtt out",
        "z": "34b7d0bcf37c9198",
        "d": true,
        "name": "FahadsCareRecipient_Dev",
        "topic": "s/us",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "407f1b4b3e947e45",
        "x": 1080,
        "y": 340,
        "wires": []
    },
    {
        "id": "8cd01d64722c5802",
        "type": "mqtt out",
        "z": "34b7d0bcf37c9198",
        "d": true,
        "name": "PRODFahadsCareRecipient",
        "topic": "s/us",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "135d6c0815123365",
        "x": 1020,
        "y": 260,
        "wires": []
    },
    {
        "id": "f1e412d672889e74",
        "type": "json",
        "z": "34b7d0bcf37c9198",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 390,
        "y": 340,
        "wires": [
            [
                "151d818039f61208"
            ]
        ]
    },
    {
        "id": "b3647cd7caa4548d",
        "type": "json",
        "z": "34b7d0bcf37c9198",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 390,
        "y": 80,
        "wires": [
            [
                "beedb911647508ef"
            ]
        ]
    },
    {
        "id": "bddebd449ff2ee51",
        "type": "mqtt in",
        "z": "34b7d0bcf37c9198",
        "name": "FahadsCareRecipient_Hub",
        "topic": "FahadsZBHub/STATE",
        "qos": "0",
        "datatype": "auto",
        "broker": "4ca1626c609b40b5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 190,
        "y": 460,
        "wires": [
            [
                "5768cf7fca0547c8"
            ]
        ]
    },
    {
        "id": "0e738ac564fdb2b7",
        "type": "mqtt in",
        "z": "34b7d0bcf37c9198",
        "name": "FahadsCareRecipient_Sensors",
        "topic": "FahadsZBHub/SENSOR",
        "qos": "0",
        "datatype": "auto",
        "broker": "4ca1626c609b40b5",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 160,
        "wires": [
            [
                "5768cf7fca0547c8"
            ]
        ]
    },
    {
        "id": "c5e0ea701c2e7110",
        "type": "inject",
        "z": "250c4c97297d1235",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 240,
        "y": 340,
        "wires": [
            [
                "1e8a57ce4813f902"
            ]
        ]
    },
    {
        "id": "1e8a57ce4813f902",
        "type": "function",
        "z": "250c4c97297d1235",
        "name": "Simulate",
        "func": "var Post2C8Y=[];\n\nlet DTS=new Date();\n\n\nPost2C8Y.push(\"200,level,level,\"+ Math.round(Math.random() * (40 - 10) + 10) +\",°C\");\nPost2C8Y.push(\"200,wearingStatus,wearingStatus,\"+ Math.round(Math.random() * (40 - 10) + 10) +\",°C\");\n\n\n// Post2C8Y.push(\"200,AmbientTemperature,AmbientTemperature,\"+ Math.round(Math.random() * (40 - 10) + 10) +\",°C\");\n// Post2C8Y.push(\"200,AmbientHumidity,AmbientHumidity,\"+ Math.round(Math.random() * (70 - 40) + 40) +\",%\");\n// Post2C8Y.push(\"200,LightIntensity,LightIntensity,\"+ Math.round(Math.random() * (35 - 20) + 20) +\",K Lux\");\n// Post2C8Y.push(\"200,DeviceTemperature,DeviceTemperature,\"+ Math.round(Math.random() * (50 - 20) + 20) +\",°C\");\n\n// Post2C8Y.push(\"200,MagFilterAge,MagFilterAge,341,Days\");\n// Post2C8Y.push(\"200,SupplyTemperature,SupplyTemperature,\"+ Math.round(Math.random() * (60 - 40) + 40) +\",°C\");\n// Post2C8Y.push(\"200,SupplyHumidity,SupplyHumidity,\"+ Math.round(Math.random() * (50 - 45) + 45) +\",%\");\n// Post2C8Y.push(\"200,CondenserInletTemp,CondenserInletTemp,\"+ Math.round(Math.random() * (34 - 26) + 26) +\",°C\");\n// Post2C8Y.push(\"200,CondenserOuletTemperature,CondenserOuletTemperature,\"+ Math.round(Math.random() * (38 - 30) + 30) +\",°C\");\n// Post2C8Y.push(\"200,WaterPressure,WaterPressure,\"+ Math.round(Math.random() * (90 - 18) + 18) +\",kpa\");\n// Post2C8Y.push(\"200,WaterFlowRate,WaterFlowRate,\"+ Math.round(Math.random() * (1700 - 1000) + 1000) +\",l/h\");\n// Post2C8Y.push(\"200,BackupHeater,BackupHeater,0,state\");\n// Post2C8Y.push(\"200,NoiseLevel,NoiseLevel,\"+ Math.round(Math.random() * (70 - 30) + 30) +\",db(A)\");\n// Post2C8Y.push(\"200,PowerInput,PowerInput,\"+ Math.round(Math.random() * (3 - 1) + 1) +\",kW\");\n// Post2C8Y.push(\"200,PowerOutput,PowerOutput,\"+ Math.round(Math.random() * (10 - 6) + 6) +\",kW\");\n// Post2C8Y.push(\"200,HeatingOutput,HeatingOutput,\"+ Math.round(Math.random() * (8 - 6) + 6) +\",kW\");\n\n///Post2C8Y.push(\"402,51.401921020815706,-1.3210435153181486,1\")\n\nreturn {payload:Post2C8Y};\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 340,
        "wires": [
            [
                "401d780d0d5019d6"
            ]
        ]
    },
    {
        "id": "401d780d0d5019d6",
        "type": "split",
        "z": "250c4c97297d1235",
        "name": "",
        "splt": "",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 830,
        "y": 340,
        "wires": [
            [
                "5a993a2c41a3c83b",
                "a5647abd85511d10"
            ]
        ]
    },
    {
        "id": "5a993a2c41a3c83b",
        "type": "mqtt out",
        "z": "250c4c97297d1235",
        "d": true,
        "name": "RepetitionTest",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "4795c7c497183516",
        "x": 1140,
        "y": 280,
        "wires": []
    },
    {
        "id": "a5647abd85511d10",
        "type": "debug",
        "z": "250c4c97297d1235",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1130,
        "y": 400,
        "wires": []
    },
    {
        "id": "029c61025a787357",
        "type": "function",
        "z": "76fcc8aa9fbb9d8b",
        "name": "",
        "func": "msg.deviceId = 60;\n//msg.payload = {deviceId:60};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 220,
        "wires": [
            [
                "f297636f7fc3e9f5"
            ]
        ]
    },
    {
        "id": "1440e565a48be04b",
        "type": "inject",
        "z": "76fcc8aa9fbb9d8b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 220,
        "wires": [
            [
                "029c61025a787357"
            ]
        ]
    },
    {
        "id": "f297636f7fc3e9f5",
        "type": "http request",
        "z": "76fcc8aa9fbb9d8b",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://lab.nw.do/v1.6/gnssDevicePositionsGet?deviceId={{deviceId}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 510,
        "y": 220,
        "wires": [
            [
                "fa1d08cc77cdb0f0"
            ]
        ]
    },
    {
        "id": "5c70342156ceece8",
        "type": "debug",
        "z": "76fcc8aa9fbb9d8b",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 320,
        "wires": []
    },
    {
        "id": "fa1d08cc77cdb0f0",
        "type": "csv",
        "z": "76fcc8aa9fbb9d8b",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 750,
        "y": 220,
        "wires": [
            [
                "651b72a6b1f58976"
            ]
        ]
    },
    {
        "id": "651b72a6b1f58976",
        "type": "function",
        "z": "76fcc8aa9fbb9d8b",
        "name": "",
        "func": "msg.Total = 0;\nfilteredReadings = []\n\n//clean strange labels, and remove [etc/utc] from timestamp\nfor(let i = 0 ;i < msg.payload.length; i++){\n    let reading = msg.payload[i];\n    \n    //replacing extra characters in date & time\n    if (reading[\"Date & Time\"]){\n        reading[\"Date & Time\"] = reading[\"Date & Time\"].substring(0, 20)\n    }\n}\n\n//Sorting array against date & time\nmsg.payload.sort(\n  (objA, objB) =>  new Date(objA[\"Date & Time\"]) - new Date(objB[\"Date & Time\"])\n);\n\n//Filter new readings based on timestamp\nfor(let i = 0 ;i < msg.payload.length; i++){\n    let reading = msg.payload[i];\n    \n    if (reading[\"Date & Time\"]) {\n        if (global.get('latestTimestamp') == null){\n            global.set('latestTimestamp', reading[\"Date & Time\"])\n            filteredReadings.push(reading);\n        } else if (new  Date(reading[\"Date & Time\"]) > new Date(global.get('latestTimestamp'))){\n            global.set('latestTimestamp', reading[\"Date & Time\"])\n            filteredReadings.push(reading);\n        } else {\n            console.log(`Ignored the following reading: ${reading}`);\n        }\n    }\n}\n\n//Sorting filteredReadings against date & time\nfilteredReadings.sort(\n  (objA, objB) =>  new Date(objB[\"Date & Time\"]) - new Date(objA[\"Date & Time\"])\n);\n\ncurrentQueue =  global.get('queue');\nupdatedQueue = filteredReadings.concat(currentQueue);\n\nglobal.set('queue', updatedQueue);\n\nmsg.payload = global.get('queue');\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nglobal.set('queue', []);\nglobal.set('latestTimestamp', null)",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 220,
        "wires": [
            [
                "5c70342156ceece8"
            ]
        ]
    },
    {
        "id": "176e4b0f131891a8",
        "type": "inject",
        "z": "76fcc8aa9fbb9d8b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 320,
        "wires": [
            [
                "d15d679f9146bbb3"
            ]
        ]
    },
    {
        "id": "fcc5f51f4336238e",
        "type": "function",
        "z": "76fcc8aa9fbb9d8b",
        "name": "",
        "func": "queue = global.get('queue');\nmeasurement = queue.pop();\nglobal.set('queue', queue);\n\nmsg.payload = measurement;\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nglobal.set('queue', []);\nglobal.set('latestTimestamp', null)",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 320,
        "wires": [
            [
                "0f5bd8c623c63eb6",
                "5c70342156ceece8",
                "8a7e7754216da9a6"
            ]
        ]
    },
    {
        "id": "82e20101f2ca649d",
        "type": "http request",
        "z": "76fcc8aa9fbb9d8b",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 950,
        "y": 400,
        "wires": [
            [
                "5c70342156ceece8"
            ]
        ]
    },
    {
        "id": "d15d679f9146bbb3",
        "type": "function",
        "z": "76fcc8aa9fbb9d8b",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvaGFzc2FuLmFobWFkQGludml4aWJsZS5jb206bXlDdW11bG9jaXR5UGFzcw==';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 320,
        "wires": [
            [
                "fcc5f51f4336238e"
            ]
        ]
    },
    {
        "id": "742fefab42f8e660",
        "type": "http request",
        "z": "76fcc8aa9fbb9d8b",
        "name": "LocationEvent",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.cumulocity.com/event/events",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 960,
        "y": 460,
        "wires": [
            [
                "5c70342156ceece8"
            ]
        ]
    },
    {
        "id": "0f5bd8c623c63eb6",
        "type": "function",
        "z": "76fcc8aa9fbb9d8b",
        "name": "Prepare measurements",
        "func": "measurement = msg.payload;\n\nif (measurement){\n    if (measurement[\"Date & Time\"]){\n        Json = { \n            measurements : [\n                {\n                    type:\"converged_measurements\",\n                    time: measurement[\"Date & Time\"],\n                    source: {\"id\": \"187803409\" },\n                    converged_measurements:{\n                        Speed: { \"value\": parseFloat(measurement[\"Speed[m/s]\"]), \"unit\": \"m/s\" },\n                        Confidence: { \"value\": parseFloat(measurement[\"Confidence[m]\"]), \"unit\": \"m\" },\n                    }\n                }\n            ]\n        }\n        \n        msg.payload = Json;\n        return msg;\n    }\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nglobal.set('queue', []);\nglobal.set('latestTimestamp', null)",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 400,
        "wires": [
            [
                "82e20101f2ca649d"
            ]
        ]
    },
    {
        "id": "a042db076221bfcb",
        "type": "function",
        "z": "76fcc8aa9fbb9d8b",
        "name": "Prepare location",
        "func": "measurement1 = msg.payload;\n\nif (measurement1){\n    if (measurement1[\"Date & Time\"]) {\n        msg.payload = {\n                \"type\": \"c8y_LocationUpdate\",\n                \"time\": measurement1[\"Date & Time\"].replace(\"Z\",\"+00:00\"),\n                \"text\": \"Location updated v2\",\n                \"source\": { \"id\":\"187803409\"},\n                \"c8y_Position\": {\n                    \"lng\": parseFloat(measurement1[\"Longitude[°]\"]),\n                    \"lat\": parseFloat(measurement1[\"Latitude[°]\"]),\n                    \"alt\": parseFloat(measurement1[\"Altitude[m]\"]),\n                }\n        }\n        \n        if (msg.payload.c8y_Position[\"lng\"] != 0 && msg.payload.c8y_Position[\"lat\"] != 0){\n            return msg;\n        }\n    }\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 460,
        "wires": [
            [
                "742fefab42f8e660"
            ]
        ]
    },
    {
        "id": "8a7e7754216da9a6",
        "type": "function",
        "z": "76fcc8aa9fbb9d8b",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvaGFzc2FuLmFobWFkQGludml4aWJsZS5jb206bXlDdW11bG9jaXR5UGFzcw==';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.event+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.event+json';\nmsg.url=\"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 460,
        "wires": [
            [
                "a042db076221bfcb"
            ]
        ]
    },
    {
        "id": "6b6f5cc89a65b3a9",
        "type": "function",
        "z": "76fcc8aa9fbb9d8b",
        "name": "",
        "func": "msg.deviceId = 58;\n//msg.payload = {deviceId:60};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 580,
        "wires": [
            [
                "bef09e65709215ad"
            ]
        ]
    },
    {
        "id": "342945042445f001",
        "type": "inject",
        "z": "76fcc8aa9fbb9d8b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 580,
        "wires": [
            [
                "6b6f5cc89a65b3a9"
            ]
        ]
    },
    {
        "id": "bef09e65709215ad",
        "type": "http request",
        "z": "76fcc8aa9fbb9d8b",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://lab.nw.do/v1.6/gnssDevicePositionsGet?deviceId={{deviceId}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 530,
        "y": 580,
        "wires": [
            [
                "5a7934fd45d3ad1c"
            ]
        ]
    },
    {
        "id": "b329426dc90f6df2",
        "type": "debug",
        "z": "76fcc8aa9fbb9d8b",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 680,
        "wires": []
    },
    {
        "id": "5a7934fd45d3ad1c",
        "type": "csv",
        "z": "76fcc8aa9fbb9d8b",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 770,
        "y": 580,
        "wires": [
            [
                "393f11f84fb40ff3"
            ]
        ]
    },
    {
        "id": "393f11f84fb40ff3",
        "type": "function",
        "z": "76fcc8aa9fbb9d8b",
        "name": "",
        "func": "msg.Total = 0;\nfilteredReadings = []\n\n//clean strange labels, and remove [etc/utc] from timestamp\nfor(let i = 0 ;i < msg.payload.length; i++){\n    let reading = msg.payload[i];\n    \n    //replacing extra characters in date & time\n    if (reading[\"Date & Time\"]){\n        reading[\"Date & Time\"] = reading[\"Date & Time\"].substring(0, 20)\n    }\n}\n\n//Sorting array against date & time\nmsg.payload.sort(\n  (objA, objB) =>  new Date(objA[\"Date & Time\"]) - new Date(objB[\"Date & Time\"])\n);\n\n//Filter new readings based on timestamp\nfor(let i = 0 ;i < msg.payload.length; i++){\n    let reading = msg.payload[i];\n    \n    if (reading[\"Date & Time\"]) {\n        if (global.get('latestTimestamp2') == null){\n            global.set('latestTimestamp2', reading[\"Date & Time\"])\n            filteredReadings.push(reading);\n        } else if (new  Date(reading[\"Date & Time\"]) > new Date(global.get('latestTimestamp2'))){\n            global.set('latestTimestamp2', reading[\"Date & Time\"])\n            filteredReadings.push(reading);\n        } else {\n            console.log(`Ignored the following reading: ${reading}`);\n        }\n    }\n}\n\n//Sorting filteredReadings against date & time\nfilteredReadings.sort(\n  (objA, objB) =>  new Date(objB[\"Date & Time\"]) - new Date(objA[\"Date & Time\"])\n);\n\ncurrentQueue =  global.get('queue2');\nupdatedQueue = filteredReadings.concat(currentQueue);\n\nglobal.set('queue2', updatedQueue);\n\nmsg.payload = global.get('queue2');\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nglobal.set('queue2', []);\nglobal.set('latestTimestamp2', null)",
        "finalize": "",
        "libs": [],
        "x": 980,
        "y": 580,
        "wires": [
            [
                "b329426dc90f6df2"
            ]
        ]
    },
    {
        "id": "f55decf69e5a0b33",
        "type": "inject",
        "z": "76fcc8aa9fbb9d8b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "headers",
                "v": "{}",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 680,
        "wires": [
            [
                "47a7e5b9dc582162"
            ]
        ]
    },
    {
        "id": "eeb8ed42db8fc29c",
        "type": "function",
        "z": "76fcc8aa9fbb9d8b",
        "name": "",
        "func": "queue = global.get('queue2');\nmeasurement = queue.pop();\nglobal.set('queue2', queue);\n\nmsg.payload = measurement;\n\nreturn msg;\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nglobal.set('queue', []);\nglobal.set('latestTimestamp', null)",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 680,
        "wires": [
            [
                "e8bcd8021b1d23f0",
                "b329426dc90f6df2",
                "21384152ae72920b"
            ]
        ]
    },
    {
        "id": "85b7b2b3d53c98e4",
        "type": "http request",
        "z": "76fcc8aa9fbb9d8b",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.cumulocity.com/measurement/measurements",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 970,
        "y": 760,
        "wires": [
            [
                "b329426dc90f6df2"
            ]
        ]
    },
    {
        "id": "47a7e5b9dc582162",
        "type": "function",
        "z": "76fcc8aa9fbb9d8b",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvaGFzc2FuLmFobWFkQGludml4aWJsZS5jb206bXlDdW11bG9jaXR5UGFzcw==';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.measurementCollection+json';\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 680,
        "wires": [
            [
                "eeb8ed42db8fc29c"
            ]
        ]
    },
    {
        "id": "cb28ee532e21553b",
        "type": "http request",
        "z": "76fcc8aa9fbb9d8b",
        "name": "LocationEvent",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://t1210372600.cumulocity.com/event/events",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 980,
        "y": 820,
        "wires": [
            [
                "b329426dc90f6df2"
            ]
        ]
    },
    {
        "id": "e8bcd8021b1d23f0",
        "type": "function",
        "z": "76fcc8aa9fbb9d8b",
        "name": "Prepare measurements",
        "func": "measurement = msg.payload;\n\nif (measurement){\n    if (measurement[\"Date & Time\"]){\n        Json = { \n            measurements : [\n                {\n                    type:\"converged_measurements\",\n                    time: measurement[\"Date & Time\"],\n                    source: {\"id\": \"187806119\" },\n                    converged_measurements:{\n                        Speed: { \"value\": parseFloat(measurement[\"Speed[m/s]\"]), \"unit\": \"m/s\" },\n                        Confidence: { \"value\": parseFloat(measurement[\"Confidence[m]\"]), \"unit\": \"m\" },\n                    }\n                }\n            ]\n        }\n        \n        msg.payload = Json;\n        return msg;\n    }\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nglobal.set('queue', []);\nglobal.set('latestTimestamp', null)",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 760,
        "wires": [
            [
                "85b7b2b3d53c98e4"
            ]
        ]
    },
    {
        "id": "815d6814a35e02aa",
        "type": "function",
        "z": "76fcc8aa9fbb9d8b",
        "name": "Prepare location",
        "func": "measurement1 = msg.payload;\n\nif (measurement1){\n    if (measurement1[\"Date & Time\"]) {\n        msg.payload = {\n                \"type\": \"c8y_LocationUpdate\",\n                \"time\": measurement1[\"Date & Time\"].replace(\"Z\",\"+00:00\"),\n                \"text\": \"Location updated v2\",\n                \"source\": { \"id\":\"187806119\"},\n                \"c8y_Position\": {\n                    \"lng\": parseFloat(measurement1[\"Longitude[°]\"]),\n                    \"lat\": parseFloat(measurement1[\"Latitude[°]\"]),\n                    \"alt\": parseFloat(measurement1[\"Altitude[m]\"]),\n                }\n        }\n        \n        if (msg.payload.c8y_Position[\"lng\"] != 0 && msg.payload.c8y_Position[\"lat\"] != 0){\n            return msg;\n        }\n    }\n}\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 820,
        "wires": [
            [
                "cb28ee532e21553b"
            ]
        ]
    },
    {
        "id": "21384152ae72920b",
        "type": "function",
        "z": "76fcc8aa9fbb9d8b",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['Authorization'] = 'Basic dDEyMTAzNzI2MDAvaGFzc2FuLmFobWFkQGludml4aWJsZS5jb206bXlDdW11bG9jaXR5UGFzcw==';\nmsg.headers['Content-Type'] = 'application/vnd.com.nsn.cumulocity.event+json';\nmsg.headers['Accept'] = 'application/vnd.com.nsn.cumulocity.event+json';\nmsg.url=\"\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 820,
        "wires": [
            [
                "815d6814a35e02aa"
            ]
        ]
    },
    {
        "id": "00d0e68f07cae712",
        "type": "coap in",
        "z": "76fcc8aa9fbb9d8b",
        "method": "GET",
        "name": "",
        "server": "5eb4d7055cb2e340",
        "url": "/idtronic_trackmini",
        "x": 300,
        "y": 980,
        "wires": [
            [
                "ebcaddb1257c6ccd",
                "dfc154e3fce1753f"
            ]
        ]
    },
    {
        "id": "ebcaddb1257c6ccd",
        "type": "debug",
        "z": "76fcc8aa9fbb9d8b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 1060,
        "wires": []
    },
    {
        "id": "5ab904ca0ba80d7f",
        "type": "coap request",
        "z": "76fcc8aa9fbb9d8b",
        "method": "GET",
        "observe": false,
        "multicast": false,
        "multicastTimeout": 20000,
        "url": "https://etl.xelerate.solutions:5683/idtronic_trackmini",
        "content-format": "text/plain",
        "raw-buffer": false,
        "name": "sfsf",
        "x": 710,
        "y": 1220,
        "wires": [
            [
                "ebcaddb1257c6ccd"
            ]
        ]
    },
    {
        "id": "bacf2ddb6e64c911",
        "type": "coap response",
        "z": "76fcc8aa9fbb9d8b",
        "name": "",
        "statusCode": "",
        "contentFormat": "text/plain",
        "x": 670,
        "y": 1080,
        "wires": []
    },
    {
        "id": "dfc154e3fce1753f",
        "type": "function",
        "z": "76fcc8aa9fbb9d8b",
        "name": "",
        "func": "msg.payload=\"hello from coap server\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1040,
        "wires": [
            [
                "bacf2ddb6e64c911",
                "ebcaddb1257c6ccd"
            ]
        ]
    },
    {
        "id": "c454b5056b0db165",
        "type": "inject",
        "z": "76fcc8aa9fbb9d8b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "topicis",
        "payload": "hello from client",
        "payloadType": "str",
        "x": 320,
        "y": 1220,
        "wires": [
            [
                "5ab904ca0ba80d7f"
            ]
        ]
    },
    {
        "id": "7e0240494f9a5155",
        "type": "function",
        "z": "8744f388b5607c09",
        "name": "Buffer2HexPadded",
        "func": "// Creation of a function to get the Hex Value from a message\nfunction* hexFormatValues(buffer) {\n  for (let x of buffer) {\n    const hex = x.toString(16)\n    yield hex.padStart(2, '0')\n  }\n}\n\n// Variable declaration for my loop\nvar string = \"\"\nconst buf = Buffer.from(msg.payload)\n\n// Concatenation of the buffer in a string \nfor (let hex of hexFormatValues(buf)) {\n  string = string + hex +\" \" //add a space in each byte for easy distinction and splitting\n} \n\nmsg.payload = string.trim();\nmsg.ip = msg.ip.toString().replace(\"::ffff:\",\"\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 200,
        "wires": [
            [
                "ce0b17417b20c84b"
            ]
        ]
    },
    {
        "id": "3038359e04bc5870",
        "type": "udp in",
        "z": "8744f388b5607c09",
        "name": "",
        "iface": "",
        "port": "4320",
        "ipv": "udp4",
        "multicast": "false",
        "group": "",
        "datatype": "buffer",
        "x": 140,
        "y": 200,
        "wires": [
            [
                "7e0240494f9a5155",
                "6a2bf51998cb8d81"
            ]
        ]
    },
    {
        "id": "ce0b17417b20c84b",
        "type": "function",
        "z": "8744f388b5607c09",
        "name": "DecodeAVLPacket",
        "func": "//=================================\n\nvar Raw = msg.payload;\nvar RawArray = Raw.split(\" \");\n\nvar Decoded = {};\n\nDecoded[\"PacketLength\"]=parseInt(RawArray.slice(0,2).join(\"\"),16);\nDecoded[\"PacketIDRaw\"]=RawArray.slice(2,4).join(\"\");\nDecoded[\"PacketType\"]=parseInt(RawArray.slice(4,5).join(\"\"),16);\nDecoded[\"AVLPacketIDRaw\"]=RawArray.slice(5,6).join(\"\");\nDecoded[\"AVLPacketID\"]=parseInt(RawArray.slice(5,6).join(\"\"),16);\nDecoded[\"IMEILength\"]=parseInt(RawArray.slice(6,8).join(\"\"),16);\nDecoded[\"IMEIRaw\"]=RawArray.slice(8,8+15).join(\"\");\nDecoded[\"IMEI\"] = ProcessIMEI(RawArray.slice(8,23).join(\"\"));\nDecoded[\"ICCID\"] = \"\";\nDecoded[\"CodecID\"]=parseInt(RawArray.slice(23,24).join(\"\"),16);\nDecoded[\"DataCountRaw\"]=RawArray.slice(24,25).join(\"\");\nDecoded[\"DataCount\"]=parseInt(RawArray.slice(24,25).join(\"\"),16);\n\nvar DataOffsetRunningIndex=25;\nfor(var Data_i=1;Data_i<=Decoded[\"DataCount\"];Data_i++){\n\t//Decoded[\"D\"+Data_i+\"_RunCount\"]=DataOffsetRunningIndex\n    var TimeStamp = parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+8).join(\"\"),16);DataOffsetRunningIndex+=8;\t\n   \tDecoded[\"D\"+Data_i+\"_Timestamp_R\"]= TimeStamp\n   \tvar TheCorrectedTimeStamp = new Date();\n   \ttry{  \n   \t    TheCorrectedTimeStamp = new Date(TimeStamp).toISOString();\n   \t    var NOW = new Date();\n   \t    if(TheCorrectedTimeStamp>NOW)\n   \t        TheCorrectedTimeStamp= NOW.toISOString();\n   \t}catch(e){}\n    Decoded[\"D\"+Data_i+\"_Timestamp\"]=TheCorrectedTimeStamp;\n    Decoded[\"D\"+Data_i+\"_Priority\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1).join(\"\"),16);DataOffsetRunningIndex+=1;\n\t\n\t//Decoded[\"D\"+Data_i+\"_GPS_Long_us\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+4).join(\"\"),16);\n    Decoded[\"D\"+Data_i+\"_GPS_Long\"]=ToSignedInt32(parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+4).join(\"\"),16));DataOffsetRunningIndex+=4;\n\t//Decoded[\"D\"+Data_i+\"_GPS_Lat_us\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+4).join(\"\"),16);\n    Decoded[\"D\"+Data_i+\"_GPS_Lat\"]=ToSignedInt32(parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+4).join(\"\"),16));DataOffsetRunningIndex+=4;\n\tDecoded[\"D\"+Data_i+\"_GPS_Alt\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+2).join(\"\"),16);DataOffsetRunningIndex+=2;\n\t//Decoded[\"D\"+Data_i+\"_GPS_Angle_us\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+2).join(\"\"),16);\n    Decoded[\"D\"+Data_i+\"_GPS_Angle\"]=ToSignedInt32(parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+2).join(\"\"),16));DataOffsetRunningIndex+=2;\n\tDecoded[\"D\"+Data_i+\"_GPS_Satellites\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1).join(\"\"),16);DataOffsetRunningIndex+=1;\t\n\tDecoded[\"D\"+Data_i+\"_GPS_Speed\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+2).join(\"\"),16);DataOffsetRunningIndex+=2;\t\n\n\tDecoded[\"D\"+Data_i+\"_IO_EventID\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1).join(\"\"),16);DataOffsetRunningIndex+=1;\t\n\tvar IORecordsCount = parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1).join(\"\"),16);DataOffsetRunningIndex+=1;\t\n\tDecoded[\"D\"+Data_i+\"_IO_Records\"]=IORecordsCount;\n    var IORecordsCount_1B = parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1).join(\"\"),16)\n\tDecoded[\"D\"+Data_i+\"_IO_1Byte_Records\"]=IORecordsCount_1B;DataOffsetRunningIndex+=1;\t\n    \n\tfor(var IORecs_1b_i=1;IORecs_1b_i<=IORecordsCount_1B;IORecs_1b_i++){\n\t\tDecoded[\"D\"+Data_i+\"_IO_1Byte_\"+IORecs_1b_i+\"_ID\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1),16);DataOffsetRunningIndex+=1;\n\t\tDecoded[\"D\"+Data_i+\"_IO_1Byte_\"+IORecs_1b_i+\"_Val\"]=(parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1),16));DataOffsetRunningIndex+=1;\n\t}\n\n\tvar IORecordsCount_2B=0,IORecordsCount_4B=0,IORecordsCount_8B=0;\n\t//check if io counts is greater then 1byte ios we just parsed. if so we must have 22byte io data too so process it\n\tIORecordsCount_2B = parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1).join(\"\"),16);DataOffsetRunningIndex+=1;\n\tDecoded[\"D\"+Data_i+\"_IO_2Byte_Records\"]=IORecordsCount_2B;\n\t\n\tif(IORecordsCount_2B>0){\n\t\tfor(var IORecs_2b_i=1;IORecs_2b_i<=IORecordsCount_2B;IORecs_2b_i++){\n\t\t\tDecoded[\"D\"+Data_i+\"_IO_2Byte_\"+IORecs_2b_i+\"_ID\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1),16);DataOffsetRunningIndex+=1;\n\t\t\tDecoded[\"D\"+Data_i+\"_IO_2Byte_\"+IORecs_2b_i+\"_Val\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+2).join(\"\"),16);DataOffsetRunningIndex+=2;\n\t\t}\n    }   \n    //below is not correct - its realized that 8byte coutn can be there even if 4byte is zero\n\t//check if io counts is greater then 1byte + 2byte ios we just parsed. if so we must have 4byte io data too so process it\n\tIORecordsCount_4B = parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1).join(\"\"),16);DataOffsetRunningIndex+=1;\n\tDecoded[\"D\"+Data_i+\"_IO_4Byte_Records\"]=IORecordsCount_4B\n\t\t\n\tif(IORecordsCount_4B>0){\n\t\tfor(var IORecs_4b_i=1;IORecs_4b_i<=IORecordsCount_4B;IORecs_4b_i++){\n\t\t\tDecoded[\"D\"+Data_i+\"_IO_4Byte_\"+IORecs_4b_i+\"_ID\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1),16);DataOffsetRunningIndex+=1;\n\t\t\tDecoded[\"D\"+Data_i+\"_IO_4Byte_\"+IORecs_4b_i+\"_Val\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+4).join(\"\"),16);DataOffsetRunningIndex+=4;\n\t\t}\n\t}\n\t//check if io counts is greater then 1byte + 2byte +4byte ios we just parsed. if so we must have 8byte io data too so process it\n\tIORecordsCount_8B = parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1).join(\"\"),16);DataOffsetRunningIndex+=1;\n\tDecoded[\"D\"+Data_i+\"_IO_8Byte_Records\"]=IORecordsCount_8B\n\t\t\n\tDecoded[\"D\"+Data_i+\"_LastIndex\"]=DataOffsetRunningIndex\n\tif(IORecordsCount_8B>0){\t\n\t\tfor(var IORecs_8b_i=1;IORecs_8b_i<=IORecordsCount_8B;IORecs_8b_i++){\n\t\t\tDecoded[\"D\"+Data_i+\"_IO_8Byte_\"+IORecs_8b_i+\"_ID\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1),16);DataOffsetRunningIndex+=1;\n\t\t\tDecoded[\"D\"+Data_i+\"_IO_8Byte_\"+IORecs_8b_i+\"_Val\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+8).join(\"\"),16);DataOffsetRunningIndex+=8;\n\t\t}\n\t\tif(Decoded[\"D1_IO_8Byte_1_ID\"]===11 && Decoded[\"D1_IO_8Byte_2_ID\"]===14){\n\t        Decoded[\"ICCID\"]=Decoded[\"D1_IO_8Byte_1_Val\"]+\"\"+Decoded[\"D1_IO_8Byte_2_Val\"]\n            msg[\"ICCID\"]=Decoded[\"ICCID\"]\n\t\t}\n\t}\n}\nDecoded[\"DataCountAtEnd\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1).join(\"\"),16)\n\nmsg.payload={\"RawData\":Raw,\"AVLDecodedData\":Decoded};\nmsg[\"IMEI\"]=Decoded.IMEI;\nreturn msg;\n\n\n\n////////=====================================\n\n\n\nfunction ToSignedInt32(x) {\n        var uint32 = x//ToUint32(x);\n        if (uint32 >= Math.pow(2, 31)) {\n            return uint32 - Math.pow(2, 32)\n        } else {\n            return uint32;\n        }\n    }\n \nfunction ToSignedInt(a){ \n    if ((a & 0x8000) > 0) \n        a =  (a - 0x10000);\n    return a;\n}\n\nfunction ProcessIMEI(theIMEI){    \n    var IMEIRawArray=theIMEI.split(\"\");\n    for (i = 0; i < IMEIRawArray.length; i++) {\n        IMEIRawArray.splice(i,1);\n    }\n    return IMEIRawArray.join(\"\");\n}\n\n\n\n\n\n\n\n\n\n\n\n/*\n\n\n\n\nconst AVLSignature=/^00 00 00 00/\nconst Len_i = 4, Len_Size = 4;//assuming zero is first element\nconst Codec_i = 8, Codec_Size = 1;\nconst Recs_i = 9, Recs_Size = 1;\nconst Data_i = 10 ;\nconst D_TimeStamp_Offset = 0, D_TimeStamp_Size = 8;\nconst D_Priority_Offset = 8, D_Priority_Size = 1;\nconst D_GPS_Long_Offset = 9, D_GPS_Long_Size = 4;\nconst D_GPS_Lat_Offset = 13, D_GPS_Lat_Size = 4;\nconst D_GPS_Alt_Offset = 17, D_GPS_Alt_Size = 2;\nconst D_GPS_Angle_Offset = 19, D_GPS_Angle_Size = 2;\nconst D_GPS_Satellites_Offset = 21, D_GPS_Satellites_Size = 1;\nconst D_GPS_Speed_Offset = 22, D_GPS_Speed_Size = 2;\nconst D_IO_ID_Offset = 24, D_IO_ID_Size = 1;\nconst D_IO_Count_Offset = 25, D_IO_Count_Size = 1;\nconst D_IO_1B_Offset = 26, D_IO_Counts_Size = 1;\n\n\n//=================\n//check if message starts with its signature 4 zero bytes\nif(Raw.match(AVLSignature)){\n    //skip first 4 zero bytes\n    var RawArray = Raw.split(\" \");\n    Decoded[\"PacketLength\"]=parseInt(RawArray.slice(Len_i,Len_i+Len_Size).join(\"\"),16);\n\tDecoded[\"Codec\"]=parseInt(RawArray.slice(Codec_i,Codec_i+Codec_Size).join(\"\"),16);\n\tvar Recs =parseInt(RawArray.slice(Recs_i,Recs_i+Recs_Size).join(\"\"),16);\n    Decoded[\"RecordsCount\"] = Recs;\n    msg[\"RecordsCount\"]=Recs;\n\n    var DataOffsetRunningIndex=Data_i;\n\tfor(var Data_i=1;Data_i<=Recs;Data_i++){\n\t    //DataOffsetRunningIndex = DataOffsetRunningIndex+D_TimeStamp_Offset;\n\t\tDecoded[\"D\"+Data_i+\"_i_ts\"]=DataOffsetRunningIndex\n\t    var TimeStamp = parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_TimeStamp_Size).join(\"\"),16)\n\t   \tDecoded[\"D\"+Data_i+\"_Timestamp_R\"]= TimeStamp\n\t   \tvar TheDate = new Date();\n\t   \ttry{\n\t   \t    TheDate = new Date(TimeStamp).toISOString();\n\t   \t}catch(e){}\n\t    Decoded[\"D\"+Data_i+\"_Timestamp\"]=TheDate\n\t    DataOffsetRunningIndex+=D_TimeStamp_Size;\t\n\t\tDecoded[\"D\"+Data_i+\"_Priority\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_Priority_Size).join(\"\"),16)\n\t    DataOffsetRunningIndex+=D_Priority_Size;\t\n\t\tDecoded[\"D\"+Data_i+\"_GPS_Long_us\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_GPS_Long_Size).join(\"\"),16)\n        Decoded[\"D\"+Data_i+\"_GPS_Long\"]=ToSignedInt32(parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_GPS_Long_Size).join(\"\"),16))\n\t    DataOffsetRunningIndex+=D_GPS_Long_Size;\t\n\t\tDecoded[\"D\"+Data_i+\"_GPS_Lat_us\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_GPS_Lat_Size).join(\"\"),16)\n\t\tDecoded[\"D\"+Data_i+\"_GPS_Lat\"]=ToSignedInt32(parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_GPS_Lat_Size).join(\"\"),16))\n\t\tDataOffsetRunningIndex+=D_GPS_Lat_Size;\t\n\t\tDecoded[\"D\"+Data_i+\"_GPS_Alt\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_GPS_Alt_Size).join(\"\"),16)\n\t    DataOffsetRunningIndex+=D_GPS_Alt_Size;\t\n\t\tDecoded[\"D\"+Data_i+\"_GPS_Angle_us\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_GPS_Angle_Size).join(\"\"),16)\n\t    Decoded[\"D\"+Data_i+\"_GPS_Angle\"]=ToSignedInt32(parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_GPS_Angle_Size).join(\"\"),16))\n\t    DataOffsetRunningIndex+=D_GPS_Angle_Size;\t\n\t\tDecoded[\"D\"+Data_i+\"_GPS_Satellites\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_GPS_Satellites_Size).join(\"\"),16)\n\t    DataOffsetRunningIndex+=D_GPS_Satellites_Size;\t\n\t\tDecoded[\"D\"+Data_i+\"_GPS_Speed\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_GPS_Speed_Size).join(\"\"),16)\n\t    DataOffsetRunningIndex+=D_GPS_Speed_Size;\t\n\t\tDecoded[\"D\"+Data_i+\"_IO_EventID\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_IO_ID_Size).join(\"\"),16)\n\t    DataOffsetRunningIndex+=D_IO_ID_Size;\t\n\t\tvar IORecordsCount = parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_IO_Count_Size).join(\"\"),16)\n\t\tDecoded[\"D\"+Data_i+\"_IO_Records\"]=IORecordsCount\n\t    DataOffsetRunningIndex+=D_IO_Counts_Size;\t\n\t    var IORecordsCount_1B = parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_IO_Counts_Size).join(\"\"),16)\n\t\tDecoded[\"D\"+Data_i+\"_IO_1Byte_Records\"]=IORecordsCount_1B\n\t    DataOffsetRunningIndex+=D_IO_Counts_Size;\t\n\t    \n\t\tfor(var IORecs_1b_i=1;IORecs_1b_i<=IORecordsCount_1B;IORecs_1b_i++){\n\t\t\tDecoded[\"D\"+Data_i+\"_IO_1Byte_\"+IORecs_1b_i+\"_ID\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1),16)\n\t\t\tDataOffsetRunningIndex+=1;\n\t\t\tDecoded[\"D\"+Data_i+\"_IO_1Byte_\"+IORecs_1b_i+\"_Val\"]=(parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1),16))\n\t\t\tDataOffsetRunningIndex+=1;\n\t\t}\n\n\t\tvar IORecordsCount_2B=0,IORecordsCount_4B=0,IORecordsCount_8B=0;\n\t\t//check if io counts is greater then 1byte ios we just parsed. if so we must have 22byte io data too so process it\n\t\tIORecordsCount_2B = parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_IO_Counts_Size).join(\"\"),16)\n\t\tDecoded[\"D\"+Data_i+\"_IO_2Byte_Records\"]=IORecordsCount_2B\n\t\tDataOffsetRunningIndex+=D_IO_Counts_Size;\t\n\t\t\n\t\tif(IORecordsCount_2B>0){\n\t\t\tfor(var IORecs_2b_i=1;IORecs_2b_i<=IORecordsCount_2B;IORecs_2b_i++){\n\t\t\t\tDecoded[\"D\"+Data_i+\"_IO_2Byte_\"+IORecs_2b_i+\"_ID\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1),16)\n\t\t\t\tDataOffsetRunningIndex+=1;\n\t\t\t\tDecoded[\"D\"+Data_i+\"_IO_2Byte_\"+IORecs_2b_i+\"_Val\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+2).join(\"\"),16)\n\t\t\t\tDataOffsetRunningIndex+=2;\n\t\t\t}\n        }   \n        //below is not correct - its realized that 8byte coutn can be there even if 4byte is zero\n\t\t//check if io counts is greater then 1byte + 2byte ios we just parsed. if so we must have 4byte io data too so process it\n\t\tIORecordsCount_4B = parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_IO_Counts_Size).join(\"\"),16)\n\t\tDecoded[\"D\"+Data_i+\"_IO_4Byte_Records\"]=IORecordsCount_4B\n\t\tDataOffsetRunningIndex+=D_IO_Counts_Size;\t\n\t\t\n\t\tif(IORecordsCount_4B>0){\n\t\t\tfor(var IORecs_4b_i=1;IORecs_4b_i<=IORecordsCount_4B;IORecs_4b_i++){\n\t\t\t\tDecoded[\"D\"+Data_i+\"_IO_4Byte_\"+IORecs_4b_i+\"_ID\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1),16)\n\t\t\t\tDataOffsetRunningIndex+=1;\n\t\t\t\tDecoded[\"D\"+Data_i+\"_IO_4Byte_\"+IORecs_4b_i+\"_Val\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+4).join(\"\"),16)\n\t\t\t\tDataOffsetRunningIndex+=4;\n\t\t\t}\n\t\t}\n\t\t//check if io counts is greater then 1byte + 2byte +4byte ios we just parsed. if so we must have 8byte io data too so process it\n\t\tIORecordsCount_8B = parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+D_IO_Counts_Size).join(\"\"),16)\n\t\tDecoded[\"D\"+Data_i+\"_IO_8Byte_Records\"]=IORecordsCount_8B\n\t\tDataOffsetRunningIndex+=D_IO_Counts_Size;\t\n\t\tDecoded[\"D\"+Data_i+\"_LastIndex\"]=DataOffsetRunningIndex\n\t\tif(IORecordsCount_8B>0){\t\n\t\t\tfor(var IORecs_8b_i=1;IORecs_8b_i<=IORecordsCount_8B;IORecs_8b_i++){\n\t\t\t\tDecoded[\"D\"+Data_i+\"_IO_8Byte_\"+IORecs_8b_i+\"_ID\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+1),16)\n\t\t\t\tDataOffsetRunningIndex+=1;\n\t\t\t\tDecoded[\"D\"+Data_i+\"_IO_8Byte_\"+IORecs_8b_i+\"_Val\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+8).join(\"\"),16)\n\t\t\t\tDataOffsetRunningIndex+=8;\n\t\t\t}\n\t\t}\n\n\n\t}\n\tDecoded[\"DataCount\"]=parseInt(RawArray.slice(DataOffsetRunningIndex,DataOffsetRunningIndex+Recs_Size).join(\"\"),16)\n\tDataOffsetRunningIndex+=Recs_Size;\t\n\tDecoded[\"CRC\"]=parseInt(RawArray.slice(DataOffsetRunningIndex).join(\"\"),16)\n\t\n\tif(Decoded[\"D1_IO_8Byte_1_ID\"]===11 && Decoded[\"D1_IO_8Byte_2_ID\"]===14)\n\t    Decoded[\"ICCID\"]=Decoded[\"D1_IO_8Byte_1_Val\"]+\"\"+Decoded[\"D1_IO_8Byte_2_Val\"]\n}\n\n\nvar TheIPsList={};\nvar TheIMEI=\"\";\ntry{\n    TheIPsList=global.get(\"IPsList\");\n    TheIMEI = TheIPsList[msg.ip];\n}catch(e){}\n\nmsg.payload={\"AVLRawData\":Raw,\"AVLDecodedData\":Decoded};\nmsg[\"IMEI\"]=TheIMEI;\nreturn msg;\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 200,
        "wires": [
            [
                "daacc5141b1e6a5a",
                "28cecf764022177a",
                "45db631189c2f61c"
            ]
        ]
    },
    {
        "id": "dcbc2568916daeb7",
        "type": "inject",
        "z": "8744f388b5607c09",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "00 ce ca fe 01 1f 00 0f 38 36 36 39 30 37 30 35 35 32 32 37 37 38 38 08 02 00 00 01 81 b6 6e f1 48 02 ff 36 ec 28 1e a1 27 be 00 8f 00 bc 07 00 00 fc 10 05 ef 00 f0 01 15 05 71 39 fc 01 06 42 14 64 18 00 00 43 0e 3f 44 00 00 0d 00 00 0f 00 00 03 c7 00 00 00 00 10 00 00 4a 72 0c 00 00 00 00 02 0b 00 00 00 02 15 0b cf 9c 0e 00 00 00 00 7e 84 d9 70 00 00 01 81 b6 73 5a 30 02 ff 36 ec 28 1e a1 27 be 00 87 00 bc 07 00 00 fc 10 05 ef 00 f0 00 15 05 71 33 fc 00 06 42 0d e4 18 00 00 43 0d f7 44 00 00 0d 00 00 0f 00 00 03 c7 00 00 00 00 10 00 00 4a 72 0c 00 00 00 00 02 0b 00 00 00 02 15 0b cf 9c 0e 00 00 00 00 7e 84 d9 70 02",
        "payloadType": "str",
        "x": 370,
        "y": 320,
        "wires": [
            [
                "ce0b17417b20c84b"
            ]
        ]
    },
    {
        "id": "349ffad248cde273",
        "type": "debug",
        "z": "8744f388b5607c09",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 240,
        "wires": []
    },
    {
        "id": "daacc5141b1e6a5a",
        "type": "function",
        "z": "8744f388b5607c09",
        "name": "AVL RESPONSE",
        "func": "let str = \"00 05 \" + \n            msg.payload.RawData.substring(5,11) + \n            \" 01 \" + \n            msg.payload.AVLDecodedData.AVLPacketIDRaw + \" \" + \n            msg.payload.AVLDecodedData.DataCountRaw\nstr = str.split(' ').join('').toUpperCase();\nmsg[\"RawString\"] = str;\n\nmsg.payload = hexStringToBuffer(str);\nreturn msg;\n\n\nfunction hexStringToBuffer(str) {\n  let a = [];\n  for (let i = 0, len = str.length; i < len; i += 2) {\n    a.push(parseInt(str.substr(i,2), 16));\n  }\n  return Buffer.from(a);\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 140,
        "wires": [
            [
                "93fe0df70cd2412b",
                "349ffad248cde273"
            ]
        ]
    },
    {
        "id": "28cecf764022177a",
        "type": "function",
        "z": "8744f388b5607c09",
        "name": "DeleteNullKeys",
        "func": "var obj = msg.payload.AVLDecodedData;\nvar klm = {};\nObject.keys(obj).forEach(key => {\n  if (obj[key] === null)  {\n    delete obj[key];\n  }\n});\n\nmsg.payload.AVLDecodedData=obj;\n// return {payload:obj};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 460,
        "wires": [
            [
                "1cc98d6b4771bb1a",
                "89d963c558a964a8"
            ]
        ]
    },
    {
        "id": "93fe0df70cd2412b",
        "type": "udp out",
        "z": "8744f388b5607c09",
        "name": "",
        "addr": "",
        "iface": "",
        "port": "",
        "ipv": "udp4",
        "outport": "",
        "base64": false,
        "multicast": "false",
        "x": 1130,
        "y": 140,
        "wires": []
    },
    {
        "id": "1cc98d6b4771bb1a",
        "type": "switch",
        "z": "8744f388b5607c09",
        "name": "",
        "property": "IMEI",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "866907052467015",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "866907052435962",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "866907053430095",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "866907053429923",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "866907053430038",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "866907055227788",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 6,
        "x": 810,
        "y": 620,
        "wires": [
            [
                "59b53208ab116480"
            ],
            [
                "0716037375cda990",
                "86e2bed054a7e3de"
            ],
            [
                "5b531274a9f92301"
            ],
            [
                "2bee4222fa4c6aa0",
                "b78047f8d28d7ff8"
            ],
            [
                "8026c9bea35e747c"
            ],
            [
                "35de74433543f82d",
                "bcd619cfccf8cb4f"
            ]
        ]
    },
    {
        "id": "89d963c558a964a8",
        "type": "debug",
        "z": "8744f388b5607c09",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 460,
        "wires": []
    },
    {
        "id": "59b53208ab116480",
        "type": "function",
        "z": "8744f388b5607c09",
        "name": "Albusayra_1stDevice",
        "func": "let DataArr = [];\nlet tj = msg.payload.AVLDecodedData;\nDataArr.push(\"110,\"+msg[\"ICCID\"])\nDataArr.push(\"111,\"+msg[\"IMEI\"] + \",\"+ msg[\"ICCID\"]) \n\n    \nfor(let b=1;b<=parseInt(tj[\"DataCount\"]);b++){\n    let DTS=new Date();\n    if(!isNaN(Date.parse(tj[\"D\"+b+\"_Timestamp\"])) && tj[\"D\"+b+\"_Timestamp\"]!==undefined && tj[\"D\"+b+\"_Timestamp\"]!==null){\n        try{\n        DTS=tj[\"D\"+b+\"_Timestamp\"].replace(\".000Z\",\".000+00:00\")\n        }catch(e){}\n    }\n    if(tj[\"D\"+b+\"_GPS_Speed\"]!==undefined&&tj[\"D\"+b+\"_GPS_Speed\"]!==null)\n        DataArr.push(\"200,Speed,Speed,\"+tj[\"D\"+b+\"_GPS_Speed\"]+\",km/h,\"+DTS);\n    if(tj[\"D\"+b+\"_GPS_Lat\"]!==undefined && tj[\"D\"+b+\"_GPS_Lat\"]!==null && \n            tj[\"D\"+b+\"_GPS_Long\"]!==undefined && tj[\"D\"+b+\"_GPS_Long\"]!==null && \n            tj[\"D\"+b+\"_GPS_Alt\"]!==undefined && tj[\"D\"+b+\"_GPS_Alt\"]!==null)\n        DataArr.push(\"402,\"+tj[\"D\"+b+\"_GPS_Lat\"]/10000000+\",\"+tj[\"D\"+b+\"_GPS_Long\"]/10000000+\",\"+tj[\"D\"+b+\"_GPS_Alt\"]+\",,\"+DTS)\n\n    for(let kab=1;kab<=parseInt(tj[\"D\"+b+\"_IO_1Byte_Records\"]);kab++){\n        var TheID=parseInt(tj[\"D\"+b+\"_IO_1Byte_\"+kab+\"_ID\"])\n        var TheVal=parseInt(tj[\"D\"+b+\"_IO_1Byte_\"+kab+\"_Val\"])\n        if(TheID===239)\n            DataArr.push(\"200,Ignition,Ignition,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===240)\n            DataArr.push(\"200,Movement,Movement,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===21)\n            DataArr.push(\"200,GSMSignal,GSMSignal,\"+TheVal+\",bars,\"+DTS);\n        else if(TheID===113)//battery\n            DataArr.push(\"200,Battery,Battery,\"+TheVal+\",%,\"+DTS);\n            //DataArr.push(\"212,\"+TheVal+\",%,\"+DTS);\n    }\n    \n    for(let kab2=1;kab2<=parseInt(tj[\"D\"+b+\"_IO_2Byte_Records\"]);kab2++){\n        var TheID2=parseInt(tj[\"D\"+b+\"_IO_2Byte_\"+kab2+\"_ID\"])\n        var TheVal2=parseInt(tj[\"D\"+b+\"_IO_2Byte_\"+kab2+\"_Val\"])\n        if(TheID2===66)\n            DataArr.push(\"200,ExternalVoltage,ExternalVoltage,\"+(TheVal2*0.001)+\",V,\"+DTS);\n        else if(TheID2===205)//clell id\n            DataArr.push(\"111,,,,,,,\"+TheID2)\n        else if(TheID2===67)\n            DataArr.push(\"200,BatteryVoltage,BatteryVoltage,\"+(TheVal2*0.001)+\",V,\"+DTS);\n        else if(TheID2===68)\n            DataArr.push(\"200,BatteryCurrent,BatteryCurrent,\"+(TheVal2*0.001)+\",A,\"+DTS);\n        else if(TheID2===13)\n            DataArr.push(\"200,FuelRateGPS,FuelRateGPS,\"+(TheVal2*0.01)+\",l/100km,\"+DTS);\n        else if(TheID2===15)\n            DataArr.push(\"200,EcoScore,EcoScore,\"+(TheVal2*0.01)+\",score,\"+DTS);\n    }\n    \n    for(let kab4=1;kab4<=parseInt(tj[\"D\"+b+\"_IO_4Byte_Records\"]);kab4++){\n        var TheID4=parseInt(tj[\"D\"+b+\"_IO_4Byte_\"+kab4+\"_ID\"])\n        var TheVal4=parseInt(tj[\"D\"+b+\"_IO_4Byte_\"+kab4+\"_Val\"])\n        if(TheID4===199)\n            DataArr.push(\"200,TripOdometer,TripOdometer,\"+TheVal4+\",m,\"+DTS);\n        else if(TheID4===16)\n            DataArr.push(\"200,TotalOdometer,TotalOdometer,\"+TheVal4+\",m,\"+DTS);\n        else if(TheID4===12)\n            DataArr.push(\"200,FuelUsed,FuelUsed,\"+(TheVal4*0.001)+\",l,\"+DTS);\n    }\n    \n    // for(let kab8=1;kab8<=parseInt(tj[\"D\"+b+\"_IO_8Byte_Records\"]);kab8++){\n    //     var TheID8=parseInt(tj[\"D\"+b+\"_IO_8Byte_\"+kab8+\"_ID\"])\n    //     var TheVal8=parseInt(tj[\"D\"+b+\"_IO_8Byte_\"+kab8+\"_Val\"])\n    //     if(TheID8===)\n    //         DataArr.push(\"200,,,\"+TheVal8+\",,\"+DTS);\n    // }\n    \n}\n\nreturn {payload:DataArr};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 580,
        "wires": [
            [
                "17c75983c3e551c2",
                "5fa9682f7694393d"
            ]
        ]
    },
    {
        "id": "0716037375cda990",
        "type": "function",
        "z": "8744f388b5607c09",
        "name": "Albusayra_2ndDevice",
        "func": "let DataArr = [];\nlet tj = msg.payload.AVLDecodedData;\nDataArr.push(\"110,\"+msg[\"ICCID\"])\nDataArr.push(\"111,\"+msg[\"IMEI\"] + \",\"+ msg[\"ICCID\"]) \n\n    \nfor(let b=1;b<=parseInt(tj[\"DataCount\"]);b++){\n    let DTS=new Date();\n    if(!isNaN(Date.parse(tj[\"D\"+b+\"_Timestamp\"])) && tj[\"D\"+b+\"_Timestamp\"]!==undefined && tj[\"D\"+b+\"_Timestamp\"]!==null){\n        try{\n        DTS=tj[\"D\"+b+\"_Timestamp\"].replace(\".000Z\",\".000+00:00\")\n        }catch(e){}\n    }\n    if(tj[\"D\"+b+\"_GPS_Speed\"]!==undefined&&tj[\"D\"+b+\"_GPS_Speed\"]!==null)\n        DataArr.push(\"200,Speed,Speed,\"+tj[\"D\"+b+\"_GPS_Speed\"]+\",km/h,\"+DTS);\n    if(tj[\"D\"+b+\"_GPS_Lat\"]!==undefined && tj[\"D\"+b+\"_GPS_Lat\"]!==null && \n            tj[\"D\"+b+\"_GPS_Long\"]!==undefined && tj[\"D\"+b+\"_GPS_Long\"]!==null && \n            tj[\"D\"+b+\"_GPS_Alt\"]!==undefined && tj[\"D\"+b+\"_GPS_Alt\"]!==null)\n        DataArr.push(\"402,\"+tj[\"D\"+b+\"_GPS_Lat\"]/10000000+\",\"+tj[\"D\"+b+\"_GPS_Long\"]/10000000+\",\"+tj[\"D\"+b+\"_GPS_Alt\"]+\",,\"+DTS)\n\n    for(let kab=1;kab<=parseInt(tj[\"D\"+b+\"_IO_1Byte_Records\"]);kab++){\n        var TheID=parseInt(tj[\"D\"+b+\"_IO_1Byte_\"+kab+\"_ID\"])\n        var TheVal=parseInt(tj[\"D\"+b+\"_IO_1Byte_\"+kab+\"_Val\"])\n        if(TheID===239)\n            DataArr.push(\"200,Ignition,Ignition,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===240)\n            DataArr.push(\"200,Movement,Movement,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===21)\n            DataArr.push(\"200,GSMSignal,GSMSignal,\"+TheVal+\",bars,\"+DTS);\n        else if(TheID===113)//battery\n            DataArr.push(\"200,Battery,Battery,\"+TheVal+\",%,\"+DTS);\n            //DataArr.push(\"212,\"+TheVal+\",%,\"+DTS);\n    }\n    \n    for(let kab2=1;kab2<=parseInt(tj[\"D\"+b+\"_IO_2Byte_Records\"]);kab2++){\n        var TheID2=parseInt(tj[\"D\"+b+\"_IO_2Byte_\"+kab2+\"_ID\"])\n        var TheVal2=parseInt(tj[\"D\"+b+\"_IO_2Byte_\"+kab2+\"_Val\"])\n        if(TheID2===66)\n            DataArr.push(\"200,ExternalVoltage,ExternalVoltage,\"+(TheVal2*0.001)+\",V,\"+DTS);\n        else if(TheID2===205)//clell id\n            DataArr.push(\"111,,,,,,,\"+TheID2)\n        else if(TheID2===67)\n            DataArr.push(\"200,BatteryVoltage,BatteryVoltage,\"+(TheVal2*0.001)+\",V,\"+DTS);\n        else if(TheID2===68)\n            DataArr.push(\"200,BatteryCurrent,BatteryCurrent,\"+(TheVal2*0.001)+\",A,\"+DTS);\n        else if(TheID2===13)\n            DataArr.push(\"200,FuelRateGPS,FuelRateGPS,\"+(TheVal2*0.01)+\",l/100km,\"+DTS);\n        else if(TheID2===15)\n            DataArr.push(\"200,EcoScore,EcoScore,\"+(TheVal2*0.01)+\",score,\"+DTS);\n    }\n    \n    for(let kab4=1;kab4<=parseInt(tj[\"D\"+b+\"_IO_4Byte_Records\"]);kab4++){\n        var TheID4=parseInt(tj[\"D\"+b+\"_IO_4Byte_\"+kab4+\"_ID\"])\n        var TheVal4=parseInt(tj[\"D\"+b+\"_IO_4Byte_\"+kab4+\"_Val\"])\n        if(TheID4===199)\n            DataArr.push(\"200,TripOdometer,TripOdometer,\"+TheVal4+\",m,\"+DTS);\n        else if(TheID4===16)\n            DataArr.push(\"200,TotalOdometer,TotalOdometer,\"+TheVal4+\",m,\"+DTS);\n        else if(TheID4===12)\n            DataArr.push(\"200,FuelUsed,FuelUsed,\"+(TheVal4*0.001)+\",l,\"+DTS);\n    }\n    \n    // for(let kab8=1;kab8<=parseInt(tj[\"D\"+b+\"_IO_8Byte_Records\"]);kab8++){\n    //     var TheID8=parseInt(tj[\"D\"+b+\"_IO_8Byte_\"+kab8+\"_ID\"])\n    //     var TheVal8=parseInt(tj[\"D\"+b+\"_IO_8Byte_\"+kab8+\"_Val\"])\n    //     if(TheID8===)\n    //         DataArr.push(\"200,,,\"+TheVal8+\",,\"+DTS);\n    // }\n    \n}\n\nreturn {payload:DataArr};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 620,
        "wires": [
            [
                "eaa7a26ff5ca62a3",
                "5fa9682f7694393d",
                "e1f74b5dabc160e6"
            ]
        ]
    },
    {
        "id": "86e2bed054a7e3de",
        "type": "debug",
        "z": "8744f388b5607c09",
        "name": "SAMI",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 900,
        "wires": []
    },
    {
        "id": "5b531274a9f92301",
        "type": "function",
        "z": "8744f388b5607c09",
        "name": "Albusayra_3rd_Device",
        "func": "let DataArr = [];\nlet tj = msg.payload.AVLDecodedData;\nDataArr.push(\"110,\"+msg[\"ICCID\"])\nDataArr.push(\"111,\"+msg[\"IMEI\"] + \",\"+ msg[\"ICCID\"]) \n\n    \nfor(let b=1;b<=parseInt(tj[\"DataCount\"]);b++){\n    let DTS=new Date();\n    if(!isNaN(Date.parse(tj[\"D\"+b+\"_Timestamp\"])) && tj[\"D\"+b+\"_Timestamp\"]!==undefined && tj[\"D\"+b+\"_Timestamp\"]!==null){\n        try{\n        DTS=tj[\"D\"+b+\"_Timestamp\"].replace(\".000Z\",\".000+00:00\")\n        }catch(e){}\n    }\n    if(tj[\"D\"+b+\"_GPS_Speed\"]!==undefined&&tj[\"D\"+b+\"_GPS_Speed\"]!==null)\n        DataArr.push(\"200,Speed,Speed,\"+tj[\"D\"+b+\"_GPS_Speed\"]+\",km/h,\"+DTS);\n    if(tj[\"D\"+b+\"_GPS_Lat\"]!==undefined && tj[\"D\"+b+\"_GPS_Lat\"]!==null && \n            tj[\"D\"+b+\"_GPS_Long\"]!==undefined && tj[\"D\"+b+\"_GPS_Long\"]!==null && \n            tj[\"D\"+b+\"_GPS_Alt\"]!==undefined && tj[\"D\"+b+\"_GPS_Alt\"]!==null)\n        DataArr.push(\"402,\"+tj[\"D\"+b+\"_GPS_Lat\"]/10000000+\",\"+tj[\"D\"+b+\"_GPS_Long\"]/10000000+\",\"+tj[\"D\"+b+\"_GPS_Alt\"]+\",,\"+DTS)\n\n    for(let kab=1;kab<=parseInt(tj[\"D\"+b+\"_IO_1Byte_Records\"]);kab++){\n        var TheID=parseInt(tj[\"D\"+b+\"_IO_1Byte_\"+kab+\"_ID\"])\n        var TheVal=parseInt(tj[\"D\"+b+\"_IO_1Byte_\"+kab+\"_Val\"])\n        if(TheID===239)\n            DataArr.push(\"200,Ignition,Ignition,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===240)\n            DataArr.push(\"200,Movement,Movement,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===21)\n            DataArr.push(\"200,GSMSignal,GSMSignal,\"+TheVal+\",bars,\"+DTS);\n        else if(TheID===113)//battery\n            DataArr.push(\"200,Battery,Battery,\"+TheVal+\",%,\"+DTS);\n            //DataArr.push(\"212,\"+TheVal+\",%,\"+DTS);\n    }\n    \n    for(let kab2=1;kab2<=parseInt(tj[\"D\"+b+\"_IO_2Byte_Records\"]);kab2++){\n        var TheID2=parseInt(tj[\"D\"+b+\"_IO_2Byte_\"+kab2+\"_ID\"])\n        var TheVal2=parseInt(tj[\"D\"+b+\"_IO_2Byte_\"+kab2+\"_Val\"])\n        if(TheID2===66)\n            DataArr.push(\"200,ExternalVoltage,ExternalVoltage,\"+(TheVal2*0.001)+\",V,\"+DTS);\n        else if(TheID2===205)//clell id\n            DataArr.push(\"111,,,,,,,\"+TheID2)\n        else if(TheID2===67)\n            DataArr.push(\"200,BatteryVoltage,BatteryVoltage,\"+(TheVal2*0.001)+\",V,\"+DTS);\n        else if(TheID2===68)\n            DataArr.push(\"200,BatteryCurrent,BatteryCurrent,\"+(TheVal2*0.001)+\",A,\"+DTS);\n        else if(TheID2===13)\n            DataArr.push(\"200,FuelRateGPS,FuelRateGPS,\"+(TheVal2*0.01)+\",l/100km,\"+DTS);\n        else if(TheID2===15)\n            DataArr.push(\"200,EcoScore,EcoScore,\"+(TheVal2*0.01)+\",score,\"+DTS);\n    }\n    \n    for(let kab4=1;kab4<=parseInt(tj[\"D\"+b+\"_IO_4Byte_Records\"]);kab4++){\n        var TheID4=parseInt(tj[\"D\"+b+\"_IO_4Byte_\"+kab4+\"_ID\"])\n        var TheVal4=parseInt(tj[\"D\"+b+\"_IO_4Byte_\"+kab4+\"_Val\"])\n        if(TheID4===199)\n            DataArr.push(\"200,TripOdometer,TripOdometer,\"+TheVal4+\",m,\"+DTS);\n        else if(TheID4===16)\n            DataArr.push(\"200,TotalOdometer,TotalOdometer,\"+TheVal4+\",m,\"+DTS);\n        else if(TheID4===12)\n            DataArr.push(\"200,FuelUsed,FuelUsed,\"+(TheVal4*0.001)+\",l,\"+DTS);\n    }\n    \n    // for(let kab8=1;kab8<=parseInt(tj[\"D\"+b+\"_IO_8Byte_Records\"]);kab8++){\n    //     var TheID8=parseInt(tj[\"D\"+b+\"_IO_8Byte_\"+kab8+\"_ID\"])\n    //     var TheVal8=parseInt(tj[\"D\"+b+\"_IO_8Byte_\"+kab8+\"_Val\"])\n    //     if(TheID8===)\n    //         DataArr.push(\"200,,,\"+TheVal8+\",,\"+DTS);\n    // }\n    \n}\n\nreturn {payload:DataArr};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 660,
        "wires": [
            [
                "69f2953ad6dfbd2c",
                "5fa9682f7694393d"
            ]
        ]
    },
    {
        "id": "2bee4222fa4c6aa0",
        "type": "function",
        "z": "8744f388b5607c09",
        "name": "Albusayra_4th_Device",
        "func": "let DataArr = [];\nlet tj = msg.payload.AVLDecodedData;\nDataArr.push(\"110,\"+msg[\"ICCID\"])\nDataArr.push(\"111,\"+msg[\"IMEI\"] + \",\"+ msg[\"ICCID\"]) \n\n    \nfor(let b=1;b<=parseInt(tj[\"DataCount\"]);b++){\n    let DTS=new Date();\n    if(!isNaN(Date.parse(tj[\"D\"+b+\"_Timestamp\"])) && tj[\"D\"+b+\"_Timestamp\"]!==undefined && tj[\"D\"+b+\"_Timestamp\"]!==null){\n        try{\n        DTS=tj[\"D\"+b+\"_Timestamp\"].replace(\".000Z\",\".000+00:00\")\n        }catch(e){}\n    }\n    if(tj[\"D\"+b+\"_GPS_Speed\"]!==undefined&&tj[\"D\"+b+\"_GPS_Speed\"]!==null)\n        DataArr.push(\"200,Speed,Speed,\"+tj[\"D\"+b+\"_GPS_Speed\"]+\",km/h,\"+DTS);\n    if(tj[\"D\"+b+\"_GPS_Lat\"]!==undefined && tj[\"D\"+b+\"_GPS_Lat\"]!==null && \n            tj[\"D\"+b+\"_GPS_Long\"]!==undefined && tj[\"D\"+b+\"_GPS_Long\"]!==null && \n            tj[\"D\"+b+\"_GPS_Alt\"]!==undefined && tj[\"D\"+b+\"_GPS_Alt\"]!==null)\n        DataArr.push(\"402,\"+tj[\"D\"+b+\"_GPS_Lat\"]/10000000+\",\"+tj[\"D\"+b+\"_GPS_Long\"]/10000000+\",\"+tj[\"D\"+b+\"_GPS_Alt\"]+\",,\"+DTS)\n\n    for(let kab=1;kab<=parseInt(tj[\"D\"+b+\"_IO_1Byte_Records\"]);kab++){\n        var TheID=parseInt(tj[\"D\"+b+\"_IO_1Byte_\"+kab+\"_ID\"])\n        var TheVal=parseInt(tj[\"D\"+b+\"_IO_1Byte_\"+kab+\"_Val\"])\n        if(TheID===239)\n            DataArr.push(\"200,Ignition,Ignition,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===240)\n            DataArr.push(\"200,Movement,Movement,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===21)\n            DataArr.push(\"200,GSMSignal,GSMSignal,\"+TheVal+\",bars,\"+DTS);\n        else if(TheID===113)//battery\n            DataArr.push(\"200,Battery,Battery,\"+TheVal+\",%,\"+DTS);\n            //DataArr.push(\"212,\"+TheVal+\",%,\"+DTS);\n    }\n    \n    for(let kab2=1;kab2<=parseInt(tj[\"D\"+b+\"_IO_2Byte_Records\"]);kab2++){\n        var TheID2=parseInt(tj[\"D\"+b+\"_IO_2Byte_\"+kab2+\"_ID\"])\n        var TheVal2=parseInt(tj[\"D\"+b+\"_IO_2Byte_\"+kab2+\"_Val\"])\n        if(TheID2===66)\n            DataArr.push(\"200,ExternalVoltage,ExternalVoltage,\"+(TheVal2*0.001)+\",V,\"+DTS);\n        else if(TheID2===205)//clell id\n            DataArr.push(\"111,,,,,,,\"+TheID2)\n        else if(TheID2===67)\n            DataArr.push(\"200,BatteryVoltage,BatteryVoltage,\"+(TheVal2*0.001)+\",V,\"+DTS);\n        else if(TheID2===68)\n            DataArr.push(\"200,BatteryCurrent,BatteryCurrent,\"+(TheVal2*0.001)+\",A,\"+DTS);\n        else if(TheID2===13)\n            DataArr.push(\"200,FuelRateGPS,FuelRateGPS,\"+(TheVal2*0.01)+\",l/100km,\"+DTS);\n        else if(TheID2===15)\n            DataArr.push(\"200,EcoScore,EcoScore,\"+(TheVal2*0.01)+\",score,\"+DTS);\n    }\n    \n    for(let kab4=1;kab4<=parseInt(tj[\"D\"+b+\"_IO_4Byte_Records\"]);kab4++){\n        var TheID4=parseInt(tj[\"D\"+b+\"_IO_4Byte_\"+kab4+\"_ID\"])\n        var TheVal4=parseInt(tj[\"D\"+b+\"_IO_4Byte_\"+kab4+\"_Val\"])\n        if(TheID4===199)\n            DataArr.push(\"200,TripOdometer,TripOdometer,\"+TheVal4+\",m,\"+DTS);\n        else if(TheID4===16)\n            DataArr.push(\"200,TotalOdometer,TotalOdometer,\"+TheVal4+\",m,\"+DTS);\n        else if(TheID4===12)\n            DataArr.push(\"200,FuelUsed,FuelUsed,\"+(TheVal4*0.001)+\",l,\"+DTS);\n    }\n    \n    // for(let kab8=1;kab8<=parseInt(tj[\"D\"+b+\"_IO_8Byte_Records\"]);kab8++){\n    //     var TheID8=parseInt(tj[\"D\"+b+\"_IO_8Byte_\"+kab8+\"_ID\"])\n    //     var TheVal8=parseInt(tj[\"D\"+b+\"_IO_8Byte_\"+kab8+\"_Val\"])\n    //     if(TheID8===)\n    //         DataArr.push(\"200,,,\"+TheVal8+\",,\"+DTS);\n    // }\n    \n}\n\nreturn {payload:DataArr};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 700,
        "wires": [
            [
                "3ad39c601b2761f7",
                "5fa9682f7694393d"
            ]
        ]
    },
    {
        "id": "b78047f8d28d7ff8",
        "type": "debug",
        "z": "8744f388b5607c09",
        "name": "Bike 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 980,
        "wires": []
    },
    {
        "id": "8026c9bea35e747c",
        "type": "function",
        "z": "8744f388b5607c09",
        "name": "Albusayra_5th_Device",
        "func": "let DataArr = [];\nlet tj = msg.payload.AVLDecodedData;\nDataArr.push(\"110,\"+msg[\"ICCID\"])\nDataArr.push(\"111,\"+msg[\"IMEI\"] + \",\"+ msg[\"ICCID\"]) \n\n    \nfor(let b=1;b<=parseInt(tj[\"DataCount\"]);b++){\n    let DTS=new Date();\n    if(!isNaN(Date.parse(tj[\"D\"+b+\"_Timestamp\"])) && tj[\"D\"+b+\"_Timestamp\"]!==undefined && tj[\"D\"+b+\"_Timestamp\"]!==null){\n        try{\n        DTS=tj[\"D\"+b+\"_Timestamp\"].replace(\".000Z\",\".000+00:00\")\n        }catch(e){}\n    }\n    if(tj[\"D\"+b+\"_GPS_Speed\"]!==undefined&&tj[\"D\"+b+\"_GPS_Speed\"]!==null)\n        DataArr.push(\"200,Speed,Speed,\"+tj[\"D\"+b+\"_GPS_Speed\"]+\",km/h,\"+DTS);\n    if(tj[\"D\"+b+\"_GPS_Lat\"]!==undefined && tj[\"D\"+b+\"_GPS_Lat\"]!==null && \n            tj[\"D\"+b+\"_GPS_Long\"]!==undefined && tj[\"D\"+b+\"_GPS_Long\"]!==null && \n            tj[\"D\"+b+\"_GPS_Alt\"]!==undefined && tj[\"D\"+b+\"_GPS_Alt\"]!==null)\n        DataArr.push(\"402,\"+tj[\"D\"+b+\"_GPS_Lat\"]/10000000+\",\"+tj[\"D\"+b+\"_GPS_Long\"]/10000000+\",\"+tj[\"D\"+b+\"_GPS_Alt\"]+\",,\"+DTS)\n\n    for(let kab=1;kab<=parseInt(tj[\"D\"+b+\"_IO_1Byte_Records\"]);kab++){\n        var TheID=parseInt(tj[\"D\"+b+\"_IO_1Byte_\"+kab+\"_ID\"])\n        var TheVal=parseInt(tj[\"D\"+b+\"_IO_1Byte_\"+kab+\"_Val\"])\n        if(TheID===239)\n            DataArr.push(\"200,Ignition,Ignition,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===240)\n            DataArr.push(\"200,Movement,Movement,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===21)\n            DataArr.push(\"200,GSMSignal,GSMSignal,\"+TheVal+\",bars,\"+DTS);\n        else if(TheID===113)//battery\n            DataArr.push(\"200,Battery,Battery,\"+TheVal+\",%,\"+DTS);\n            //DataArr.push(\"212,\"+TheVal+\",%,\"+DTS);\n    }\n    \n    for(let kab2=1;kab2<=parseInt(tj[\"D\"+b+\"_IO_2Byte_Records\"]);kab2++){\n        var TheID2=parseInt(tj[\"D\"+b+\"_IO_2Byte_\"+kab2+\"_ID\"])\n        var TheVal2=parseInt(tj[\"D\"+b+\"_IO_2Byte_\"+kab2+\"_Val\"])\n        if(TheID2===66)\n            DataArr.push(\"200,ExternalVoltage,ExternalVoltage,\"+(TheVal2*0.001)+\",V,\"+DTS);\n        else if(TheID2===205)//clell id\n            DataArr.push(\"111,,,,,,,\"+TheID2)\n        else if(TheID2===67)\n            DataArr.push(\"200,BatteryVoltage,BatteryVoltage,\"+(TheVal2*0.001)+\",V,\"+DTS);\n        else if(TheID2===68)\n            DataArr.push(\"200,BatteryCurrent,BatteryCurrent,\"+(TheVal2*0.001)+\",A,\"+DTS);\n        else if(TheID2===13)\n            DataArr.push(\"200,FuelRateGPS,FuelRateGPS,\"+(TheVal2*0.01)+\",l/100km,\"+DTS);\n        else if(TheID2===15)\n            DataArr.push(\"200,EcoScore,EcoScore,\"+(TheVal2*0.01)+\",score,\"+DTS);\n    }\n    \n    for(let kab4=1;kab4<=parseInt(tj[\"D\"+b+\"_IO_4Byte_Records\"]);kab4++){\n        var TheID4=parseInt(tj[\"D\"+b+\"_IO_4Byte_\"+kab4+\"_ID\"])\n        var TheVal4=parseInt(tj[\"D\"+b+\"_IO_4Byte_\"+kab4+\"_Val\"])\n        if(TheID4===199)\n            DataArr.push(\"200,TripOdometer,TripOdometer,\"+TheVal4+\",m,\"+DTS);\n        else if(TheID4===16)\n            DataArr.push(\"200,TotalOdometer,TotalOdometer,\"+TheVal4+\",m,\"+DTS);\n        else if(TheID4===12)\n            DataArr.push(\"200,FuelUsed,FuelUsed,\"+(TheVal4*0.001)+\",l,\"+DTS);\n    }\n    \n    // for(let kab8=1;kab8<=parseInt(tj[\"D\"+b+\"_IO_8Byte_Records\"]);kab8++){\n    //     var TheID8=parseInt(tj[\"D\"+b+\"_IO_8Byte_\"+kab8+\"_ID\"])\n    //     var TheVal8=parseInt(tj[\"D\"+b+\"_IO_8Byte_\"+kab8+\"_Val\"])\n    //     if(TheID8===)\n    //         DataArr.push(\"200,,,\"+TheVal8+\",,\"+DTS);\n    // }\n    \n}\n\nreturn {payload:DataArr};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 740,
        "wires": [
            [
                "10cd2dd7ec15e52a",
                "5fa9682f7694393d"
            ]
        ]
    },
    {
        "id": "35de74433543f82d",
        "type": "function",
        "z": "8744f388b5607c09",
        "name": "UmersFirstTracker",
        "func": "let DataArr = [];\nlet tj = msg.payload.AVLDecodedData;\nDataArr.push(\"110,\"+msg[\"ICCID\"])\nDataArr.push(\"111,\"+msg[\"IMEI\"] + \",\"+ msg[\"ICCID\"]) \n\n    \nfor(let b=1;b<=parseInt(tj[\"DataCount\"]);b++){\n    let DTS=new Date();\n    if(!isNaN(Date.parse(tj[\"D\"+b+\"_Timestamp\"])) && tj[\"D\"+b+\"_Timestamp\"]!==undefined && tj[\"D\"+b+\"_Timestamp\"]!==null){\n        try{\n        DTS=tj[\"D\"+b+\"_Timestamp\"].replace(\".000Z\",\".000+00:00\")\n        }catch(e){}\n    }\n    if(tj[\"D\"+b+\"_GPS_Speed\"]!==undefined&&tj[\"D\"+b+\"_GPS_Speed\"]!==null)\n        DataArr.push(\"200,Speed,Speed,\"+tj[\"D\"+b+\"_GPS_Speed\"]+\",km/h,\"+DTS);\n    if(tj[\"D\"+b+\"_GPS_Lat\"]!==undefined && tj[\"D\"+b+\"_GPS_Lat\"]!==null && \n            tj[\"D\"+b+\"_GPS_Long\"]!==undefined && tj[\"D\"+b+\"_GPS_Long\"]!==null && \n            tj[\"D\"+b+\"_GPS_Alt\"]!==undefined && tj[\"D\"+b+\"_GPS_Alt\"]!==null)\n        DataArr.push(\"402,\"+tj[\"D\"+b+\"_GPS_Lat\"]/10000000+\",\"+tj[\"D\"+b+\"_GPS_Long\"]/10000000+\",\"+tj[\"D\"+b+\"_GPS_Alt\"]+\",,\"+DTS)\n\n    for(let kab=1;kab<=parseInt(tj[\"D\"+b+\"_IO_1Byte_Records\"]);kab++){\n        var TheID=parseInt(tj[\"D\"+b+\"_IO_1Byte_\"+kab+\"_ID\"])\n        var TheVal=parseInt(tj[\"D\"+b+\"_IO_1Byte_\"+kab+\"_Val\"])\n        if(TheID===239)\n            DataArr.push(\"200,Ignition,Ignition,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===240)\n            DataArr.push(\"200,Movement,Movement,\"+TheVal+\",State,\"+DTS);\n        else if(TheID===21)\n            DataArr.push(\"200,GSMSignal,GSMSignal,\"+TheVal+\",bars,\"+DTS);\n        else if(TheID===113)//battery\n            DataArr.push(\"200,Battery,Battery,\"+TheVal+\",%,\"+DTS);\n            //DataArr.push(\"212,\"+TheVal+\",%,\"+DTS);\n    }\n    \n    for(let kab2=1;kab2<=parseInt(tj[\"D\"+b+\"_IO_2Byte_Records\"]);kab2++){\n        var TheID2=parseInt(tj[\"D\"+b+\"_IO_2Byte_\"+kab2+\"_ID\"])\n        var TheVal2=parseInt(tj[\"D\"+b+\"_IO_2Byte_\"+kab2+\"_Val\"])\n        if(TheID2===66)\n            DataArr.push(\"200,ExternalVoltage,ExternalVoltage,\"+(TheVal2*0.001)+\",V,\"+DTS);\n        else if(TheID2===205)//clell id\n            DataArr.push(\"111,,,,,,,\"+TheID2)\n        else if(TheID2===67)\n            DataArr.push(\"200,BatteryVoltage,BatteryVoltage,\"+(TheVal2*0.001)+\",V,\"+DTS);\n        else if(TheID2===68)\n            DataArr.push(\"200,BatteryCurrent,BatteryCurrent,\"+(TheVal2*0.001)+\",A,\"+DTS);\n        else if(TheID2===13)\n            DataArr.push(\"200,FuelRateGPS,FuelRateGPS,\"+(TheVal2*0.01)+\",l/100km,\"+DTS);\n        else if(TheID2===15)\n            DataArr.push(\"200,EcoScore,EcoScore,\"+(TheVal2*0.01)+\",score,\"+DTS);\n    }\n    \n    for(let kab4=1;kab4<=parseInt(tj[\"D\"+b+\"_IO_4Byte_Records\"]);kab4++){\n        var TheID4=parseInt(tj[\"D\"+b+\"_IO_4Byte_\"+kab4+\"_ID\"])\n        var TheVal4=parseInt(tj[\"D\"+b+\"_IO_4Byte_\"+kab4+\"_Val\"])\n        if(TheID4===199)\n            DataArr.push(\"200,TripOdometer,TripOdometer,\"+TheVal4+\",m,\"+DTS);\n        else if(TheID4===16)\n            DataArr.push(\"200,TotalOdometer,TotalOdometer,\"+TheVal4+\",m,\"+DTS);\n        else if(TheID4===12)\n            DataArr.push(\"200,FuelUsed,FuelUsed,\"+(TheVal4*0.001)+\",l,\"+DTS);\n    }\n    \n    // for(let kab8=1;kab8<=parseInt(tj[\"D\"+b+\"_IO_8Byte_Records\"]);kab8++){\n    //     var TheID8=parseInt(tj[\"D\"+b+\"_IO_8Byte_\"+kab8+\"_ID\"])\n    //     var TheVal8=parseInt(tj[\"D\"+b+\"_IO_8Byte_\"+kab8+\"_Val\"])\n    //     if(TheID8===)\n    //         DataArr.push(\"200,,,\"+TheVal8+\",,\"+DTS);\n    // }\n    \n}\n\nreturn {payload:DataArr};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 820,
        "wires": [
            [
                "7b1f75296bb0db0c",
                "bcd619cfccf8cb4f"
            ]
        ]
    },
    {
        "id": "bcd619cfccf8cb4f",
        "type": "debug",
        "z": "8744f388b5607c09",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 940,
        "wires": []
    },
    {
        "id": "17c75983c3e551c2",
        "type": "split",
        "z": "8744f388b5607c09",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1290,
        "y": 580,
        "wires": [
            [
                "2812df73ac4290b8",
                "126f9c1e54d71aab"
            ]
        ]
    },
    {
        "id": "5fa9682f7694393d",
        "type": "debug",
        "z": "8744f388b5607c09",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1390,
        "y": 500,
        "wires": []
    },
    {
        "id": "eaa7a26ff5ca62a3",
        "type": "split",
        "z": "8744f388b5607c09",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1290,
        "y": 620,
        "wires": [
            [
                "2bc7cc951a103d9c",
                "a1f3e25a41c33b32"
            ]
        ]
    },
    {
        "id": "e1f74b5dabc160e6",
        "type": "debug",
        "z": "8744f388b5607c09",
        "name": "SAMI Parsed",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1530,
        "y": 900,
        "wires": []
    },
    {
        "id": "69f2953ad6dfbd2c",
        "type": "split",
        "z": "8744f388b5607c09",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1290,
        "y": 660,
        "wires": [
            [
                "188ca767ab6068ba",
                "5589d18343f56bc7"
            ]
        ]
    },
    {
        "id": "3ad39c601b2761f7",
        "type": "split",
        "z": "8744f388b5607c09",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1290,
        "y": 700,
        "wires": [
            [
                "10d59a39cd1aeb80",
                "691126d651fe7cd8"
            ]
        ]
    },
    {
        "id": "10cd2dd7ec15e52a",
        "type": "split",
        "z": "8744f388b5607c09",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1290,
        "y": 740,
        "wires": [
            [
                "75d97998c1fe6dfd",
                "6145ef605383cd78"
            ]
        ]
    },
    {
        "id": "7b1f75296bb0db0c",
        "type": "split",
        "z": "8744f388b5607c09",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1290,
        "y": 820,
        "wires": [
            [
                "1ec048b2886eca39",
                "1bbf30af6b51f180"
            ]
        ]
    },
    {
        "id": "2812df73ac4290b8",
        "type": "mqtt out",
        "z": "8744f388b5607c09",
        "name": "Albusayra_FMC230_001_Prod",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "385f37425ca98538",
        "x": 1570,
        "y": 580,
        "wires": []
    },
    {
        "id": "126f9c1e54d71aab",
        "type": "mqtt out",
        "z": "8744f388b5607c09",
        "name": "Albusayra_FMC230_001_Dev",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9c68adb1aaa37d91",
        "x": 1610,
        "y": 120,
        "wires": []
    },
    {
        "id": "2bc7cc951a103d9c",
        "type": "mqtt out",
        "z": "8744f388b5607c09",
        "name": "Albusayra_FMC230_002_Prod",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d95b802295f3487f",
        "x": 1570,
        "y": 620,
        "wires": []
    },
    {
        "id": "a1f3e25a41c33b32",
        "type": "mqtt out",
        "z": "8744f388b5607c09",
        "name": "Albusayra_FMC230_002_Dev",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "39bb307e1a759a01",
        "x": 1610,
        "y": 160,
        "wires": []
    },
    {
        "id": "188ca767ab6068ba",
        "type": "mqtt out",
        "z": "8744f388b5607c09",
        "name": "Albusayra_FMC230_003_Prod",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "54819f09d767b0cb",
        "x": 1570,
        "y": 660,
        "wires": []
    },
    {
        "id": "5589d18343f56bc7",
        "type": "mqtt out",
        "z": "8744f388b5607c09",
        "name": "Albusayra_FMC230_003_Dev",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "32eaee021723ded5",
        "x": 1610,
        "y": 200,
        "wires": []
    },
    {
        "id": "10d59a39cd1aeb80",
        "type": "mqtt out",
        "z": "8744f388b5607c09",
        "name": "Albusayra_FMC230_004_Prod",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "fef5973b48a0cbe7",
        "x": 1570,
        "y": 700,
        "wires": []
    },
    {
        "id": "691126d651fe7cd8",
        "type": "mqtt out",
        "z": "8744f388b5607c09",
        "name": "Albusayra_FMC230_004_Dev",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "1a06af53d0dc8076",
        "x": 1610,
        "y": 240,
        "wires": []
    },
    {
        "id": "75d97998c1fe6dfd",
        "type": "mqtt out",
        "z": "8744f388b5607c09",
        "name": "Albusayra_FMC230_005_Prod",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "e7bb84491da9847c",
        "x": 1570,
        "y": 740,
        "wires": []
    },
    {
        "id": "6145ef605383cd78",
        "type": "mqtt out",
        "z": "8744f388b5607c09",
        "name": "Albusayra_FMC230_005_Dev",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "1aa0a0496a31e377",
        "x": 1610,
        "y": 280,
        "wires": []
    },
    {
        "id": "eb7111a26ff06bb2",
        "type": "mqtt out",
        "z": "8744f388b5607c09",
        "name": "UmersFMC230_C8y_Prod",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "b6fb5d071c21a067",
        "x": 1560,
        "y": 820,
        "wires": []
    },
    {
        "id": "1ec048b2886eca39",
        "type": "mqtt out",
        "z": "8744f388b5607c09",
        "name": "UmersFMC230_Dev",
        "topic": "s/us",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "373637bc766a5e6c",
        "x": 1580,
        "y": 80,
        "wires": []
    },
    {
        "id": "1bbf30af6b51f180",
        "type": "debug",
        "z": "8744f388b5607c09",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1550,
        "y": 980,
        "wires": []
    },
    {
        "id": "6a2bf51998cb8d81",
        "type": "debug",
        "z": "8744f388b5607c09",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 300,
        "wires": []
    },
    {
        "id": "45db631189c2f61c",
        "type": "debug",
        "z": "8744f388b5607c09",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 360,
        "wires": []
    }
]
